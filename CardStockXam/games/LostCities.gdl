;; Lost Cities in the GDL
(game

   (setup 
      ;; Set up the players, 2 teams of 2 players, alternating
      (create players 2)
      (create teams (0) (1))
      ;; Create the deck source
      (create deck (game iloc STOCK) (deck (rank (2, 3, 4, 5, 6, 7, 8, 9, 10))
                                                     (color (white, blue, green, red, yellow))))
      (create deck (game iloc STOCK) (deck 3 (rank (HS))
                                                     (color (white, blue, green, red, yellow))))
   )
   (comp (()
          (set (game sto ROUNDS) 0)
          ;; solidfy card recedence
                 (initialize points PRECEDENCE (
                               
                               (all (rank (10)) 10)
                               (all (rank (9)) 9)
                               (all (rank (8)) 8)
                               (all (rank (7)) 7)
                               (all (rank (6)) 6)
                               (all (rank (5)) 5)
                               (all (rank (4)) 4)
                               (all (rank (3)) 3)
                               (all (rank (2)) 2)
                               )
                               )
                 (initialize points MULTIPLIER (
                                                
                                                (all (rank (HS)) 1)
                                                )
                             )
                 )
         )       
   ;; Stages of the game
   (stage player
      (end (== (game sto ROUNDS) 3))
      (comp (() (shuffle (game iloc STOCK))
                (move (top (game iloc STOCK))
                      (top ((all player) iloc HAND)) 8)
             )
      ) 
         
      
      ;; players play a hand once
      (stage player
             (end (== (size (game iloc STOCK)) 0))
             
             (choice
              
              
              
              ;; Play to the board
              ((> (size ((current player) iloc HAND where (all (== (cardatt color each) green)))) 0)
                    
               (move (any ((current player) iloc HAND where (all (== (cardatt color each) green)))) 
                     (top (game vloc GREEN)))
               (set (game sto GREEN) 1))
              
              ( (> (size ((current player) iloc HAND where (all (== (cardatt color each) yellow)))) 0)
                    
               (move (any ((current player) iloc HAND where (all (== (cardatt color each) yellow)))) 
                     (top (game vloc YELLOW)))
               (set (game sto YELLOW) 1))
              
              ( (> (size ((current player) iloc HAND where (all (== (cardatt color each) white))))  0)
                    
               (move (any ((current player) iloc HAND where (all (== (cardatt color each) white)))) 
                     (top (game vloc WHITE)))
               (set (game sto WHITE) 1))
              
              ( (> (size ((current player) iloc HAND where (all (== (cardatt color each) red)))) 0)
                    
               (move (any ((current player) iloc HAND where (all (== (cardatt color each) red)))) 
                     (top (game vloc RED)))
               (set (game sto RED) 1))
              
              ( (> (size ((current player) iloc HAND where (all (== (cardatt color each) blue)))) 0)
                    
               (move (any ((current player) iloc HAND where (all (== (cardatt color each) blue)))) 
                     (top (game vloc BLUE)))
               (set (game sto BLUE) 1))
              
              
              ;; OR play to your side
               ((and (== (size ((current player) vloc GREEN)) 0)
                
                    (> (size ((current player) iloc HAND where (all (== (cardatt color each) green))) ) 0))
                    
               (move (any ((current player) iloc HAND where (all (== (cardatt color each) green)))) 
                     (top ((current player) vloc GREEN))))
               
               ((and (== (size ((current player) vloc YELLOW)) 0)
                
                    (> (size ((current player) iloc HAND where (all (== (cardatt color each) yellow))) ) 0))
                    
               (move (any ((current player) iloc HAND where (all (== (cardatt color each) yellow)))) 
                     (top ((current player) vloc YELLOW))))
               
               
               ((and (== (size ((current player) vloc WHITE)) 0)
                
                    (> (size ((current player) iloc HAND where (all (== (cardatt color each) white))) ) 0))
                    
               (move (any ((current player) iloc HAND where (all (== (cardatt color each) white)))) 
                     (top ((current player) vloc WHITE))))
               
               
               ((and (== (size ((current player) vloc RED)) 0)
                
                    (> (size ((current player) iloc HAND where (all (== (cardatt color each) red))) ) 0))
                    
               (move (any ((current player) iloc HAND where (all (== (cardatt color each) red)))) 
                     (top ((current player) vloc RED))))
               
               ((and (== (size ((current player) vloc BLUE)) 0)
                
                    (> (size ((current player) iloc HAND where (all (== (cardatt color each) blue))) ) 0))
                    
               (move (any ((current player) iloc HAND where (all (== (cardatt color each) blue)))) 
                     (top ((current player) vloc BLUE))))
               
              
              ((and (> (size ((current player) vloc GREEN)) 0)
                
                    (> (size ((current player) iloc HAND where (all (== (cardatt color each) green)
                                                               (> (score each using PRECEDENCE)
                                                                  (score (top ((current player) vloc GREEN)) using PRECEDENCE)))) ) 0))
                    
                    
                    
               (move (any ((current player) iloc HAND where (all (== (cardatt color each) green)
                                                               (> (score each using PRECEDENCE)
                                                                  (score (top ((current player) vloc GREEN)) using PRECEDENCE))))) 
                     (top ((current player) vloc GREEN))))
              
              ((and (> (size ((current player) vloc YELLOW)) 0)
                    (> (size ((current player) iloc HAND where (all (== (cardatt color each) yellow)
                                                               (> (score each using PRECEDENCE)
                                                                  (score (top ((current player) vloc YELLOW)) using PRECEDENCE)))) ) 0))
                    
                    
               (move (any ((current player) iloc HAND where (all (== (cardatt color each) yellow)
                                                               (> (score each using PRECEDENCE)
                                                                  (score (top ((current player) vloc YELLOW)) using PRECEDENCE))))) 
                     (top ((current player) vloc YELLOW))))
              
              ((and (> (size ((current player) vloc WHITE)) 0)
                    (> (size ((current player) iloc HAND where (all (== (cardatt color each) white)
                                                               (> (score each using PRECEDENCE)
                                                                  (score (top ((current player) vloc WHITE)) using PRECEDENCE)))) ) 0))
                    
                    
               (move (any ((current player) iloc HAND where (all (== (cardatt color each) white)
                                                               (> (score each using PRECEDENCE)
                                                                  (score (top ((current player) vloc WHITE)) using PRECEDENCE))))) 
                     (top ((current player) vloc WHITE))))
              
              ((and (> (size ((current player) vloc RED)) 0)
                    (> (size ((current player) iloc HAND where (all (== (cardatt color each) red)
                                                               (> (score each using PRECEDENCE)
                                                                  (score (top ((current player) vloc RED)) using PRECEDENCE)))) ) 0))
                    
                    
               (move (any ((current player) iloc HAND where (all (== (cardatt color each) red)
                                                               (> (score each using PRECEDENCE)
                                                                  (score (top ((current player) vloc RED)) using PRECEDENCE))))) 
                     (top ((current player) vloc RED))))
              
              ((and (> (size ((current player) vloc BLUE)) 0) 
                    (> (size ((current player) iloc HAND where (all (== (cardatt color each) blue)
                                                               (> (score each using PRECEDENCE)
                                                                  (score (top ((current player) vloc BLUE)) using PRECEDENCE)))) ) 0))
                    
                    
               (move (any ((current player) iloc HAND where (all (== (cardatt color each) blue)
                                                               (> (score each using PRECEDENCE)
                                                                  (score (top ((current player) vloc BLUE)) using PRECEDENCE))))) 
                     (top ((current player) vloc BLUE))))
              
         )
             
             ;; Draw a card
         (choice 
         (()
         (move (top (game iloc STOCK))
               (top ((current player) iloc HAND))))
          ((and (> (size (game vloc GREEN)) 0)
                (!= (game sto GREEN) 1))
           (move (top (game vloc GREEN))
                 (top ((current player) iloc HAND))))
          ((and (> (size (game vloc YELLOW)) 0)
                (!= (game sto YELLOW) 1))
           (move (top (game vloc YELLOW))
                 (top ((current player) iloc HAND))))
          ((and (> (size (game vloc RED)) 0)
                (!= (game sto RED) 1))
           (move (top (game vloc RED))
                 (top ((current player) iloc HAND))))
          ((and (> (size (game vloc BLUE)) 0)
                (!= (game sto BLUE) 1))
           (move (top (game vloc BLUE))
                 (top ((current player) iloc HAND))))
          ((and (> (size (game vloc WHITE)) 0)
                (!= (game sto WHITE) 1))
           (move (top (game vloc WHITE))
                 (top ((current player) iloc HAND))))
          )
         (comp
          (()
           (set (game sto GREEN) 0)
           (set (game sto YELLOW) 0)
           (set (game sto RED) 0)
           (set (game sto BLUE) 0)
           (set (game sto WHITE) 0)
          )
          )
           
         ;; after players play hand, computer wraps up trick
         
       )
      (stage player ;;scoring
         (end (== ((all player) sto PROC) 1))
         (comp
          ((> (size ((current player) vloc GREEN)) 0)
         (inc ((current player) sto SCORE) (* (- (sum ((current player) vloc GREEN) using PRECEDENCE) 20) (+ (sum ((current player) vloc GREEN) using MULTIPLIER) 1)))
         )
         ((> (size ((current player) vloc YELLOW)) 0)
         (inc ((current player) sto SCORE) (* (- (sum ((current player) vloc YELLOW) using PRECEDENCE) 20) (+ (sum ((current player) vloc YELLOW) using MULTIPLIER) 1)))
         )
         ((> (size ((current player) vloc WHITE)) 0)
         (inc ((current player) sto SCORE) (* (- (sum ((current player) vloc WHITE) using PRECEDENCE) 20) (+ (sum ((current player) vloc WHITE) using MULTIPLIER) 1)))
         )
         ((> (size ((current player) vloc RED)) 0)
         (inc ((current player) sto SCORE) (* (- (sum ((current player) vloc RED) using PRECEDENCE) 20) (+ (sum ((current player) vloc RED) using MULTIPLIER) 1)))
         )
         ((> (size ((current player) vloc BLUE)) 0)
         (inc ((current player) sto SCORE) (* (- (sum ((current player) vloc BLUE) using PRECEDENCE) 20) (+ (sum ((current player) vloc BLUE) using MULTIPLIER) 1)))
         )
         (()
             (set ((current player) sto PROC) 1)
             (move (top ((current player) iloc HAND))
                  (top (game iloc STOCK)) all)
            (move (top ((current player) vloc GREEN))
                  (top (game iloc STOCK)) all)
              (move (top ((current player) vloc YELLOW))
                  (top (game iloc STOCK)) all)
                  (move (top ((current player) vloc WHITE))
                  (top (game iloc STOCK)) all)
                  (move (top ((current player) vloc RED))
                  (top (game iloc STOCK)) all)
                  (move (top ((current player) vloc BLUE))
                  (top (game iloc STOCK)) all)
         )
         )
          )
         (comp
            (()
            (move (top (game vloc GREEN))
                  (top (game iloc STOCK)) all)
              (move (top (game vloc YELLOW))
                  (top (game iloc STOCK)) all)
                  (move (top (game vloc WHITE))
                  (top (game iloc STOCK)) all)
                  (move (top (game vloc RED))
                  (top (game iloc STOCK)) all)
                  (move (top (game vloc BLUE))
                  (top (game iloc STOCK)) all)
            (inc (game sto ROUNDS) 1)
            (set ((all player) sto PROC) 0)
            )
         )
      )
      
       
   
   (scoring max ((current player) sto SCORE))
)
         
         
      
