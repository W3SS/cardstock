//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Recycle.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class RecycleParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, BOOLOP=63, COMPOP=64, EQOP=65, UNOP=66, 
		INTNUM=67, LETT=68, OPEN=69, CLOSE=70, WS=71, ANY=72;
	public const int
		RULE_var = 0, RULE_game = 1, RULE_setup = 2, RULE_stage = 3, RULE_scoring = 4, 
		RULE_endcondition = 5, RULE_action = 6, RULE_multiaction = 7, RULE_multiaction2 = 8, 
		RULE_condact = 9, RULE_agg = 10, RULE_let = 11, RULE_declare = 12, RULE_playercreate = 13, 
		RULE_teamcreate = 14, RULE_deckcreate = 15, RULE_deck = 16, RULE_teams = 17, 
		RULE_attribute = 18, RULE_initpoints = 19, RULE_awards = 20, RULE_subaward = 21, 
		RULE_cycleaction = 22, RULE_setaction = 23, RULE_incaction = 24, RULE_decaction = 25, 
		RULE_moveaction = 26, RULE_copyaction = 27, RULE_removeaction = 28, RULE_shuffleaction = 29, 
		RULE_turnaction = 30, RULE_repeat = 31, RULE_card = 32, RULE_actual = 33, 
		RULE_rawstorage = 34, RULE_cstorage = 35, RULE_memstorage = 36, RULE_memset = 37, 
		RULE_tuple = 38, RULE_locpre = 39, RULE_locdesc = 40, RULE_who = 41, RULE_whop = 42, 
		RULE_whot = 43, RULE_whodesc = 44, RULE_owner = 45, RULE_teamp = 46, RULE_other = 47, 
		RULE_typed = 48, RULE_collection = 49, RULE_strcollection = 50, RULE_cstoragecollection = 51, 
		RULE_range = 52, RULE_filter = 53, RULE_attrcomp = 54, RULE_cardatt = 55, 
		RULE_boolean = 56, RULE_intop = 57, RULE_add = 58, RULE_mult = 59, RULE_subtract = 60, 
		RULE_mod = 61, RULE_divide = 62, RULE_sizeof = 63, RULE_maxof = 64, RULE_minof = 65, 
		RULE_unionof = 66, RULE_sum = 67, RULE_score = 68, RULE_int = 69, RULE_namegr = 70;
	public static readonly string[] ruleNames = {
		"var", "game", "setup", "stage", "scoring", "endcondition", "action", 
		"multiaction", "multiaction2", "condact", "agg", "let", "declare", "playercreate", 
		"teamcreate", "deckcreate", "deck", "teams", "attribute", "initpoints", 
		"awards", "subaward", "cycleaction", "setaction", "incaction", "decaction", 
		"moveaction", "copyaction", "removeaction", "shuffleaction", "turnaction", 
		"repeat", "card", "actual", "rawstorage", "cstorage", "memstorage", "memset", 
		"tuple", "locpre", "locdesc", "who", "whop", "whot", "whodesc", "owner", 
		"teamp", "other", "typed", "collection", "strcollection", "cstoragecollection", 
		"range", "filter", "attrcomp", "cardatt", "boolean", "intop", "add", "mult", 
		"subtract", "mod", "divide", "sizeof", "maxof", "minof", "unionof", "sum", 
		"score", "int", "namegr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'''", "'game'", "'setup'", "'stage'", "'player'", "'team'", "'scoring'", 
		"'min'", "'max'", "'end'", "'choice'", "'do'", "'any'", "'all'", "'let'", 
		"'declare'", "'create'", "'players'", "'teams'", "'deck'", "','", "'put'", 
		"'points'", "'cycle'", "'next'", "'current'", "'previous'", "'set'", "'inc'", 
		"'dec'", "'move'", "'remember'", "'forget'", "'shuffle'", "'turn'", "'pass'", 
		"'repeat'", "'top'", "'bottom'", "'actual'", "'sto'", "'tuples'", "'using'", 
		"'vloc'", "'iloc'", "'hloc'", "'mem'", "'owner'", "'other'", "'range'", 
		"'..'", "'filter'", "'cardatt'", "'+'", "'*'", "'-'", "'%'", "'//'", "'size'", 
		"'union'", "'sum'", "'score'", null, null, null, "'not'", null, null, 
		"'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "BOOLOP", "COMPOP", "EQOP", "UNOP", "INTNUM", "LETT", 
		"OPEN", "CLOSE", "WS", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Recycle.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public RecycleParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class VarContext : ParserRuleContext {
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 0, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; Match(T__0);
			State = 143; namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GameContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public SetupContext setup() {
			return GetRuleContext<SetupContext>(0);
		}
		public ScoringContext scoring() {
			return GetRuleContext<ScoringContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DeclareContext[] declare() {
			return GetRuleContexts<DeclareContext>();
		}
		public DeclareContext declare(int i) {
			return GetRuleContext<DeclareContext>(i);
		}
		public MultiactionContext[] multiaction() {
			return GetRuleContexts<MultiactionContext>();
		}
		public MultiactionContext multiaction(int i) {
			return GetRuleContext<MultiactionContext>(i);
		}
		public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public GameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_game; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterGame(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitGame(this);
		}
	}

	[RuleVersion(0)]
	public GameContext game() {
		GameContext _localctx = new GameContext(Context, State);
		EnterRule(_localctx, 2, RULE_game);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 145; Match(OPEN);
			State = 146; Match(T__1);
			State = 150;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 147; declare();
					}
					} 
				}
				State = 152;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 153; setup();
			State = 156;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 156;
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						State = 154; multiaction();
						}
						break;
					case 2:
						{
						State = 155; stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 158;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 160; scoring();
			State = 161; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetupContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public PlayercreateContext playercreate() {
			return GetRuleContext<PlayercreateContext>(0);
		}
		public TeamcreateContext teamcreate() {
			return GetRuleContext<TeamcreateContext>(0);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public DeckcreateContext[] deckcreate() {
			return GetRuleContexts<DeckcreateContext>();
		}
		public DeckcreateContext deckcreate(int i) {
			return GetRuleContext<DeckcreateContext>(i);
		}
		public RepeatContext[] repeat() {
			return GetRuleContexts<RepeatContext>();
		}
		public RepeatContext repeat(int i) {
			return GetRuleContext<RepeatContext>(i);
		}
		public SetupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSetup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSetup(this);
		}
	}

	[RuleVersion(0)]
	public SetupContext setup() {
		SetupContext _localctx = new SetupContext(Context, State);
		EnterRule(_localctx, 4, RULE_setup);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 163; Match(OPEN);
			State = 164; Match(T__2);
			State = 165; playercreate();
			State = 166; Match(OPEN);
			State = 167; teamcreate();
			State = 168; Match(CLOSE);
			State = 176;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 169; Match(OPEN);
					State = 172;
					switch (TokenStream.La(1)) {
					case T__16:
						{
						State = 170; deckcreate();
						}
						break;
					case T__36:
						{
						State = 171; repeat();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 174; Match(CLOSE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 178;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 180; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public EndconditionContext endcondition() {
			return GetRuleContext<EndconditionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultiactionContext[] multiaction() {
			return GetRuleContexts<MultiactionContext>();
		}
		public MultiactionContext multiaction(int i) {
			return GetRuleContext<MultiactionContext>(i);
		}
		public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public StageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterStage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitStage(this);
		}
	}

	[RuleVersion(0)]
	public StageContext stage() {
		StageContext _localctx = new StageContext(Context, State);
		EnterRule(_localctx, 6, RULE_stage);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; Match(OPEN);
			State = 183; Match(T__3);
			State = 184;
			_la = TokenStream.La(1);
			if ( !(_la==T__4 || _la==T__5) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 185; endcondition();
			State = 188;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 188;
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						State = 186; multiaction();
						}
						break;
					case 2:
						{
						State = 187; stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 190;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 192; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoringContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ScoringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scoring; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterScoring(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitScoring(this);
		}
	}

	[RuleVersion(0)]
	public ScoringContext scoring() {
		ScoringContext _localctx = new ScoringContext(Context, State);
		EnterRule(_localctx, 8, RULE_scoring);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194; Match(OPEN);
			State = 195; Match(T__6);
			State = 196;
			_la = TokenStream.La(1);
			if ( !(_la==T__7 || _la==T__8) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 197; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndconditionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public EndconditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endcondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterEndcondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitEndcondition(this);
		}
	}

	[RuleVersion(0)]
	public EndconditionContext endcondition() {
		EndconditionContext _localctx = new EndconditionContext(Context, State);
		EnterRule(_localctx, 10, RULE_endcondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199; Match(OPEN);
			State = 200; Match(T__9);
			State = 201; boolean();
			State = 202; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public InitpointsContext initpoints() {
			return GetRuleContext<InitpointsContext>(0);
		}
		public TeamcreateContext teamcreate() {
			return GetRuleContext<TeamcreateContext>(0);
		}
		public DeckcreateContext deckcreate() {
			return GetRuleContext<DeckcreateContext>(0);
		}
		public CycleactionContext cycleaction() {
			return GetRuleContext<CycleactionContext>(0);
		}
		public SetactionContext setaction() {
			return GetRuleContext<SetactionContext>(0);
		}
		public MoveactionContext moveaction() {
			return GetRuleContext<MoveactionContext>(0);
		}
		public CopyactionContext copyaction() {
			return GetRuleContext<CopyactionContext>(0);
		}
		public IncactionContext incaction() {
			return GetRuleContext<IncactionContext>(0);
		}
		public DecactionContext decaction() {
			return GetRuleContext<DecactionContext>(0);
		}
		public RemoveactionContext removeaction() {
			return GetRuleContext<RemoveactionContext>(0);
		}
		public TurnactionContext turnaction() {
			return GetRuleContext<TurnactionContext>(0);
		}
		public ShuffleactionContext shuffleaction() {
			return GetRuleContext<ShuffleactionContext>(0);
		}
		public RepeatContext repeat() {
			return GetRuleContext<RepeatContext>(0);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 12, RULE_action);
		try {
			State = 223;
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 204; Match(OPEN);
				State = 218;
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 205; initpoints();
					}
					break;
				case 2:
					{
					State = 206; teamcreate();
					}
					break;
				case 3:
					{
					State = 207; deckcreate();
					}
					break;
				case 4:
					{
					State = 208; cycleaction();
					}
					break;
				case 5:
					{
					State = 209; setaction();
					}
					break;
				case 6:
					{
					State = 210; moveaction();
					}
					break;
				case 7:
					{
					State = 211; copyaction();
					}
					break;
				case 8:
					{
					State = 212; incaction();
					}
					break;
				case 9:
					{
					State = 213; decaction();
					}
					break;
				case 10:
					{
					State = 214; removeaction();
					}
					break;
				case 11:
					{
					State = 215; turnaction();
					}
					break;
				case 12:
					{
					State = 216; shuffleaction();
					}
					break;
				case 13:
					{
					State = 217; repeat();
					}
					break;
				}
				State = 220; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 222; agg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiactionContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public CondactContext[] condact() {
			return GetRuleContexts<CondactContext>();
		}
		public CondactContext condact(int i) {
			return GetRuleContext<CondactContext>(i);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public MultiactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMultiaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMultiaction(this);
		}
	}

	[RuleVersion(0)]
	public MultiactionContext multiaction() {
		MultiactionContext _localctx = new MultiactionContext(Context, State);
		EnterRule(_localctx, 14, RULE_multiaction);
		try {
			int _alt;
			State = 249;
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 225; Match(OPEN);
				State = 226; Match(T__10);
				State = 227; Match(OPEN);
				State = 229;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 228; condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 231;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 233; Match(CLOSE);
				State = 234; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 236; Match(OPEN);
				State = 237; Match(T__11);
				State = 238; Match(OPEN);
				State = 240;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 239; condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 242;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 244; Match(CLOSE);
				State = 245; Match(CLOSE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 247; agg();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 248; let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiaction2Context : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public CondactContext[] condact() {
			return GetRuleContexts<CondactContext>();
		}
		public CondactContext condact(int i) {
			return GetRuleContext<CondactContext>(i);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public Multiaction2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiaction2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMultiaction2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMultiaction2(this);
		}
	}

	[RuleVersion(0)]
	public Multiaction2Context multiaction2() {
		Multiaction2Context _localctx = new Multiaction2Context(Context, State);
		EnterRule(_localctx, 16, RULE_multiaction2);
		try {
			int _alt;
			State = 264;
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 251; Match(OPEN);
				State = 252; Match(T__11);
				State = 253; Match(OPEN);
				State = 255;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 254; condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 257;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 259; Match(CLOSE);
				State = 260; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 262; agg();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 263; let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondactContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public Multiaction2Context multiaction2() {
			return GetRuleContext<Multiaction2Context>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public CondactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condact; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCondact(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCondact(this);
		}
	}

	[RuleVersion(0)]
	public CondactContext condact() {
		CondactContext _localctx = new CondactContext(Context, State);
		EnterRule(_localctx, 18, RULE_condact);
		try {
			State = 278;
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 266; Match(OPEN);
				State = 267; boolean();
				State = 268; multiaction2();
				State = 269; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 271; multiaction2();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 272; Match(OPEN);
				State = 273; boolean();
				State = 274; action();
				State = 275; Match(CLOSE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 277; action();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public CondactContext condact() {
			return GetRuleContext<CondactContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public AggContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAgg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAgg(this);
		}
	}

	[RuleVersion(0)]
	public AggContext agg() {
		AggContext _localctx = new AggContext(Context, State);
		EnterRule(_localctx, 20, RULE_agg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280; Match(OPEN);
			State = 281;
			_la = TokenStream.La(1);
			if ( !(_la==T__12 || _la==T__13) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 282; collection();
			State = 283; var();
			State = 288;
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 284; condact();
				}
				break;
			case 2:
				{
				State = 285; boolean();
				}
				break;
			case 3:
				{
				State = 286; cstorage();
				}
				break;
			case 4:
				{
				State = 287; rawstorage();
				}
				break;
			}
			State = 290; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public TypedContext typed() {
			return GetRuleContext<TypedContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultiactionContext multiaction() {
			return GetRuleContext<MultiactionContext>(0);
		}
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public CondactContext condact() {
			return GetRuleContext<CondactContext>(0);
		}
		public LetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLet(this);
		}
	}

	[RuleVersion(0)]
	public LetContext let() {
		LetContext _localctx = new LetContext(Context, State);
		EnterRule(_localctx, 22, RULE_let);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292; Match(OPEN);
			State = 293; Match(T__14);
			State = 294; typed();
			State = 295; var();
			State = 299;
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 296; multiaction();
				}
				break;
			case 2:
				{
				State = 297; action();
				}
				break;
			case 3:
				{
				State = 298; condact();
				}
				break;
			}
			State = 301; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public TypedContext typed() {
			return GetRuleContext<TypedContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeclare(this);
		}
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(Context, State);
		EnterRule(_localctx, 24, RULE_declare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303; Match(OPEN);
			State = 304; Match(T__15);
			State = 305; typed();
			State = 306; var();
			State = 307; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayercreateContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public PlayercreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playercreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterPlayercreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitPlayercreate(this);
		}
	}

	[RuleVersion(0)]
	public PlayercreateContext playercreate() {
		PlayercreateContext _localctx = new PlayercreateContext(Context, State);
		EnterRule(_localctx, 26, RULE_playercreate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309; Match(OPEN);
			State = 310; Match(T__16);
			State = 311; Match(T__17);
			State = 314;
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 312; var();
				}
				break;
			case 2:
				{
				State = 313; @int();
				}
				break;
			}
			State = 316; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamcreateContext : ParserRuleContext {
		public TeamsContext[] teams() {
			return GetRuleContexts<TeamsContext>();
		}
		public TeamsContext teams(int i) {
			return GetRuleContext<TeamsContext>(i);
		}
		public TeamcreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamcreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeamcreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeamcreate(this);
		}
	}

	[RuleVersion(0)]
	public TeamcreateContext teamcreate() {
		TeamcreateContext _localctx = new TeamcreateContext(Context, State);
		EnterRule(_localctx, 28, RULE_teamcreate);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 318; Match(T__16);
			State = 319; Match(T__18);
			State = 321;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 320; teams();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 323;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckcreateContext : ParserRuleContext {
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public DeckContext deck() {
			return GetRuleContext<DeckContext>(0);
		}
		public DeckcreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deckcreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeckcreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeckcreate(this);
		}
	}

	[RuleVersion(0)]
	public DeckcreateContext deckcreate() {
		DeckcreateContext _localctx = new DeckcreateContext(Context, State);
		EnterRule(_localctx, 30, RULE_deckcreate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325; Match(T__16);
			State = 326; Match(T__19);
			State = 327; cstorage();
			State = 328; deck();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public DeckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deck; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeck(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeck(this);
		}
	}

	[RuleVersion(0)]
	public DeckContext deck() {
		DeckContext _localctx = new DeckContext(Context, State);
		EnterRule(_localctx, 32, RULE_deck);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 330; Match(OPEN);
			State = 331; Match(T__19);
			State = 333;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 332; attribute();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 335;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 337; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamsContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode[] INTNUM() { return GetTokens(RecycleParser.INTNUM); }
		public ITerminalNode INTNUM(int i) {
			return GetToken(RecycleParser.INTNUM, i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TeamsContext[] teams() {
			return GetRuleContexts<TeamsContext>();
		}
		public TeamsContext teams(int i) {
			return GetRuleContext<TeamsContext>(i);
		}
		public TeamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teams; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeams(this);
		}
	}

	[RuleVersion(0)]
	public TeamsContext teams() {
		TeamsContext _localctx = new TeamsContext(Context, State);
		EnterRule(_localctx, 34, RULE_teams);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 339; Match(OPEN);
			State = 344;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 340; Match(INTNUM);
					State = 341; Match(T__20);
					}
					} 
				}
				State = 346;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			State = 347; Match(INTNUM);
			State = 351;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 348; teams();
					}
					} 
				}
				State = 353;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			State = 354; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 36, RULE_attribute);
		try {
			int _alt;
			State = 375;
			switch (TokenStream.La(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 356; var();
				}
				break;
			case OPEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 357; Match(OPEN);
				State = 363;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 358; namegr();
						State = 359; Match(T__20);
						}
						} 
					}
					State = 365;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				}
				State = 366; namegr();
				State = 370;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 367; attribute();
						}
						} 
					}
					State = 372;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				}
				State = 373; Match(CLOSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitpointsContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AwardsContext[] awards() {
			return GetRuleContexts<AwardsContext>();
		}
		public AwardsContext awards(int i) {
			return GetRuleContext<AwardsContext>(i);
		}
		public InitpointsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initpoints; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterInitpoints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitInitpoints(this);
		}
	}

	[RuleVersion(0)]
	public InitpointsContext initpoints() {
		InitpointsContext _localctx = new InitpointsContext(Context, State);
		EnterRule(_localctx, 38, RULE_initpoints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 377; Match(T__21);
			State = 378; Match(T__22);
			State = 379; var();
			State = 380; Match(OPEN);
			State = 382;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 381; awards();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 384;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 386; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwardsContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubawardContext[] subaward() {
			return GetRuleContexts<SubawardContext>();
		}
		public SubawardContext subaward(int i) {
			return GetRuleContext<SubawardContext>(i);
		}
		public AwardsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awards; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAwards(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAwards(this);
		}
	}

	[RuleVersion(0)]
	public AwardsContext awards() {
		AwardsContext _localctx = new AwardsContext(Context, State);
		EnterRule(_localctx, 40, RULE_awards);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 388; Match(OPEN);
			State = 390;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 389; subaward();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 392;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 394; @int();
			State = 395; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubawardContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public CardattContext cardatt() {
			return GetRuleContext<CardattContext>(0);
		}
		public SubawardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subaward; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSubaward(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSubaward(this);
		}
	}

	[RuleVersion(0)]
	public SubawardContext subaward() {
		SubawardContext _localctx = new SubawardContext(Context, State);
		EnterRule(_localctx, 42, RULE_subaward);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397; Match(OPEN);
			State = 398; namegr();
			State = 404;
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				{
				State = 399; Match(OPEN);
				State = 400; namegr();
				State = 401; Match(CLOSE);
				}
				}
				break;
			case 2:
				{
				{
				State = 403; cardatt();
				}
				}
				break;
			}
			State = 406; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CycleactionContext : ParserRuleContext {
		public OwnerContext owner() {
			return GetRuleContext<OwnerContext>(0);
		}
		public CycleactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cycleaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCycleaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCycleaction(this);
		}
	}

	[RuleVersion(0)]
	public CycleactionContext cycleaction() {
		CycleactionContext _localctx = new CycleactionContext(Context, State);
		EnterRule(_localctx, 44, RULE_cycleaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408; Match(T__23);
			State = 409;
			_la = TokenStream.La(1);
			if ( !(_la==T__24 || _la==T__25) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 414;
			switch (TokenStream.La(1)) {
			case OPEN:
				{
				State = 410; owner();
				}
				break;
			case T__25:
				{
				State = 411; Match(T__25);
				}
				break;
			case T__24:
				{
				State = 412; Match(T__24);
				}
				break;
			case T__26:
				{
				State = 413; Match(T__26);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public SetactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSetaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSetaction(this);
		}
	}

	[RuleVersion(0)]
	public SetactionContext setaction() {
		SetactionContext _localctx = new SetactionContext(Context, State);
		EnterRule(_localctx, 46, RULE_setaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416; Match(T__27);
			State = 417; rawstorage();
			State = 418; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public IncactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterIncaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitIncaction(this);
		}
	}

	[RuleVersion(0)]
	public IncactionContext incaction() {
		IncactionContext _localctx = new IncactionContext(Context, State);
		EnterRule(_localctx, 48, RULE_incaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420; Match(T__28);
			State = 421; rawstorage();
			State = 422; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public DecactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDecaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDecaction(this);
		}
	}

	[RuleVersion(0)]
	public DecactionContext decaction() {
		DecactionContext _localctx = new DecactionContext(Context, State);
		EnterRule(_localctx, 50, RULE_decaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424; Match(T__29);
			State = 425; rawstorage();
			State = 426; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveactionContext : ParserRuleContext {
		public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public MoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMoveaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMoveaction(this);
		}
	}

	[RuleVersion(0)]
	public MoveactionContext moveaction() {
		MoveactionContext _localctx = new MoveactionContext(Context, State);
		EnterRule(_localctx, 52, RULE_moveaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428; Match(T__30);
			State = 429; card();
			State = 430; card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyactionContext : ParserRuleContext {
		public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public CopyactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCopyaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCopyaction(this);
		}
	}

	[RuleVersion(0)]
	public CopyactionContext copyaction() {
		CopyactionContext _localctx = new CopyactionContext(Context, State);
		EnterRule(_localctx, 54, RULE_copyaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432; Match(T__31);
			State = 433; card();
			State = 434; card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveactionContext : ParserRuleContext {
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public RemoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRemoveaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRemoveaction(this);
		}
	}

	[RuleVersion(0)]
	public RemoveactionContext removeaction() {
		RemoveactionContext _localctx = new RemoveactionContext(Context, State);
		EnterRule(_localctx, 56, RULE_removeaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436; Match(T__32);
			State = 437; card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShuffleactionContext : ParserRuleContext {
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public ShuffleactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shuffleaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterShuffleaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitShuffleaction(this);
		}
	}

	[RuleVersion(0)]
	public ShuffleactionContext shuffleaction() {
		ShuffleactionContext _localctx = new ShuffleactionContext(Context, State);
		EnterRule(_localctx, 58, RULE_shuffleaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439; Match(T__33);
			State = 440; cstorage();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TurnactionContext : ParserRuleContext {
		public TurnactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_turnaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTurnaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTurnaction(this);
		}
	}

	[RuleVersion(0)]
	public TurnactionContext turnaction() {
		TurnactionContext _localctx = new TurnactionContext(Context, State);
		EnterRule(_localctx, 60, RULE_turnaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442; Match(T__34);
			State = 443; Match(T__35);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatContext : ParserRuleContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public MoveactionContext moveaction() {
			return GetRuleContext<MoveactionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public RepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRepeat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRepeat(this);
		}
	}

	[RuleVersion(0)]
	public RepeatContext repeat() {
		RepeatContext _localctx = new RepeatContext(Context, State);
		EnterRule(_localctx, 62, RULE_repeat);
		try {
			State = 455;
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 445; Match(T__36);
				State = 446; @int();
				State = 447; action();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 449; Match(T__36);
				State = 450; Match(T__13);
				State = 451; Match(OPEN);
				State = 452; moveaction();
				State = 453; Match(CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public MaxofContext maxof() {
			return GetRuleContext<MaxofContext>(0);
		}
		public MinofContext minof() {
			return GetRuleContext<MinofContext>(0);
		}
		public ActualContext actual() {
			return GetRuleContext<ActualContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_card; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCard(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCard(this);
		}
	}

	[RuleVersion(0)]
	public CardContext card() {
		CardContext _localctx = new CardContext(Context, State);
		EnterRule(_localctx, 64, RULE_card);
		try {
			State = 470;
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 457; var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 458; maxof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 459; minof();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 460; actual();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				{
				State = 461; Match(OPEN);
				State = 465;
				switch (TokenStream.La(1)) {
				case T__37:
					{
					State = 462; Match(T__37);
					}
					break;
				case T__38:
					{
					State = 463; Match(T__38);
					}
					break;
				case T__0:
				case INTNUM:
				case OPEN:
					{
					State = 464; @int();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 467; cstorage();
				State = 468; Match(CLOSE);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ActualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actual; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterActual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitActual(this);
		}
	}

	[RuleVersion(0)]
	public ActualContext actual() {
		ActualContext _localctx = new ActualContext(Context, State);
		EnterRule(_localctx, 66, RULE_actual);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472; Match(OPEN);
			State = 473; Match(T__39);
			State = 474; card();
			State = 475; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RawstorageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public VarContext[] var() {
			return GetRuleContexts<VarContext>();
		}
		public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public RawstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rawstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRawstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRawstorage(this);
		}
	}

	[RuleVersion(0)]
	public RawstorageContext rawstorage() {
		RawstorageContext _localctx = new RawstorageContext(Context, State);
		EnterRule(_localctx, 68, RULE_rawstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477; Match(OPEN);
			State = 481;
			switch (TokenStream.La(1)) {
			case T__0:
				{
				State = 478; var();
				}
				break;
			case T__1:
				{
				State = 479; Match(T__1);
				}
				break;
			case OPEN:
				{
				State = 480; who();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 483; Match(T__40);
			State = 486;
			switch (TokenStream.La(1)) {
			case LETT:
				{
				State = 484; namegr();
				}
				break;
			case T__0:
				{
				State = 485; var();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 488; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CstorageContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public UnionofContext unionof() {
			return GetRuleContext<UnionofContext>(0);
		}
		public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public LocpreContext locpre() {
			return GetRuleContext<LocpreContext>(0);
		}
		public LocdescContext locdesc() {
			return GetRuleContext<LocdescContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public MemstorageContext memstorage() {
			return GetRuleContext<MemstorageContext>(0);
		}
		public CstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCstorage(this);
		}
	}

	[RuleVersion(0)]
	public CstorageContext cstorage() {
		CstorageContext _localctx = new CstorageContext(Context, State);
		EnterRule(_localctx, 70, RULE_cstorage);
		try {
			State = 503;
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 490; var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 491; unionof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 492; filter();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 493; Match(OPEN);
				State = 494; locpre();
				State = 495; locdesc();
				State = 498;
				switch (TokenStream.La(1)) {
				case LETT:
					{
					State = 496; namegr();
					}
					break;
				case T__0:
					{
					State = 497; var();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 500; Match(CLOSE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 502; memstorage();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemstorageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public MemstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMemstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMemstorage(this);
		}
	}

	[RuleVersion(0)]
	public MemstorageContext memstorage() {
		MemstorageContext _localctx = new MemstorageContext(Context, State);
		EnterRule(_localctx, 72, RULE_memstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505; Match(OPEN);
			State = 509;
			switch (TokenStream.La(1)) {
			case T__37:
				{
				State = 506; Match(T__37);
				}
				break;
			case T__38:
				{
				State = 507; Match(T__38);
				}
				break;
			case T__0:
			case INTNUM:
			case OPEN:
				{
				State = 508; @int();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 511; memset();
			State = 512; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemsetContext : ParserRuleContext {
		public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		public MemsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memset; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMemset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMemset(this);
		}
	}

	[RuleVersion(0)]
	public MemsetContext memset() {
		MemsetContext _localctx = new MemsetContext(Context, State);
		EnterRule(_localctx, 74, RULE_memset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514; tuple();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 76, RULE_tuple);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516; Match(OPEN);
			State = 517; Match(T__41);
			State = 518; @int();
			State = 519; cstorage();
			State = 520; Match(T__42);
			State = 521; var();
			State = 522; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocpreContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public LocpreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locpre; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLocpre(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLocpre(this);
		}
	}

	[RuleVersion(0)]
	public LocpreContext locpre() {
		LocpreContext _localctx = new LocpreContext(Context, State);
		EnterRule(_localctx, 78, RULE_locpre);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527;
			switch (TokenStream.La(1)) {
			case T__0:
				{
				State = 524; var();
				}
				break;
			case T__1:
				{
				State = 525; Match(T__1);
				}
				break;
			case OPEN:
				{
				State = 526; whop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocdescContext : ParserRuleContext {
		public LocdescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locdesc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLocdesc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLocdesc(this);
		}
	}

	[RuleVersion(0)]
	public LocdescContext locdesc() {
		LocdescContext _localctx = new LocdescContext(Context, State);
		EnterRule(_localctx, 80, RULE_locdesc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 529;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhoContext : ParserRuleContext {
		public WhotContext whot() {
			return GetRuleContext<WhotContext>(0);
		}
		public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public WhoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_who; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWho(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWho(this);
		}
	}

	[RuleVersion(0)]
	public WhoContext who() {
		WhoContext _localctx = new WhoContext(Context, State);
		EnterRule(_localctx, 82, RULE_who);
		try {
			State = 533;
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 531; whot();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 532; whop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhopContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public WhodescContext whodesc() {
			return GetRuleContext<WhodescContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OwnerContext owner() {
			return GetRuleContext<OwnerContext>(0);
		}
		public WhopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhop(this);
		}
	}

	[RuleVersion(0)]
	public WhopContext whop() {
		WhopContext _localctx = new WhopContext(Context, State);
		EnterRule(_localctx, 84, RULE_whop);
		try {
			State = 541;
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 535; Match(OPEN);
				State = 536; whodesc();
				State = 537; Match(T__4);
				State = 538; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 540; owner();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhotContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public WhodescContext whodesc() {
			return GetRuleContext<WhodescContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TeampContext teamp() {
			return GetRuleContext<TeampContext>(0);
		}
		public WhotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whot; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhot(this);
		}
	}

	[RuleVersion(0)]
	public WhotContext whot() {
		WhotContext _localctx = new WhotContext(Context, State);
		EnterRule(_localctx, 86, RULE_whot);
		try {
			State = 549;
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 543; Match(OPEN);
				State = 544; whodesc();
				State = 545; Match(T__5);
				State = 546; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 548; teamp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhodescContext : ParserRuleContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public WhodescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whodesc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhodesc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhodesc(this);
		}
	}

	[RuleVersion(0)]
	public WhodescContext whodesc() {
		WhodescContext _localctx = new WhodescContext(Context, State);
		EnterRule(_localctx, 88, RULE_whodesc);
		try {
			State = 555;
			switch (TokenStream.La(1)) {
			case T__0:
			case INTNUM:
			case OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 551; @int();
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 2);
				{
				State = 552; Match(T__26);
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 3);
				{
				State = 553; Match(T__24);
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 4);
				{
				State = 554; Match(T__25);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OwnerContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OwnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_owner; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterOwner(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitOwner(this);
		}
	}

	[RuleVersion(0)]
	public OwnerContext owner() {
		OwnerContext _localctx = new OwnerContext(Context, State);
		EnterRule(_localctx, 90, RULE_owner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557; Match(OPEN);
			State = 558; Match(T__47);
			State = 559; card();
			State = 560; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeampContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TeampContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeamp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeamp(this);
		}
	}

	[RuleVersion(0)]
	public TeampContext teamp() {
		TeampContext _localctx = new TeampContext(Context, State);
		EnterRule(_localctx, 92, RULE_teamp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562; Match(OPEN);
			State = 563; Match(T__5);
			State = 564; whop();
			State = 565; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OtherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterOther(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitOther(this);
		}
	}

	[RuleVersion(0)]
	public OtherContext other() {
		OtherContext _localctx = new OtherContext(Context, State);
		EnterRule(_localctx, 94, RULE_other);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 567; Match(OPEN);
			State = 568; Match(T__48);
			State = 569;
			_la = TokenStream.La(1);
			if ( !(_la==T__4 || _la==T__5) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 570; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public TypedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTyped(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTyped(this);
		}
	}

	[RuleVersion(0)]
	public TypedContext typed() {
		TypedContext _localctx = new TypedContext(Context, State);
		EnterRule(_localctx, 96, RULE_typed);
		try {
			State = 577;
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 572; var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 573; @int();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 574; boolean();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 575; namegr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 576; collection();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public StrcollectionContext strcollection() {
			return GetRuleContext<StrcollectionContext>(0);
		}
		public CstoragecollectionContext cstoragecollection() {
			return GetRuleContext<CstoragecollectionContext>(0);
		}
		public WhotContext whot() {
			return GetRuleContext<WhotContext>(0);
		}
		public OtherContext other() {
			return GetRuleContext<OtherContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		public CollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCollection(this);
		}
	}

	[RuleVersion(0)]
	public CollectionContext collection() {
		CollectionContext _localctx = new CollectionContext(Context, State);
		EnterRule(_localctx, 98, RULE_collection);
		try {
			State = 589;
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 579; var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 580; cstorage();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 581; strcollection();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 582; cstoragecollection();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 583; Match(T__4);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 584; Match(T__5);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 585; whot();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 586; other();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 587; range();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 588; filter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrcollectionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public StrcollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strcollection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterStrcollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitStrcollection(this);
		}
	}

	[RuleVersion(0)]
	public StrcollectionContext strcollection() {
		StrcollectionContext _localctx = new StrcollectionContext(Context, State);
		EnterRule(_localctx, 100, RULE_strcollection);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 591; Match(OPEN);
			State = 597;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 592; namegr();
					State = 593; Match(T__20);
					}
					} 
				}
				State = 599;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			}
			State = 600; namegr();
			State = 601; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CstoragecollectionContext : ParserRuleContext {
		public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public CstoragecollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cstoragecollection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCstoragecollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCstoragecollection(this);
		}
	}

	[RuleVersion(0)]
	public CstoragecollectionContext cstoragecollection() {
		CstoragecollectionContext _localctx = new CstoragecollectionContext(Context, State);
		EnterRule(_localctx, 102, RULE_cstoragecollection);
		try {
			State = 606;
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 603; memset();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 604; agg();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 605; let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 104, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 608; Match(OPEN);
			State = 609; Match(T__49);
			State = 610; @int();
			State = 611; Match(T__50);
			State = 612; @int();
			State = 613; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterFilter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitFilter(this);
		}
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(Context, State);
		EnterRule(_localctx, 106, RULE_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 615; Match(OPEN);
			State = 616; Match(T__51);
			State = 617; collection();
			State = 618; var();
			State = 619; boolean();
			State = 620; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrcompContext : ParserRuleContext {
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public CardattContext[] cardatt() {
			return GetRuleContexts<CardattContext>();
		}
		public CardattContext cardatt(int i) {
			return GetRuleContext<CardattContext>(i);
		}
		public AttrcompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrcomp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAttrcomp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAttrcomp(this);
		}
	}

	[RuleVersion(0)]
	public AttrcompContext attrcomp() {
		AttrcompContext _localctx = new AttrcompContext(Context, State);
		EnterRule(_localctx, 108, RULE_attrcomp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 622; Match(EQOP);
			State = 623; cardatt();
			State = 624; cardatt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardattContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public CardattContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cardatt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCardatt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCardatt(this);
		}
	}

	[RuleVersion(0)]
	public CardattContext cardatt() {
		CardattContext _localctx = new CardattContext(Context, State);
		EnterRule(_localctx, 110, RULE_cardatt);
		try {
			State = 637;
			switch (TokenStream.La(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 626; var();
				}
				break;
			case LETT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 627; namegr();
				}
				break;
			case OPEN:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 628; Match(OPEN);
				State = 629; Match(T__52);
				State = 632;
				switch (TokenStream.La(1)) {
				case T__0:
					{
					State = 630; var();
					}
					break;
				case LETT:
					{
					State = 631; namegr();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 634; card();
				State = 635; Match(CLOSE);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AttrcompContext attrcomp() {
			return GetRuleContext<AttrcompContext>(0);
		}
		public ITerminalNode BOOLOP() { return GetToken(RecycleParser.BOOLOP, 0); }
		public BooleanContext[] boolean() {
			return GetRuleContexts<BooleanContext>();
		}
		public BooleanContext boolean(int i) {
			return GetRuleContext<BooleanContext>(i);
		}
		public IntopContext intop() {
			return GetRuleContext<IntopContext>(0);
		}
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public ITerminalNode UNOP() { return GetToken(RecycleParser.UNOP, 0); }
		public WhopContext[] whop() {
			return GetRuleContexts<WhopContext>();
		}
		public WhopContext whop(int i) {
			return GetRuleContext<WhopContext>(i);
		}
		public WhotContext[] whot() {
			return GetRuleContexts<WhotContext>();
		}
		public WhotContext whot(int i) {
			return GetRuleContext<WhotContext>(i);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 112, RULE_boolean);
		try {
			int _alt;
			State = 671;
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 639; Match(OPEN);
				State = 666;
				switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
				case 1:
					{
					{
					State = 640; Match(BOOLOP);
					State = 641; boolean();
					State = 643;
					ErrorHandler.Sync(this);
					_alt = 1+1;
					do {
						switch (_alt) {
						case 1+1:
							{
							{
							State = 642; boolean();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 645;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
					} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					}
					break;
				case 2:
					{
					{
					State = 647; intop();
					State = 648; @int();
					State = 649; @int();
					}
					}
					break;
				case 3:
					{
					State = 651; attrcomp();
					}
					break;
				case 4:
					{
					{
					State = 652; Match(EQOP);
					State = 653; card();
					State = 654; card();
					}
					}
					break;
				case 5:
					{
					{
					State = 656; Match(UNOP);
					State = 657; boolean();
					}
					}
					break;
				case 6:
					{
					{
					State = 658; Match(EQOP);
					State = 659; whop();
					State = 660; whop();
					}
					}
					break;
				case 7:
					{
					{
					State = 662; Match(EQOP);
					State = 663; whot();
					State = 664; whot();
					}
					}
					break;
				}
				State = 668; Match(CLOSE);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 670; agg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntopContext : ParserRuleContext {
		public ITerminalNode COMPOP() { return GetToken(RecycleParser.COMPOP, 0); }
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public IntopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterIntop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitIntop(this);
		}
	}

	[RuleVersion(0)]
	public IntopContext intop() {
		IntopContext _localctx = new IntopContext(Context, State);
		EnterRule(_localctx, 114, RULE_intop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 673;
			_la = TokenStream.La(1);
			if ( !(_la==COMPOP || _la==EQOP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
	}

	[RuleVersion(0)]
	public AddContext add() {
		AddContext _localctx = new AddContext(Context, State);
		EnterRule(_localctx, 116, RULE_add);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 675; Match(OPEN);
			State = 676; Match(T__53);
			State = 677; @int();
			State = 678; @int();
			State = 679; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMult(this);
		}
	}

	[RuleVersion(0)]
	public MultContext mult() {
		MultContext _localctx = new MultContext(Context, State);
		EnterRule(_localctx, 118, RULE_mult);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681; Match(OPEN);
			State = 682; Match(T__54);
			State = 683; @int();
			State = 684; @int();
			State = 685; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtractContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubtractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtract; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSubtract(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSubtract(this);
		}
	}

	[RuleVersion(0)]
	public SubtractContext subtract() {
		SubtractContext _localctx = new SubtractContext(Context, State);
		EnterRule(_localctx, 120, RULE_subtract);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 687; Match(OPEN);
			State = 688; Match(T__55);
			State = 689; @int();
			State = 690; @int();
			State = 691; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMod(this);
		}
	}

	[RuleVersion(0)]
	public ModContext mod() {
		ModContext _localctx = new ModContext(Context, State);
		EnterRule(_localctx, 122, RULE_mod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 693; Match(OPEN);
			State = 694; Match(T__56);
			State = 695; @int();
			State = 696; @int();
			State = 697; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivideContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divide; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDivide(this);
		}
	}

	[RuleVersion(0)]
	public DivideContext divide() {
		DivideContext _localctx = new DivideContext(Context, State);
		EnterRule(_localctx, 124, RULE_divide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 699; Match(OPEN);
			State = 700; Match(T__57);
			State = 701; @int();
			State = 702; @int();
			State = 703; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		public SizeofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSizeof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSizeof(this);
		}
	}

	[RuleVersion(0)]
	public SizeofContext @sizeof() {
		SizeofContext _localctx = new SizeofContext(Context, State);
		EnterRule(_localctx, 126, RULE_sizeof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 705; Match(OPEN);
			State = 706; Match(T__58);
			State = 710;
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 707; var();
				}
				break;
			case 2:
				{
				State = 708; cstorage();
				}
				break;
			case 3:
				{
				State = 709; memset();
				}
				break;
			}
			State = 712; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaxofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MaxofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMaxof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMaxof(this);
		}
	}

	[RuleVersion(0)]
	public MaxofContext maxof() {
		MaxofContext _localctx = new MaxofContext(Context, State);
		EnterRule(_localctx, 128, RULE_maxof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 714; Match(OPEN);
			State = 715; Match(T__8);
			State = 716; cstorage();
			State = 717; Match(T__42);
			State = 718; var();
			State = 719; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MinofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMinof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMinof(this);
		}
	}

	[RuleVersion(0)]
	public MinofContext minof() {
		MinofContext _localctx = new MinofContext(Context, State);
		EnterRule(_localctx, 130, RULE_minof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 721; Match(OPEN);
			State = 722; Match(T__7);
			State = 723; cstorage();
			State = 724; Match(T__42);
			State = 725; var();
			State = 726; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public CstorageContext[] cstorage() {
			return GetRuleContexts<CstorageContext>();
		}
		public CstorageContext cstorage(int i) {
			return GetRuleContext<CstorageContext>(i);
		}
		public UnionofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterUnionof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitUnionof(this);
		}
	}

	[RuleVersion(0)]
	public UnionofContext unionof() {
		UnionofContext _localctx = new UnionofContext(Context, State);
		EnterRule(_localctx, 132, RULE_unionof);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 728; Match(OPEN);
			State = 729; Match(T__59);
			State = 736;
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 730; agg();
				}
				break;
			case 2:
				{
				State = 732;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 731; cstorage();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 734;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 738; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSum(this);
		}
	}

	[RuleVersion(0)]
	public SumContext sum() {
		SumContext _localctx = new SumContext(Context, State);
		EnterRule(_localctx, 134, RULE_sum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 740; Match(OPEN);
			State = 741; Match(T__60);
			State = 742; cstorage();
			State = 743; Match(T__42);
			State = 744; var();
			State = 745; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoreContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ScoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_score; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterScore(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitScore(this);
		}
	}

	[RuleVersion(0)]
	public ScoreContext score() {
		ScoreContext _localctx = new ScoreContext(Context, State);
		EnterRule(_localctx, 136, RULE_score);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 747; Match(OPEN);
			State = 748; Match(T__61);
			State = 749; card();
			State = 750; Match(T__42);
			State = 751; var();
			State = 752; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public SizeofContext @sizeof() {
			return GetRuleContext<SizeofContext>(0);
		}
		public MultContext mult() {
			return GetRuleContext<MultContext>(0);
		}
		public SubtractContext subtract() {
			return GetRuleContext<SubtractContext>(0);
		}
		public ModContext mod() {
			return GetRuleContext<ModContext>(0);
		}
		public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public ScoreContext score() {
			return GetRuleContext<ScoreContext>(0);
		}
		public ITerminalNode[] INTNUM() { return GetTokens(RecycleParser.INTNUM); }
		public ITerminalNode INTNUM(int i) {
			return GetToken(RecycleParser.INTNUM, i);
		}
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 138, RULE_int);
		try {
			int _alt;
			State = 769;
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 754; var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 755; @sizeof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 756; mult();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 757; subtract();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 758; mod();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 759; add();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 760; divide();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 761; sum();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 762; rawstorage();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 763; score();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 765;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 764; Match(INTNUM);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 767;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamegrContext : ParserRuleContext {
		public ITerminalNode[] LETT() { return GetTokens(RecycleParser.LETT); }
		public ITerminalNode LETT(int i) {
			return GetToken(RecycleParser.LETT, i);
		}
		public NamegrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namegr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterNamegr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitNamegr(this);
		}
	}

	[RuleVersion(0)]
	public NamegrContext namegr() {
		NamegrContext _localctx = new NamegrContext(Context, State);
		EnterRule(_localctx, 140, RULE_namegr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 772;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 771; Match(LETT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 774;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3J\x30B\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\a\x3\x97"+
		"\n\x3\f\x3\xE\x3\x9A\v\x3\x3\x3\x3\x3\x3\x3\x6\x3\x9F\n\x3\r\x3\xE\x3"+
		"\xA0\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x5\x4\xAF\n\x4\x3\x4\x3\x4\x6\x4\xB3\n\x4\r\x4\xE\x4\xB4\x3\x4"+
		"\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x6\x5\xBF\n\x5\r\x5\xE\x5\xC0"+
		"\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5"+
		"\b\xDD\n\b\x3\b\x3\b\x3\b\x5\b\xE2\n\b\x3\t\x3\t\x3\t\x3\t\x6\t\xE8\n"+
		"\t\r\t\xE\t\xE9\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x6\t\xF3\n\t\r\t\xE"+
		"\t\xF4\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\xFC\n\t\x3\n\x3\n\x3\n\x3\n\x6\n"+
		"\x102\n\n\r\n\xE\n\x103\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x10B\n\n\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\x119\n\v\x3"+
		"\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\x123\n\f\x3\f\x3\f\x3\r\x3"+
		"\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\x12E\n\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x13D\n\xF\x3\xF"+
		"\x3\xF\x3\x10\x3\x10\x3\x10\x6\x10\x144\n\x10\r\x10\xE\x10\x145\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x6\x12\x150\n\x12\r"+
		"\x12\xE\x12\x151\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\a\x13\x159\n\x13\f"+
		"\x13\xE\x13\x15C\v\x13\x3\x13\x3\x13\a\x13\x160\n\x13\f\x13\xE\x13\x163"+
		"\v\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\a\x14\x16C\n\x14"+
		"\f\x14\xE\x14\x16F\v\x14\x3\x14\x3\x14\a\x14\x173\n\x14\f\x14\xE\x14\x176"+
		"\v\x14\x3\x14\x3\x14\x5\x14\x17A\n\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x6\x15\x181\n\x15\r\x15\xE\x15\x182\x3\x15\x3\x15\x3\x16\x3\x16\x6"+
		"\x16\x189\n\x16\r\x16\xE\x16\x18A\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3"+
		"\x17\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x197\n\x17\x3\x17\x3\x17\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x1A1\n\x18\x3\x19\x3\x19\x3"+
		"\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!"+
		"\x3!\x3!\x5!\x1CA\n!\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x5\"\x1D4"+
		"\n\"\x3\"\x3\"\x3\"\x5\"\x1D9\n\"\x3#\x3#\x3#\x3#\x3#\x3$\x3$\x3$\x3$"+
		"\x5$\x1E4\n$\x3$\x3$\x3$\x5$\x1E9\n$\x3$\x3$\x3%\x3%\x3%\x3%\x3%\x3%\x3"+
		"%\x3%\x5%\x1F5\n%\x3%\x3%\x3%\x5%\x1FA\n%\x3&\x3&\x3&\x3&\x5&\x200\n&"+
		"\x3&\x3&\x3&\x3\'\x3\'\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3)\x3)\x3)\x5"+
		")\x212\n)\x3*\x3*\x3+\x3+\x5+\x218\n+\x3,\x3,\x3,\x3,\x3,\x3,\x5,\x220"+
		"\n,\x3-\x3-\x3-\x3-\x3-\x3-\x5-\x228\n-\x3.\x3.\x3.\x3.\x5.\x22E\n.\x3"+
		"/\x3/\x3/\x3/\x3/\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x31\x3\x31\x3"+
		"\x31\x3\x31\x3\x31\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32\x244\n\x32"+
		"\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33"+
		"\x5\x33\x250\n\x33\x3\x34\x3\x34\x3\x34\x3\x34\a\x34\x256\n\x34\f\x34"+
		"\xE\x34\x259\v\x34\x3\x34\x3\x34\x3\x34\x3\x35\x3\x35\x3\x35\x5\x35\x261"+
		"\n\x35\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x37\x3\x37"+
		"\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x38\x3\x38\x3\x38\x3\x38\x3\x39"+
		"\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x5\x39\x27B\n\x39\x3\x39\x3\x39\x3"+
		"\x39\x5\x39\x280\n\x39\x3:\x3:\x3:\x3:\x6:\x286\n:\r:\xE:\x287\x3:\x3"+
		":\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:"+
		"\x5:\x29D\n:\x3:\x3:\x3:\x5:\x2A2\n:\x3;\x3;\x3<\x3<\x3<\x3<\x3<\x3<\x3"+
		"=\x3=\x3=\x3=\x3=\x3=\x3>\x3>\x3>\x3>\x3>\x3>\x3?\x3?\x3?\x3?\x3?\x3?"+
		"\x3@\x3@\x3@\x3@\x3@\x3@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x2C9"+
		"\n\x41\x3\x41\x3\x41\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42"+
		"\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x44\x3\x44\x3\x44"+
		"\x3\x44\x6\x44\x2DF\n\x44\r\x44\xE\x44\x2E0\x5\x44\x2E3\n\x44\x3\x44\x3"+
		"\x44\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x46\x3\x46\x3"+
		"\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3"+
		"G\x3G\x6G\x300\nG\rG\xEG\x301\x5G\x304\nG\x3H\x6H\x307\nH\rH\xEH\x308"+
		"\x3H\x14\x98\xA0\xB4\xC0\xE9\xF4\x103\x145\x151\x15A\x161\x16D\x174\x182"+
		"\x18A\x257\x287\x2E0\x2I\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C"+
		"\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`\x62\x64"+
		"\x66hjlnprtvxz|~\x80\x82\x84\x86\x88\x8A\x8C\x8E\x2\b\x3\x2\a\b\x3\x2"+
		"\n\v\x3\x2\xF\x10\x3\x2\x1B\x1C\x3\x2.\x31\x3\x2\x42\x43\x339\x2\x90\x3"+
		"\x2\x2\x2\x4\x93\x3\x2\x2\x2\x6\xA5\x3\x2\x2\x2\b\xB8\x3\x2\x2\x2\n\xC4"+
		"\x3\x2\x2\x2\f\xC9\x3\x2\x2\x2\xE\xE1\x3\x2\x2\x2\x10\xFB\x3\x2\x2\x2"+
		"\x12\x10A\x3\x2\x2\x2\x14\x118\x3\x2\x2\x2\x16\x11A\x3\x2\x2\x2\x18\x126"+
		"\x3\x2\x2\x2\x1A\x131\x3\x2\x2\x2\x1C\x137\x3\x2\x2\x2\x1E\x140\x3\x2"+
		"\x2\x2 \x147\x3\x2\x2\x2\"\x14C\x3\x2\x2\x2$\x155\x3\x2\x2\x2&\x179\x3"+
		"\x2\x2\x2(\x17B\x3\x2\x2\x2*\x186\x3\x2\x2\x2,\x18F\x3\x2\x2\x2.\x19A"+
		"\x3\x2\x2\x2\x30\x1A2\x3\x2\x2\x2\x32\x1A6\x3\x2\x2\x2\x34\x1AA\x3\x2"+
		"\x2\x2\x36\x1AE\x3\x2\x2\x2\x38\x1B2\x3\x2\x2\x2:\x1B6\x3\x2\x2\x2<\x1B9"+
		"\x3\x2\x2\x2>\x1BC\x3\x2\x2\x2@\x1C9\x3\x2\x2\x2\x42\x1D8\x3\x2\x2\x2"+
		"\x44\x1DA\x3\x2\x2\x2\x46\x1DF\x3\x2\x2\x2H\x1F9\x3\x2\x2\x2J\x1FB\x3"+
		"\x2\x2\x2L\x204\x3\x2\x2\x2N\x206\x3\x2\x2\x2P\x211\x3\x2\x2\x2R\x213"+
		"\x3\x2\x2\x2T\x217\x3\x2\x2\x2V\x21F\x3\x2\x2\x2X\x227\x3\x2\x2\x2Z\x22D"+
		"\x3\x2\x2\x2\\\x22F\x3\x2\x2\x2^\x234\x3\x2\x2\x2`\x239\x3\x2\x2\x2\x62"+
		"\x243\x3\x2\x2\x2\x64\x24F\x3\x2\x2\x2\x66\x251\x3\x2\x2\x2h\x260\x3\x2"+
		"\x2\x2j\x262\x3\x2\x2\x2l\x269\x3\x2\x2\x2n\x270\x3\x2\x2\x2p\x27F\x3"+
		"\x2\x2\x2r\x2A1\x3\x2\x2\x2t\x2A3\x3\x2\x2\x2v\x2A5\x3\x2\x2\x2x\x2AB"+
		"\x3\x2\x2\x2z\x2B1\x3\x2\x2\x2|\x2B7\x3\x2\x2\x2~\x2BD\x3\x2\x2\x2\x80"+
		"\x2C3\x3\x2\x2\x2\x82\x2CC\x3\x2\x2\x2\x84\x2D3\x3\x2\x2\x2\x86\x2DA\x3"+
		"\x2\x2\x2\x88\x2E6\x3\x2\x2\x2\x8A\x2ED\x3\x2\x2\x2\x8C\x303\x3\x2\x2"+
		"\x2\x8E\x306\x3\x2\x2\x2\x90\x91\a\x3\x2\x2\x91\x92\x5\x8EH\x2\x92\x3"+
		"\x3\x2\x2\x2\x93\x94\aG\x2\x2\x94\x98\a\x4\x2\x2\x95\x97\x5\x1A\xE\x2"+
		"\x96\x95\x3\x2\x2\x2\x97\x9A\x3\x2\x2\x2\x98\x99\x3\x2\x2\x2\x98\x96\x3"+
		"\x2\x2\x2\x99\x9B\x3\x2\x2\x2\x9A\x98\x3\x2\x2\x2\x9B\x9E\x5\x6\x4\x2"+
		"\x9C\x9F\x5\x10\t\x2\x9D\x9F\x5\b\x5\x2\x9E\x9C\x3\x2\x2\x2\x9E\x9D\x3"+
		"\x2\x2\x2\x9F\xA0\x3\x2\x2\x2\xA0\xA1\x3\x2\x2\x2\xA0\x9E\x3\x2\x2\x2"+
		"\xA1\xA2\x3\x2\x2\x2\xA2\xA3\x5\n\x6\x2\xA3\xA4\aH\x2\x2\xA4\x5\x3\x2"+
		"\x2\x2\xA5\xA6\aG\x2\x2\xA6\xA7\a\x5\x2\x2\xA7\xA8\x5\x1C\xF\x2\xA8\xA9"+
		"\aG\x2\x2\xA9\xAA\x5\x1E\x10\x2\xAA\xB2\aH\x2\x2\xAB\xAE\aG\x2\x2\xAC"+
		"\xAF\x5 \x11\x2\xAD\xAF\x5@!\x2\xAE\xAC\x3\x2\x2\x2\xAE\xAD\x3\x2\x2\x2"+
		"\xAF\xB0\x3\x2\x2\x2\xB0\xB1\aH\x2\x2\xB1\xB3\x3\x2\x2\x2\xB2\xAB\x3\x2"+
		"\x2\x2\xB3\xB4\x3\x2\x2\x2\xB4\xB5\x3\x2\x2\x2\xB4\xB2\x3\x2\x2\x2\xB5"+
		"\xB6\x3\x2\x2\x2\xB6\xB7\aH\x2\x2\xB7\a\x3\x2\x2\x2\xB8\xB9\aG\x2\x2\xB9"+
		"\xBA\a\x6\x2\x2\xBA\xBB\t\x2\x2\x2\xBB\xBE\x5\f\a\x2\xBC\xBF\x5\x10\t"+
		"\x2\xBD\xBF\x5\b\x5\x2\xBE\xBC\x3\x2\x2\x2\xBE\xBD\x3\x2\x2\x2\xBF\xC0"+
		"\x3\x2\x2\x2\xC0\xC1\x3\x2\x2\x2\xC0\xBE\x3\x2\x2\x2\xC1\xC2\x3\x2\x2"+
		"\x2\xC2\xC3\aH\x2\x2\xC3\t\x3\x2\x2\x2\xC4\xC5\aG\x2\x2\xC5\xC6\a\t\x2"+
		"\x2\xC6\xC7\t\x3\x2\x2\xC7\xC8\x5\x8CG\x2\xC8\v\x3\x2\x2\x2\xC9\xCA\a"+
		"G\x2\x2\xCA\xCB\a\f\x2\x2\xCB\xCC\x5r:\x2\xCC\xCD\aH\x2\x2\xCD\r\x3\x2"+
		"\x2\x2\xCE\xDC\aG\x2\x2\xCF\xDD\x5(\x15\x2\xD0\xDD\x5\x1E\x10\x2\xD1\xDD"+
		"\x5 \x11\x2\xD2\xDD\x5.\x18\x2\xD3\xDD\x5\x30\x19\x2\xD4\xDD\x5\x36\x1C"+
		"\x2\xD5\xDD\x5\x38\x1D\x2\xD6\xDD\x5\x32\x1A\x2\xD7\xDD\x5\x34\x1B\x2"+
		"\xD8\xDD\x5:\x1E\x2\xD9\xDD\x5> \x2\xDA\xDD\x5<\x1F\x2\xDB\xDD\x5@!\x2"+
		"\xDC\xCF\x3\x2\x2\x2\xDC\xD0\x3\x2\x2\x2\xDC\xD1\x3\x2\x2\x2\xDC\xD2\x3"+
		"\x2\x2\x2\xDC\xD3\x3\x2\x2\x2\xDC\xD4\x3\x2\x2\x2\xDC\xD5\x3\x2\x2\x2"+
		"\xDC\xD6\x3\x2\x2\x2\xDC\xD7\x3\x2\x2\x2\xDC\xD8\x3\x2\x2\x2\xDC\xD9\x3"+
		"\x2\x2\x2\xDC\xDA\x3\x2\x2\x2\xDC\xDB\x3\x2\x2\x2\xDD\xDE\x3\x2\x2\x2"+
		"\xDE\xDF\aH\x2\x2\xDF\xE2\x3\x2\x2\x2\xE0\xE2\x5\x16\f\x2\xE1\xCE\x3\x2"+
		"\x2\x2\xE1\xE0\x3\x2\x2\x2\xE2\xF\x3\x2\x2\x2\xE3\xE4\aG\x2\x2\xE4\xE5"+
		"\a\r\x2\x2\xE5\xE7\aG\x2\x2\xE6\xE8\x5\x14\v\x2\xE7\xE6\x3\x2\x2\x2\xE8"+
		"\xE9\x3\x2\x2\x2\xE9\xEA\x3\x2\x2\x2\xE9\xE7\x3\x2\x2\x2\xEA\xEB\x3\x2"+
		"\x2\x2\xEB\xEC\aH\x2\x2\xEC\xED\aH\x2\x2\xED\xFC\x3\x2\x2\x2\xEE\xEF\a"+
		"G\x2\x2\xEF\xF0\a\xE\x2\x2\xF0\xF2\aG\x2\x2\xF1\xF3\x5\x14\v\x2\xF2\xF1"+
		"\x3\x2\x2\x2\xF3\xF4\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2\xF4\xF2\x3\x2\x2"+
		"\x2\xF5\xF6\x3\x2\x2\x2\xF6\xF7\aH\x2\x2\xF7\xF8\aH\x2\x2\xF8\xFC\x3\x2"+
		"\x2\x2\xF9\xFC\x5\x16\f\x2\xFA\xFC\x5\x18\r\x2\xFB\xE3\x3\x2\x2\x2\xFB"+
		"\xEE\x3\x2\x2\x2\xFB\xF9\x3\x2\x2\x2\xFB\xFA\x3\x2\x2\x2\xFC\x11\x3\x2"+
		"\x2\x2\xFD\xFE\aG\x2\x2\xFE\xFF\a\xE\x2\x2\xFF\x101\aG\x2\x2\x100\x102"+
		"\x5\x14\v\x2\x101\x100\x3\x2\x2\x2\x102\x103\x3\x2\x2\x2\x103\x104\x3"+
		"\x2\x2\x2\x103\x101\x3\x2\x2\x2\x104\x105\x3\x2\x2\x2\x105\x106\aH\x2"+
		"\x2\x106\x107\aH\x2\x2\x107\x10B\x3\x2\x2\x2\x108\x10B\x5\x16\f\x2\x109"+
		"\x10B\x5\x18\r\x2\x10A\xFD\x3\x2\x2\x2\x10A\x108\x3\x2\x2\x2\x10A\x109"+
		"\x3\x2\x2\x2\x10B\x13\x3\x2\x2\x2\x10C\x10D\aG\x2\x2\x10D\x10E\x5r:\x2"+
		"\x10E\x10F\x5\x12\n\x2\x10F\x110\aH\x2\x2\x110\x119\x3\x2\x2\x2\x111\x119"+
		"\x5\x12\n\x2\x112\x113\aG\x2\x2\x113\x114\x5r:\x2\x114\x115\x5\xE\b\x2"+
		"\x115\x116\aH\x2\x2\x116\x119\x3\x2\x2\x2\x117\x119\x5\xE\b\x2\x118\x10C"+
		"\x3\x2\x2\x2\x118\x111\x3\x2\x2\x2\x118\x112\x3\x2\x2\x2\x118\x117\x3"+
		"\x2\x2\x2\x119\x15\x3\x2\x2\x2\x11A\x11B\aG\x2\x2\x11B\x11C\t\x4\x2\x2"+
		"\x11C\x11D\x5\x64\x33\x2\x11D\x122\x5\x2\x2\x2\x11E\x123\x5\x14\v\x2\x11F"+
		"\x123\x5r:\x2\x120\x123\x5H%\x2\x121\x123\x5\x46$\x2\x122\x11E\x3\x2\x2"+
		"\x2\x122\x11F\x3\x2\x2\x2\x122\x120\x3\x2\x2\x2\x122\x121\x3\x2\x2\x2"+
		"\x123\x124\x3\x2\x2\x2\x124\x125\aH\x2\x2\x125\x17\x3\x2\x2\x2\x126\x127"+
		"\aG\x2\x2\x127\x128\a\x11\x2\x2\x128\x129\x5\x62\x32\x2\x129\x12D\x5\x2"+
		"\x2\x2\x12A\x12E\x5\x10\t\x2\x12B\x12E\x5\xE\b\x2\x12C\x12E\x5\x14\v\x2"+
		"\x12D\x12A\x3\x2\x2\x2\x12D\x12B\x3\x2\x2\x2\x12D\x12C\x3\x2\x2\x2\x12E"+
		"\x12F\x3\x2\x2\x2\x12F\x130\aH\x2\x2\x130\x19\x3\x2\x2\x2\x131\x132\a"+
		"G\x2\x2\x132\x133\a\x12\x2\x2\x133\x134\x5\x62\x32\x2\x134\x135\x5\x2"+
		"\x2\x2\x135\x136\aH\x2\x2\x136\x1B\x3\x2\x2\x2\x137\x138\aG\x2\x2\x138"+
		"\x139\a\x13\x2\x2\x139\x13C\a\x14\x2\x2\x13A\x13D\x5\x2\x2\x2\x13B\x13D"+
		"\x5\x8CG\x2\x13C\x13A\x3\x2\x2\x2\x13C\x13B\x3\x2\x2\x2\x13D\x13E\x3\x2"+
		"\x2\x2\x13E\x13F\aH\x2\x2\x13F\x1D\x3\x2\x2\x2\x140\x141\a\x13\x2\x2\x141"+
		"\x143\a\x15\x2\x2\x142\x144\x5$\x13\x2\x143\x142\x3\x2\x2\x2\x144\x145"+
		"\x3\x2\x2\x2\x145\x146\x3\x2\x2\x2\x145\x143\x3\x2\x2\x2\x146\x1F\x3\x2"+
		"\x2\x2\x147\x148\a\x13\x2\x2\x148\x149\a\x16\x2\x2\x149\x14A\x5H%\x2\x14A"+
		"\x14B\x5\"\x12\x2\x14B!\x3\x2\x2\x2\x14C\x14D\aG\x2\x2\x14D\x14F\a\x16"+
		"\x2\x2\x14E\x150\x5&\x14\x2\x14F\x14E\x3\x2\x2\x2\x150\x151\x3\x2\x2\x2"+
		"\x151\x152\x3\x2\x2\x2\x151\x14F\x3\x2\x2\x2\x152\x153\x3\x2\x2\x2\x153"+
		"\x154\aH\x2\x2\x154#\x3\x2\x2\x2\x155\x15A\aG\x2\x2\x156\x157\a\x45\x2"+
		"\x2\x157\x159\a\x17\x2\x2\x158\x156\x3\x2\x2\x2\x159\x15C\x3\x2\x2\x2"+
		"\x15A\x15B\x3\x2\x2\x2\x15A\x158\x3\x2\x2\x2\x15B\x15D\x3\x2\x2\x2\x15C"+
		"\x15A\x3\x2\x2\x2\x15D\x161\a\x45\x2\x2\x15E\x160\x5$\x13\x2\x15F\x15E"+
		"\x3\x2\x2\x2\x160\x163\x3\x2\x2\x2\x161\x162\x3\x2\x2\x2\x161\x15F\x3"+
		"\x2\x2\x2\x162\x164\x3\x2\x2\x2\x163\x161\x3\x2\x2\x2\x164\x165\aH\x2"+
		"\x2\x165%\x3\x2\x2\x2\x166\x17A\x5\x2\x2\x2\x167\x16D\aG\x2\x2\x168\x169"+
		"\x5\x8EH\x2\x169\x16A\a\x17\x2\x2\x16A\x16C\x3\x2\x2\x2\x16B\x168\x3\x2"+
		"\x2\x2\x16C\x16F\x3\x2\x2\x2\x16D\x16E\x3\x2\x2\x2\x16D\x16B\x3\x2\x2"+
		"\x2\x16E\x170\x3\x2\x2\x2\x16F\x16D\x3\x2\x2\x2\x170\x174\x5\x8EH\x2\x171"+
		"\x173\x5&\x14\x2\x172\x171\x3\x2\x2\x2\x173\x176\x3\x2\x2\x2\x174\x175"+
		"\x3\x2\x2\x2\x174\x172\x3\x2\x2\x2\x175\x177\x3\x2\x2\x2\x176\x174\x3"+
		"\x2\x2\x2\x177\x178\aH\x2\x2\x178\x17A\x3\x2\x2\x2\x179\x166\x3\x2\x2"+
		"\x2\x179\x167\x3\x2\x2\x2\x17A\'\x3\x2\x2\x2\x17B\x17C\a\x18\x2\x2\x17C"+
		"\x17D\a\x19\x2\x2\x17D\x17E\x5\x2\x2\x2\x17E\x180\aG\x2\x2\x17F\x181\x5"+
		"*\x16\x2\x180\x17F\x3\x2\x2\x2\x181\x182\x3\x2\x2\x2\x182\x183\x3\x2\x2"+
		"\x2\x182\x180\x3\x2\x2\x2\x183\x184\x3\x2\x2\x2\x184\x185\aH\x2\x2\x185"+
		")\x3\x2\x2\x2\x186\x188\aG\x2\x2\x187\x189\x5,\x17\x2\x188\x187\x3\x2"+
		"\x2\x2\x189\x18A\x3\x2\x2\x2\x18A\x18B\x3\x2\x2\x2\x18A\x188\x3\x2\x2"+
		"\x2\x18B\x18C\x3\x2\x2\x2\x18C\x18D\x5\x8CG\x2\x18D\x18E\aH\x2\x2\x18E"+
		"+\x3\x2\x2\x2\x18F\x190\aG\x2\x2\x190\x196\x5\x8EH\x2\x191\x192\aG\x2"+
		"\x2\x192\x193\x5\x8EH\x2\x193\x194\aH\x2\x2\x194\x197\x3\x2\x2\x2\x195"+
		"\x197\x5p\x39\x2\x196\x191\x3\x2\x2\x2\x196\x195\x3\x2\x2\x2\x197\x198"+
		"\x3\x2\x2\x2\x198\x199\aH\x2\x2\x199-\x3\x2\x2\x2\x19A\x19B\a\x1A\x2\x2"+
		"\x19B\x1A0\t\x5\x2\x2\x19C\x1A1\x5\\/\x2\x19D\x1A1\a\x1C\x2\x2\x19E\x1A1"+
		"\a\x1B\x2\x2\x19F\x1A1\a\x1D\x2\x2\x1A0\x19C\x3\x2\x2\x2\x1A0\x19D\x3"+
		"\x2\x2\x2\x1A0\x19E\x3\x2\x2\x2\x1A0\x19F\x3\x2\x2\x2\x1A1/\x3\x2\x2\x2"+
		"\x1A2\x1A3\a\x1E\x2\x2\x1A3\x1A4\x5\x46$\x2\x1A4\x1A5\x5\x8CG\x2\x1A5"+
		"\x31\x3\x2\x2\x2\x1A6\x1A7\a\x1F\x2\x2\x1A7\x1A8\x5\x46$\x2\x1A8\x1A9"+
		"\x5\x8CG\x2\x1A9\x33\x3\x2\x2\x2\x1AA\x1AB\a \x2\x2\x1AB\x1AC\x5\x46$"+
		"\x2\x1AC\x1AD\x5\x8CG\x2\x1AD\x35\x3\x2\x2\x2\x1AE\x1AF\a!\x2\x2\x1AF"+
		"\x1B0\x5\x42\"\x2\x1B0\x1B1\x5\x42\"\x2\x1B1\x37\x3\x2\x2\x2\x1B2\x1B3"+
		"\a\"\x2\x2\x1B3\x1B4\x5\x42\"\x2\x1B4\x1B5\x5\x42\"\x2\x1B5\x39\x3\x2"+
		"\x2\x2\x1B6\x1B7\a#\x2\x2\x1B7\x1B8\x5\x42\"\x2\x1B8;\x3\x2\x2\x2\x1B9"+
		"\x1BA\a$\x2\x2\x1BA\x1BB\x5H%\x2\x1BB=\x3\x2\x2\x2\x1BC\x1BD\a%\x2\x2"+
		"\x1BD\x1BE\a&\x2\x2\x1BE?\x3\x2\x2\x2\x1BF\x1C0\a\'\x2\x2\x1C0\x1C1\x5"+
		"\x8CG\x2\x1C1\x1C2\x5\xE\b\x2\x1C2\x1CA\x3\x2\x2\x2\x1C3\x1C4\a\'\x2\x2"+
		"\x1C4\x1C5\a\x10\x2\x2\x1C5\x1C6\aG\x2\x2\x1C6\x1C7\x5\x36\x1C\x2\x1C7"+
		"\x1C8\aH\x2\x2\x1C8\x1CA\x3\x2\x2\x2\x1C9\x1BF\x3\x2\x2\x2\x1C9\x1C3\x3"+
		"\x2\x2\x2\x1CA\x41\x3\x2\x2\x2\x1CB\x1D9\x5\x2\x2\x2\x1CC\x1D9\x5\x82"+
		"\x42\x2\x1CD\x1D9\x5\x84\x43\x2\x1CE\x1D9\x5\x44#\x2\x1CF\x1D3\aG\x2\x2"+
		"\x1D0\x1D4\a(\x2\x2\x1D1\x1D4\a)\x2\x2\x1D2\x1D4\x5\x8CG\x2\x1D3\x1D0"+
		"\x3\x2\x2\x2\x1D3\x1D1\x3\x2\x2\x2\x1D3\x1D2\x3\x2\x2\x2\x1D4\x1D5\x3"+
		"\x2\x2\x2\x1D5\x1D6\x5H%\x2\x1D6\x1D7\aH\x2\x2\x1D7\x1D9\x3\x2\x2\x2\x1D8"+
		"\x1CB\x3\x2\x2\x2\x1D8\x1CC\x3\x2\x2\x2\x1D8\x1CD\x3\x2\x2\x2\x1D8\x1CE"+
		"\x3\x2\x2\x2\x1D8\x1CF\x3\x2\x2\x2\x1D9\x43\x3\x2\x2\x2\x1DA\x1DB\aG\x2"+
		"\x2\x1DB\x1DC\a*\x2\x2\x1DC\x1DD\x5\x42\"\x2\x1DD\x1DE\aH\x2\x2\x1DE\x45"+
		"\x3\x2\x2\x2\x1DF\x1E3\aG\x2\x2\x1E0\x1E4\x5\x2\x2\x2\x1E1\x1E4\a\x4\x2"+
		"\x2\x1E2\x1E4\x5T+\x2\x1E3\x1E0\x3\x2\x2\x2\x1E3\x1E1\x3\x2\x2\x2\x1E3"+
		"\x1E2\x3\x2\x2\x2\x1E4\x1E5\x3\x2\x2\x2\x1E5\x1E8\a+\x2\x2\x1E6\x1E9\x5"+
		"\x8EH\x2\x1E7\x1E9\x5\x2\x2\x2\x1E8\x1E6\x3\x2\x2\x2\x1E8\x1E7\x3\x2\x2"+
		"\x2\x1E9\x1EA\x3\x2\x2\x2\x1EA\x1EB\aH\x2\x2\x1EBG\x3\x2\x2\x2\x1EC\x1FA"+
		"\x5\x2\x2\x2\x1ED\x1FA\x5\x86\x44\x2\x1EE\x1FA\x5l\x37\x2\x1EF\x1F0\a"+
		"G\x2\x2\x1F0\x1F1\x5P)\x2\x1F1\x1F4\x5R*\x2\x1F2\x1F5\x5\x8EH\x2\x1F3"+
		"\x1F5\x5\x2\x2\x2\x1F4\x1F2\x3\x2\x2\x2\x1F4\x1F3\x3\x2\x2\x2\x1F5\x1F6"+
		"\x3\x2\x2\x2\x1F6\x1F7\aH\x2\x2\x1F7\x1FA\x3\x2\x2\x2\x1F8\x1FA\x5J&\x2"+
		"\x1F9\x1EC\x3\x2\x2\x2\x1F9\x1ED\x3\x2\x2\x2\x1F9\x1EE\x3\x2\x2\x2\x1F9"+
		"\x1EF\x3\x2\x2\x2\x1F9\x1F8\x3\x2\x2\x2\x1FAI\x3\x2\x2\x2\x1FB\x1FF\a"+
		"G\x2\x2\x1FC\x200\a(\x2\x2\x1FD\x200\a)\x2\x2\x1FE\x200\x5\x8CG\x2\x1FF"+
		"\x1FC\x3\x2\x2\x2\x1FF\x1FD\x3\x2\x2\x2\x1FF\x1FE\x3\x2\x2\x2\x200\x201"+
		"\x3\x2\x2\x2\x201\x202\x5L\'\x2\x202\x203\aH\x2\x2\x203K\x3\x2\x2\x2\x204"+
		"\x205\x5N(\x2\x205M\x3\x2\x2\x2\x206\x207\aG\x2\x2\x207\x208\a,\x2\x2"+
		"\x208\x209\x5\x8CG\x2\x209\x20A\x5H%\x2\x20A\x20B\a-\x2\x2\x20B\x20C\x5"+
		"\x2\x2\x2\x20C\x20D\aH\x2\x2\x20DO\x3\x2\x2\x2\x20E\x212\x5\x2\x2\x2\x20F"+
		"\x212\a\x4\x2\x2\x210\x212\x5V,\x2\x211\x20E\x3\x2\x2\x2\x211\x20F\x3"+
		"\x2\x2\x2\x211\x210\x3\x2\x2\x2\x212Q\x3\x2\x2\x2\x213\x214\t\x6\x2\x2"+
		"\x214S\x3\x2\x2\x2\x215\x218\x5X-\x2\x216\x218\x5V,\x2\x217\x215\x3\x2"+
		"\x2\x2\x217\x216\x3\x2\x2\x2\x218U\x3\x2\x2\x2\x219\x21A\aG\x2\x2\x21A"+
		"\x21B\x5Z.\x2\x21B\x21C\a\a\x2\x2\x21C\x21D\aH\x2\x2\x21D\x220\x3\x2\x2"+
		"\x2\x21E\x220\x5\\/\x2\x21F\x219\x3\x2\x2\x2\x21F\x21E\x3\x2\x2\x2\x220"+
		"W\x3\x2\x2\x2\x221\x222\aG\x2\x2\x222\x223\x5Z.\x2\x223\x224\a\b\x2\x2"+
		"\x224\x225\aH\x2\x2\x225\x228\x3\x2\x2\x2\x226\x228\x5^\x30\x2\x227\x221"+
		"\x3\x2\x2\x2\x227\x226\x3\x2\x2\x2\x228Y\x3\x2\x2\x2\x229\x22E\x5\x8C"+
		"G\x2\x22A\x22E\a\x1D\x2\x2\x22B\x22E\a\x1B\x2\x2\x22C\x22E\a\x1C\x2\x2"+
		"\x22D\x229\x3\x2\x2\x2\x22D\x22A\x3\x2\x2\x2\x22D\x22B\x3\x2\x2\x2\x22D"+
		"\x22C\x3\x2\x2\x2\x22E[\x3\x2\x2\x2\x22F\x230\aG\x2\x2\x230\x231\a\x32"+
		"\x2\x2\x231\x232\x5\x42\"\x2\x232\x233\aH\x2\x2\x233]\x3\x2\x2\x2\x234"+
		"\x235\aG\x2\x2\x235\x236\a\b\x2\x2\x236\x237\x5V,\x2\x237\x238\aH\x2\x2"+
		"\x238_\x3\x2\x2\x2\x239\x23A\aG\x2\x2\x23A\x23B\a\x33\x2\x2\x23B\x23C"+
		"\t\x2\x2\x2\x23C\x23D\aH\x2\x2\x23D\x61\x3\x2\x2\x2\x23E\x244\x5\x2\x2"+
		"\x2\x23F\x244\x5\x8CG\x2\x240\x244\x5r:\x2\x241\x244\x5\x8EH\x2\x242\x244"+
		"\x5\x64\x33\x2\x243\x23E\x3\x2\x2\x2\x243\x23F\x3\x2\x2\x2\x243\x240\x3"+
		"\x2\x2\x2\x243\x241\x3\x2\x2\x2\x243\x242\x3\x2\x2\x2\x244\x63\x3\x2\x2"+
		"\x2\x245\x250\x5\x2\x2\x2\x246\x250\x5H%\x2\x247\x250\x5\x66\x34\x2\x248"+
		"\x250\x5h\x35\x2\x249\x250\a\a\x2\x2\x24A\x250\a\b\x2\x2\x24B\x250\x5"+
		"X-\x2\x24C\x250\x5`\x31\x2\x24D\x250\x5j\x36\x2\x24E\x250\x5l\x37\x2\x24F"+
		"\x245\x3\x2\x2\x2\x24F\x246\x3\x2\x2\x2\x24F\x247\x3\x2\x2\x2\x24F\x248"+
		"\x3\x2\x2\x2\x24F\x249\x3\x2\x2\x2\x24F\x24A\x3\x2\x2\x2\x24F\x24B\x3"+
		"\x2\x2\x2\x24F\x24C\x3\x2\x2\x2\x24F\x24D\x3\x2\x2\x2\x24F\x24E\x3\x2"+
		"\x2\x2\x250\x65\x3\x2\x2\x2\x251\x257\aG\x2\x2\x252\x253\x5\x8EH\x2\x253"+
		"\x254\a\x17\x2\x2\x254\x256\x3\x2\x2\x2\x255\x252\x3\x2\x2\x2\x256\x259"+
		"\x3\x2\x2\x2\x257\x258\x3\x2\x2\x2\x257\x255\x3\x2\x2\x2\x258\x25A\x3"+
		"\x2\x2\x2\x259\x257\x3\x2\x2\x2\x25A\x25B\x5\x8EH\x2\x25B\x25C\aH\x2\x2"+
		"\x25Cg\x3\x2\x2\x2\x25D\x261\x5L\'\x2\x25E\x261\x5\x16\f\x2\x25F\x261"+
		"\x5\x18\r\x2\x260\x25D\x3\x2\x2\x2\x260\x25E\x3\x2\x2\x2\x260\x25F\x3"+
		"\x2\x2\x2\x261i\x3\x2\x2\x2\x262\x263\aG\x2\x2\x263\x264\a\x34\x2\x2\x264"+
		"\x265\x5\x8CG\x2\x265\x266\a\x35\x2\x2\x266\x267\x5\x8CG\x2\x267\x268"+
		"\aH\x2\x2\x268k\x3\x2\x2\x2\x269\x26A\aG\x2\x2\x26A\x26B\a\x36\x2\x2\x26B"+
		"\x26C\x5\x64\x33\x2\x26C\x26D\x5\x2\x2\x2\x26D\x26E\x5r:\x2\x26E\x26F"+
		"\aH\x2\x2\x26Fm\x3\x2\x2\x2\x270\x271\a\x43\x2\x2\x271\x272\x5p\x39\x2"+
		"\x272\x273\x5p\x39\x2\x273o\x3\x2\x2\x2\x274\x280\x5\x2\x2\x2\x275\x280"+
		"\x5\x8EH\x2\x276\x277\aG\x2\x2\x277\x27A\a\x37\x2\x2\x278\x27B\x5\x2\x2"+
		"\x2\x279\x27B\x5\x8EH\x2\x27A\x278\x3\x2\x2\x2\x27A\x279\x3\x2\x2\x2\x27B"+
		"\x27C\x3\x2\x2\x2\x27C\x27D\x5\x42\"\x2\x27D\x27E\aH\x2\x2\x27E\x280\x3"+
		"\x2\x2\x2\x27F\x274\x3\x2\x2\x2\x27F\x275\x3\x2\x2\x2\x27F\x276\x3\x2"+
		"\x2\x2\x280q\x3\x2\x2\x2\x281\x29C\aG\x2\x2\x282\x283\a\x41\x2\x2\x283"+
		"\x285\x5r:\x2\x284\x286\x5r:\x2\x285\x284\x3\x2\x2\x2\x286\x287\x3\x2"+
		"\x2\x2\x287\x288\x3\x2\x2\x2\x287\x285\x3\x2\x2\x2\x288\x29D\x3\x2\x2"+
		"\x2\x289\x28A\x5t;\x2\x28A\x28B\x5\x8CG\x2\x28B\x28C\x5\x8CG\x2\x28C\x29D"+
		"\x3\x2\x2\x2\x28D\x29D\x5n\x38\x2\x28E\x28F\a\x43\x2\x2\x28F\x290\x5\x42"+
		"\"\x2\x290\x291\x5\x42\"\x2\x291\x29D\x3\x2\x2\x2\x292\x293\a\x44\x2\x2"+
		"\x293\x29D\x5r:\x2\x294\x295\a\x43\x2\x2\x295\x296\x5V,\x2\x296\x297\x5"+
		"V,\x2\x297\x29D\x3\x2\x2\x2\x298\x299\a\x43\x2\x2\x299\x29A\x5X-\x2\x29A"+
		"\x29B\x5X-\x2\x29B\x29D\x3\x2\x2\x2\x29C\x282\x3\x2\x2\x2\x29C\x289\x3"+
		"\x2\x2\x2\x29C\x28D\x3\x2\x2\x2\x29C\x28E\x3\x2\x2\x2\x29C\x292\x3\x2"+
		"\x2\x2\x29C\x294\x3\x2\x2\x2\x29C\x298\x3\x2\x2\x2\x29D\x29E\x3\x2\x2"+
		"\x2\x29E\x29F\aH\x2\x2\x29F\x2A2\x3\x2\x2\x2\x2A0\x2A2\x5\x16\f\x2\x2A1"+
		"\x281\x3\x2\x2\x2\x2A1\x2A0\x3\x2\x2\x2\x2A2s\x3\x2\x2\x2\x2A3\x2A4\t"+
		"\a\x2\x2\x2A4u\x3\x2\x2\x2\x2A5\x2A6\aG\x2\x2\x2A6\x2A7\a\x38\x2\x2\x2A7"+
		"\x2A8\x5\x8CG\x2\x2A8\x2A9\x5\x8CG\x2\x2A9\x2AA\aH\x2\x2\x2AAw\x3\x2\x2"+
		"\x2\x2AB\x2AC\aG\x2\x2\x2AC\x2AD\a\x39\x2\x2\x2AD\x2AE\x5\x8CG\x2\x2AE"+
		"\x2AF\x5\x8CG\x2\x2AF\x2B0\aH\x2\x2\x2B0y\x3\x2\x2\x2\x2B1\x2B2\aG\x2"+
		"\x2\x2B2\x2B3\a:\x2\x2\x2B3\x2B4\x5\x8CG\x2\x2B4\x2B5\x5\x8CG\x2\x2B5"+
		"\x2B6\aH\x2\x2\x2B6{\x3\x2\x2\x2\x2B7\x2B8\aG\x2\x2\x2B8\x2B9\a;\x2\x2"+
		"\x2B9\x2BA\x5\x8CG\x2\x2BA\x2BB\x5\x8CG\x2\x2BB\x2BC\aH\x2\x2\x2BC}\x3"+
		"\x2\x2\x2\x2BD\x2BE\aG\x2\x2\x2BE\x2BF\a<\x2\x2\x2BF\x2C0\x5\x8CG\x2\x2C0"+
		"\x2C1\x5\x8CG\x2\x2C1\x2C2\aH\x2\x2\x2C2\x7F\x3\x2\x2\x2\x2C3\x2C4\aG"+
		"\x2\x2\x2C4\x2C8\a=\x2\x2\x2C5\x2C9\x5\x2\x2\x2\x2C6\x2C9\x5H%\x2\x2C7"+
		"\x2C9\x5L\'\x2\x2C8\x2C5\x3\x2\x2\x2\x2C8\x2C6\x3\x2\x2\x2\x2C8\x2C7\x3"+
		"\x2\x2\x2\x2C9\x2CA\x3\x2\x2\x2\x2CA\x2CB\aH\x2\x2\x2CB\x81\x3\x2\x2\x2"+
		"\x2CC\x2CD\aG\x2\x2\x2CD\x2CE\a\v\x2\x2\x2CE\x2CF\x5H%\x2\x2CF\x2D0\a"+
		"-\x2\x2\x2D0\x2D1\x5\x2\x2\x2\x2D1\x2D2\aH\x2\x2\x2D2\x83\x3\x2\x2\x2"+
		"\x2D3\x2D4\aG\x2\x2\x2D4\x2D5\a\n\x2\x2\x2D5\x2D6\x5H%\x2\x2D6\x2D7\a"+
		"-\x2\x2\x2D7\x2D8\x5\x2\x2\x2\x2D8\x2D9\aH\x2\x2\x2D9\x85\x3\x2\x2\x2"+
		"\x2DA\x2DB\aG\x2\x2\x2DB\x2E2\a>\x2\x2\x2DC\x2E3\x5\x16\f\x2\x2DD\x2DF"+
		"\x5H%\x2\x2DE\x2DD\x3\x2\x2\x2\x2DF\x2E0\x3\x2\x2\x2\x2E0\x2E1\x3\x2\x2"+
		"\x2\x2E0\x2DE\x3\x2\x2\x2\x2E1\x2E3\x3\x2\x2\x2\x2E2\x2DC\x3\x2\x2\x2"+
		"\x2E2\x2DE\x3\x2\x2\x2\x2E3\x2E4\x3\x2\x2\x2\x2E4\x2E5\aH\x2\x2\x2E5\x87"+
		"\x3\x2\x2\x2\x2E6\x2E7\aG\x2\x2\x2E7\x2E8\a?\x2\x2\x2E8\x2E9\x5H%\x2\x2E9"+
		"\x2EA\a-\x2\x2\x2EA\x2EB\x5\x2\x2\x2\x2EB\x2EC\aH\x2\x2\x2EC\x89\x3\x2"+
		"\x2\x2\x2ED\x2EE\aG\x2\x2\x2EE\x2EF\a@\x2\x2\x2EF\x2F0\x5\x42\"\x2\x2F0"+
		"\x2F1\a-\x2\x2\x2F1\x2F2\x5\x2\x2\x2\x2F2\x2F3\aH\x2\x2\x2F3\x8B\x3\x2"+
		"\x2\x2\x2F4\x304\x5\x2\x2\x2\x2F5\x304\x5\x80\x41\x2\x2F6\x304\x5x=\x2"+
		"\x2F7\x304\x5z>\x2\x2F8\x304\x5|?\x2\x2F9\x304\x5v<\x2\x2FA\x304\x5~@"+
		"\x2\x2FB\x304\x5\x88\x45\x2\x2FC\x304\x5\x46$\x2\x2FD\x304\x5\x8A\x46"+
		"\x2\x2FE\x300\a\x45\x2\x2\x2FF\x2FE\x3\x2\x2\x2\x300\x301\x3\x2\x2\x2"+
		"\x301\x2FF\x3\x2\x2\x2\x301\x302\x3\x2\x2\x2\x302\x304\x3\x2\x2\x2\x303"+
		"\x2F4\x3\x2\x2\x2\x303\x2F5\x3\x2\x2\x2\x303\x2F6\x3\x2\x2\x2\x303\x2F7"+
		"\x3\x2\x2\x2\x303\x2F8\x3\x2\x2\x2\x303\x2F9\x3\x2\x2\x2\x303\x2FA\x3"+
		"\x2\x2\x2\x303\x2FB\x3\x2\x2\x2\x303\x2FC\x3\x2\x2\x2\x303\x2FD\x3\x2"+
		"\x2\x2\x303\x2FF\x3\x2\x2\x2\x304\x8D\x3\x2\x2\x2\x305\x307\a\x46\x2\x2"+
		"\x306\x305\x3\x2\x2\x2\x307\x308\x3\x2\x2\x2\x308\x306\x3\x2\x2\x2\x308"+
		"\x309\x3\x2\x2\x2\x309\x8F\x3\x2\x2\x2;\x98\x9E\xA0\xAE\xB4\xBE\xC0\xDC"+
		"\xE1\xE9\xF4\xFB\x103\x10A\x118\x122\x12D\x13C\x145\x151\x15A\x161\x16D"+
		"\x174\x179\x182\x18A\x196\x1A0\x1C9\x1D3\x1D8\x1E3\x1E8\x1F4\x1F9\x1FF"+
		"\x211\x217\x21F\x227\x22D\x243\x24F\x257\x260\x27A\x27F\x287\x29C\x2A1"+
		"\x2C8\x2E0\x2E2\x301\x303\x308";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
