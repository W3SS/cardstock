//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Recycle.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class RecycleParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, BOOLOP=63, COMPOP=64, EQOP=65, UNOP=66, 
		INTNUM=67, LETT=68, OPEN=69, CLOSE=70, WS=71, ANY=72;
	public const int
		RULE_game = 0, RULE_setup = 1, RULE_stage = 2, RULE_scoring = 3, RULE_endcondition = 4, 
		RULE_action = 5, RULE_multiaction = 6, RULE_multiaction2 = 7, RULE_condact = 8, 
		RULE_agg = 9, RULE_let = 10, RULE_declare = 11, RULE_playercreate = 12, 
		RULE_teamcreate = 13, RULE_deckcreate = 14, RULE_deck = 15, RULE_teams = 16, 
		RULE_attribute = 17, RULE_initpoints = 18, RULE_awards = 19, RULE_subaward = 20, 
		RULE_cycleaction = 21, RULE_setaction = 22, RULE_incaction = 23, RULE_decaction = 24, 
		RULE_moveaction = 25, RULE_copyaction = 26, RULE_removeaction = 27, RULE_shuffleaction = 28, 
		RULE_turnaction = 29, RULE_repeat = 30, RULE_card = 31, RULE_actual = 32, 
		RULE_rawstorage = 33, RULE_cstorage = 34, RULE_memstorage = 35, RULE_memset = 36, 
		RULE_tuple = 37, RULE_var = 38, RULE_locpre = 39, RULE_locdesc = 40, RULE_who = 41, 
		RULE_whop = 42, RULE_whot = 43, RULE_whodesc = 44, RULE_owner = 45, RULE_teamp = 46, 
		RULE_other = 47, RULE_typed = 48, RULE_collection = 49, RULE_strcollection = 50, 
		RULE_cstoragecollection = 51, RULE_range = 52, RULE_filter = 53, RULE_attrcomp = 54, 
		RULE_cardatt = 55, RULE_boolean = 56, RULE_intop = 57, RULE_add = 58, 
		RULE_mult = 59, RULE_subtract = 60, RULE_mod = 61, RULE_divide = 62, RULE_sizeof = 63, 
		RULE_maxof = 64, RULE_minof = 65, RULE_unionof = 66, RULE_sum = 67, RULE_score = 68, 
		RULE_int = 69, RULE_namegr = 70;
	public static readonly string[] ruleNames = {
		"game", "setup", "stage", "scoring", "endcondition", "action", "multiaction", 
		"multiaction2", "condact", "agg", "let", "declare", "playercreate", "teamcreate", 
		"deckcreate", "deck", "teams", "attribute", "initpoints", "awards", "subaward", 
		"cycleaction", "setaction", "incaction", "decaction", "moveaction", "copyaction", 
		"removeaction", "shuffleaction", "turnaction", "repeat", "card", "actual", 
		"rawstorage", "cstorage", "memstorage", "memset", "tuple", "var", "locpre", 
		"locdesc", "who", "whop", "whot", "whodesc", "owner", "teamp", "other", 
		"typed", "collection", "strcollection", "cstoragecollection", "range", 
		"filter", "attrcomp", "cardatt", "boolean", "intop", "add", "mult", "subtract", 
		"mod", "divide", "sizeof", "maxof", "minof", "unionof", "sum", "score", 
		"int", "namegr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'game'", "'setup'", "'stage'", "'player'", "'team'", "'scoring'", 
		"'min'", "'max'", "'end'", "'choice'", "'do'", "'any'", "'all'", "'let'", 
		"'declare'", "'create'", "'players'", "'teams'", "'deck'", "','", "'put'", 
		"'points'", "'cycle'", "'next'", "'current'", "'previous'", "'set'", "'inc'", 
		"'dec'", "'move'", "'remember'", "'forget'", "'shuffle'", "'turn'", "'pass'", 
		"'repeat'", "'top'", "'bottom'", "'actual'", "'sto'", "'tuples'", "'using'", 
		"'''", "'vloc'", "'iloc'", "'hloc'", "'mem'", "'owner'", "'other'", "'range'", 
		"'..'", "'filter'", "'cardatt'", "'+'", "'*'", "'-'", "'%'", "'//'", "'size'", 
		"'union'", "'sum'", "'score'", null, null, null, "'not'", null, null, 
		"'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "BOOLOP", "COMPOP", "EQOP", "UNOP", "INTNUM", "LETT", 
		"OPEN", "CLOSE", "WS", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Recycle.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public RecycleParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class GameContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public SetupContext setup() {
			return GetRuleContext<SetupContext>(0);
		}
		public ScoringContext scoring() {
			return GetRuleContext<ScoringContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DeclareContext[] declare() {
			return GetRuleContexts<DeclareContext>();
		}
		public DeclareContext declare(int i) {
			return GetRuleContext<DeclareContext>(i);
		}
		public MultiactionContext[] multiaction() {
			return GetRuleContexts<MultiactionContext>();
		}
		public MultiactionContext multiaction(int i) {
			return GetRuleContext<MultiactionContext>(i);
		}
		public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public GameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_game; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterGame(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitGame(this);
		}
	}

	[RuleVersion(0)]
	public GameContext game() {
		GameContext _localctx = new GameContext(Context, State);
		EnterRule(_localctx, 0, RULE_game);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; Match(OPEN);
			State = 143; Match(T__0);
			State = 147;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 144; declare();
					}
					} 
				}
				State = 149;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 150; setup();
			State = 153;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 153;
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						State = 151; multiaction();
						}
						break;
					case 2:
						{
						State = 152; stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 155;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 157; scoring();
			State = 158; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetupContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public PlayercreateContext playercreate() {
			return GetRuleContext<PlayercreateContext>(0);
		}
		public TeamcreateContext teamcreate() {
			return GetRuleContext<TeamcreateContext>(0);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public DeckcreateContext[] deckcreate() {
			return GetRuleContexts<DeckcreateContext>();
		}
		public DeckcreateContext deckcreate(int i) {
			return GetRuleContext<DeckcreateContext>(i);
		}
		public RepeatContext[] repeat() {
			return GetRuleContexts<RepeatContext>();
		}
		public RepeatContext repeat(int i) {
			return GetRuleContext<RepeatContext>(i);
		}
		public SetupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSetup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSetup(this);
		}
	}

	[RuleVersion(0)]
	public SetupContext setup() {
		SetupContext _localctx = new SetupContext(Context, State);
		EnterRule(_localctx, 2, RULE_setup);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; Match(OPEN);
			State = 161; Match(T__1);
			State = 162; playercreate();
			State = 163; Match(OPEN);
			State = 164; teamcreate();
			State = 165; Match(CLOSE);
			State = 173;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 166; Match(OPEN);
					State = 169;
					switch (TokenStream.La(1)) {
					case T__15:
						{
						State = 167; deckcreate();
						}
						break;
					case T__35:
						{
						State = 168; repeat();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 171; Match(CLOSE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 175;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 177; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public EndconditionContext endcondition() {
			return GetRuleContext<EndconditionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultiactionContext[] multiaction() {
			return GetRuleContexts<MultiactionContext>();
		}
		public MultiactionContext multiaction(int i) {
			return GetRuleContext<MultiactionContext>(i);
		}
		public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public StageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterStage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitStage(this);
		}
	}

	[RuleVersion(0)]
	public StageContext stage() {
		StageContext _localctx = new StageContext(Context, State);
		EnterRule(_localctx, 4, RULE_stage);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 179; Match(OPEN);
			State = 180; Match(T__2);
			State = 181;
			_la = TokenStream.La(1);
			if ( !(_la==T__3 || _la==T__4) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 182; endcondition();
			State = 185;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 185;
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						State = 183; multiaction();
						}
						break;
					case 2:
						{
						State = 184; stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 187;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 189; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoringContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ScoringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scoring; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterScoring(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitScoring(this);
		}
	}

	[RuleVersion(0)]
	public ScoringContext scoring() {
		ScoringContext _localctx = new ScoringContext(Context, State);
		EnterRule(_localctx, 6, RULE_scoring);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; Match(OPEN);
			State = 192; Match(T__5);
			State = 193;
			_la = TokenStream.La(1);
			if ( !(_la==T__6 || _la==T__7) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 194; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndconditionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public EndconditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endcondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterEndcondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitEndcondition(this);
		}
	}

	[RuleVersion(0)]
	public EndconditionContext endcondition() {
		EndconditionContext _localctx = new EndconditionContext(Context, State);
		EnterRule(_localctx, 8, RULE_endcondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(OPEN);
			State = 197; Match(T__8);
			State = 198; boolean();
			State = 199; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public InitpointsContext initpoints() {
			return GetRuleContext<InitpointsContext>(0);
		}
		public TeamcreateContext teamcreate() {
			return GetRuleContext<TeamcreateContext>(0);
		}
		public DeckcreateContext deckcreate() {
			return GetRuleContext<DeckcreateContext>(0);
		}
		public CycleactionContext cycleaction() {
			return GetRuleContext<CycleactionContext>(0);
		}
		public SetactionContext setaction() {
			return GetRuleContext<SetactionContext>(0);
		}
		public MoveactionContext moveaction() {
			return GetRuleContext<MoveactionContext>(0);
		}
		public CopyactionContext copyaction() {
			return GetRuleContext<CopyactionContext>(0);
		}
		public IncactionContext incaction() {
			return GetRuleContext<IncactionContext>(0);
		}
		public DecactionContext decaction() {
			return GetRuleContext<DecactionContext>(0);
		}
		public RemoveactionContext removeaction() {
			return GetRuleContext<RemoveactionContext>(0);
		}
		public TurnactionContext turnaction() {
			return GetRuleContext<TurnactionContext>(0);
		}
		public ShuffleactionContext shuffleaction() {
			return GetRuleContext<ShuffleactionContext>(0);
		}
		public RepeatContext repeat() {
			return GetRuleContext<RepeatContext>(0);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 10, RULE_action);
		try {
			State = 220;
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 201; Match(OPEN);
				State = 215;
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 202; initpoints();
					}
					break;
				case 2:
					{
					State = 203; teamcreate();
					}
					break;
				case 3:
					{
					State = 204; deckcreate();
					}
					break;
				case 4:
					{
					State = 205; cycleaction();
					}
					break;
				case 5:
					{
					State = 206; setaction();
					}
					break;
				case 6:
					{
					State = 207; moveaction();
					}
					break;
				case 7:
					{
					State = 208; copyaction();
					}
					break;
				case 8:
					{
					State = 209; incaction();
					}
					break;
				case 9:
					{
					State = 210; decaction();
					}
					break;
				case 10:
					{
					State = 211; removeaction();
					}
					break;
				case 11:
					{
					State = 212; turnaction();
					}
					break;
				case 12:
					{
					State = 213; shuffleaction();
					}
					break;
				case 13:
					{
					State = 214; repeat();
					}
					break;
				}
				State = 217; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 219; agg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiactionContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public CondactContext[] condact() {
			return GetRuleContexts<CondactContext>();
		}
		public CondactContext condact(int i) {
			return GetRuleContext<CondactContext>(i);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public MultiactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMultiaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMultiaction(this);
		}
	}

	[RuleVersion(0)]
	public MultiactionContext multiaction() {
		MultiactionContext _localctx = new MultiactionContext(Context, State);
		EnterRule(_localctx, 12, RULE_multiaction);
		try {
			int _alt;
			State = 246;
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 222; Match(OPEN);
				State = 223; Match(T__9);
				State = 224; Match(OPEN);
				State = 226;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 225; condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 228;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 230; Match(CLOSE);
				State = 231; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 233; Match(OPEN);
				State = 234; Match(T__10);
				State = 235; Match(OPEN);
				State = 237;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 236; condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 239;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 241; Match(CLOSE);
				State = 242; Match(CLOSE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 244; agg();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 245; let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiaction2Context : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public CondactContext[] condact() {
			return GetRuleContexts<CondactContext>();
		}
		public CondactContext condact(int i) {
			return GetRuleContext<CondactContext>(i);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public Multiaction2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiaction2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMultiaction2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMultiaction2(this);
		}
	}

	[RuleVersion(0)]
	public Multiaction2Context multiaction2() {
		Multiaction2Context _localctx = new Multiaction2Context(Context, State);
		EnterRule(_localctx, 14, RULE_multiaction2);
		try {
			int _alt;
			State = 261;
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 248; Match(OPEN);
				State = 249; Match(T__10);
				State = 250; Match(OPEN);
				State = 252;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 251; condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 254;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 256; Match(CLOSE);
				State = 257; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 259; agg();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 260; let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondactContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public Multiaction2Context multiaction2() {
			return GetRuleContext<Multiaction2Context>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public CondactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condact; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCondact(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCondact(this);
		}
	}

	[RuleVersion(0)]
	public CondactContext condact() {
		CondactContext _localctx = new CondactContext(Context, State);
		EnterRule(_localctx, 16, RULE_condact);
		try {
			State = 275;
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 263; Match(OPEN);
				State = 264; boolean();
				State = 265; multiaction2();
				State = 266; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 268; multiaction2();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 269; Match(OPEN);
				State = 270; boolean();
				State = 271; action();
				State = 272; Match(CLOSE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 274; action();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public Multiaction2Context multiaction2() {
			return GetRuleContext<Multiaction2Context>(0);
		}
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public AggContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAgg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAgg(this);
		}
	}

	[RuleVersion(0)]
	public AggContext agg() {
		AggContext _localctx = new AggContext(Context, State);
		EnterRule(_localctx, 18, RULE_agg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277; Match(OPEN);
			State = 278;
			_la = TokenStream.La(1);
			if ( !(_la==T__11 || _la==T__12) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 279; collection();
			State = 280; var();
			State = 286;
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 281; multiaction2();
				}
				break;
			case 2:
				{
				State = 282; action();
				}
				break;
			case 3:
				{
				State = 283; boolean();
				}
				break;
			case 4:
				{
				State = 284; cstorage();
				}
				break;
			case 5:
				{
				State = 285; rawstorage();
				}
				break;
			}
			State = 288; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public TypedContext typed() {
			return GetRuleContext<TypedContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public Multiaction2Context multiaction2() {
			return GetRuleContext<Multiaction2Context>(0);
		}
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public CondactContext condact() {
			return GetRuleContext<CondactContext>(0);
		}
		public LetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLet(this);
		}
	}

	[RuleVersion(0)]
	public LetContext let() {
		LetContext _localctx = new LetContext(Context, State);
		EnterRule(_localctx, 20, RULE_let);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290; Match(OPEN);
			State = 291; Match(T__13);
			State = 292; typed();
			State = 293; var();
			State = 297;
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 294; multiaction2();
				}
				break;
			case 2:
				{
				State = 295; action();
				}
				break;
			case 3:
				{
				State = 296; condact();
				}
				break;
			}
			State = 299; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public TypedContext typed() {
			return GetRuleContext<TypedContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeclare(this);
		}
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(Context, State);
		EnterRule(_localctx, 22, RULE_declare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301; Match(OPEN);
			State = 302; Match(T__14);
			State = 303; typed();
			State = 304; var();
			State = 305; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayercreateContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public PlayercreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playercreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterPlayercreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitPlayercreate(this);
		}
	}

	[RuleVersion(0)]
	public PlayercreateContext playercreate() {
		PlayercreateContext _localctx = new PlayercreateContext(Context, State);
		EnterRule(_localctx, 24, RULE_playercreate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307; Match(OPEN);
			State = 308; Match(T__15);
			State = 309; Match(T__16);
			State = 312;
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 310; @int();
				}
				break;
			case 2:
				{
				State = 311; var();
				}
				break;
			}
			State = 314; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamcreateContext : ParserRuleContext {
		public TeamsContext[] teams() {
			return GetRuleContexts<TeamsContext>();
		}
		public TeamsContext teams(int i) {
			return GetRuleContext<TeamsContext>(i);
		}
		public TeamcreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamcreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeamcreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeamcreate(this);
		}
	}

	[RuleVersion(0)]
	public TeamcreateContext teamcreate() {
		TeamcreateContext _localctx = new TeamcreateContext(Context, State);
		EnterRule(_localctx, 26, RULE_teamcreate);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 316; Match(T__15);
			State = 317; Match(T__17);
			State = 319;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 318; teams();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 321;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckcreateContext : ParserRuleContext {
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public DeckContext deck() {
			return GetRuleContext<DeckContext>(0);
		}
		public DeckcreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deckcreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeckcreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeckcreate(this);
		}
	}

	[RuleVersion(0)]
	public DeckcreateContext deckcreate() {
		DeckcreateContext _localctx = new DeckcreateContext(Context, State);
		EnterRule(_localctx, 28, RULE_deckcreate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323; Match(T__15);
			State = 324; Match(T__18);
			State = 325; cstorage();
			State = 326; deck();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public DeckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deck; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeck(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeck(this);
		}
	}

	[RuleVersion(0)]
	public DeckContext deck() {
		DeckContext _localctx = new DeckContext(Context, State);
		EnterRule(_localctx, 30, RULE_deck);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 328; Match(OPEN);
			State = 329; Match(T__18);
			State = 331;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 330; attribute();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 333;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 335; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamsContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode[] INTNUM() { return GetTokens(RecycleParser.INTNUM); }
		public ITerminalNode INTNUM(int i) {
			return GetToken(RecycleParser.INTNUM, i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TeamsContext[] teams() {
			return GetRuleContexts<TeamsContext>();
		}
		public TeamsContext teams(int i) {
			return GetRuleContext<TeamsContext>(i);
		}
		public TeamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teams; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeams(this);
		}
	}

	[RuleVersion(0)]
	public TeamsContext teams() {
		TeamsContext _localctx = new TeamsContext(Context, State);
		EnterRule(_localctx, 32, RULE_teams);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 337; Match(OPEN);
			State = 342;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 338; Match(INTNUM);
					State = 339; Match(T__19);
					}
					} 
				}
				State = 344;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			State = 345; Match(INTNUM);
			State = 349;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 346; teams();
					}
					} 
				}
				State = 351;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			State = 352; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 34, RULE_attribute);
		try {
			int _alt;
			State = 373;
			switch (TokenStream.La(1)) {
			case T__42:
				EnterOuterAlt(_localctx, 1);
				{
				State = 354; var();
				}
				break;
			case OPEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 355; Match(OPEN);
				State = 361;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 356; namegr();
						State = 357; Match(T__19);
						}
						} 
					}
					State = 363;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				}
				State = 364; namegr();
				State = 368;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 365; attribute();
						}
						} 
					}
					State = 370;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				}
				State = 371; Match(CLOSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitpointsContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AwardsContext[] awards() {
			return GetRuleContexts<AwardsContext>();
		}
		public AwardsContext awards(int i) {
			return GetRuleContext<AwardsContext>(i);
		}
		public InitpointsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initpoints; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterInitpoints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitInitpoints(this);
		}
	}

	[RuleVersion(0)]
	public InitpointsContext initpoints() {
		InitpointsContext _localctx = new InitpointsContext(Context, State);
		EnterRule(_localctx, 36, RULE_initpoints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 375; Match(T__20);
			State = 376; Match(T__21);
			State = 377; var();
			State = 378; Match(OPEN);
			State = 380;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 379; awards();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 382;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 384; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwardsContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubawardContext[] subaward() {
			return GetRuleContexts<SubawardContext>();
		}
		public SubawardContext subaward(int i) {
			return GetRuleContext<SubawardContext>(i);
		}
		public AwardsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awards; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAwards(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAwards(this);
		}
	}

	[RuleVersion(0)]
	public AwardsContext awards() {
		AwardsContext _localctx = new AwardsContext(Context, State);
		EnterRule(_localctx, 38, RULE_awards);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 386; Match(OPEN);
			State = 388;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 387; subaward();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 390;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 392; @int();
			State = 393; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubawardContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public CardattContext cardatt() {
			return GetRuleContext<CardattContext>(0);
		}
		public SubawardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subaward; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSubaward(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSubaward(this);
		}
	}

	[RuleVersion(0)]
	public SubawardContext subaward() {
		SubawardContext _localctx = new SubawardContext(Context, State);
		EnterRule(_localctx, 40, RULE_subaward);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395; Match(OPEN);
			State = 396; namegr();
			State = 402;
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				{
				State = 397; Match(OPEN);
				State = 398; namegr();
				State = 399; Match(CLOSE);
				}
				}
				break;
			case 2:
				{
				{
				State = 401; cardatt();
				}
				}
				break;
			}
			State = 404; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CycleactionContext : ParserRuleContext {
		public OwnerContext owner() {
			return GetRuleContext<OwnerContext>(0);
		}
		public CycleactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cycleaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCycleaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCycleaction(this);
		}
	}

	[RuleVersion(0)]
	public CycleactionContext cycleaction() {
		CycleactionContext _localctx = new CycleactionContext(Context, State);
		EnterRule(_localctx, 42, RULE_cycleaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406; Match(T__22);
			State = 407;
			_la = TokenStream.La(1);
			if ( !(_la==T__23 || _la==T__24) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 412;
			switch (TokenStream.La(1)) {
			case OPEN:
				{
				State = 408; owner();
				}
				break;
			case T__24:
				{
				State = 409; Match(T__24);
				}
				break;
			case T__23:
				{
				State = 410; Match(T__23);
				}
				break;
			case T__25:
				{
				State = 411; Match(T__25);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public SetactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSetaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSetaction(this);
		}
	}

	[RuleVersion(0)]
	public SetactionContext setaction() {
		SetactionContext _localctx = new SetactionContext(Context, State);
		EnterRule(_localctx, 44, RULE_setaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414; Match(T__26);
			State = 415; rawstorage();
			State = 416; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public IncactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterIncaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitIncaction(this);
		}
	}

	[RuleVersion(0)]
	public IncactionContext incaction() {
		IncactionContext _localctx = new IncactionContext(Context, State);
		EnterRule(_localctx, 46, RULE_incaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418; Match(T__27);
			State = 419; rawstorage();
			State = 420; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public DecactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDecaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDecaction(this);
		}
	}

	[RuleVersion(0)]
	public DecactionContext decaction() {
		DecactionContext _localctx = new DecactionContext(Context, State);
		EnterRule(_localctx, 48, RULE_decaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422; Match(T__28);
			State = 423; rawstorage();
			State = 424; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveactionContext : ParserRuleContext {
		public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public MoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMoveaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMoveaction(this);
		}
	}

	[RuleVersion(0)]
	public MoveactionContext moveaction() {
		MoveactionContext _localctx = new MoveactionContext(Context, State);
		EnterRule(_localctx, 50, RULE_moveaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426; Match(T__29);
			State = 427; card();
			State = 428; card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyactionContext : ParserRuleContext {
		public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public CopyactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCopyaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCopyaction(this);
		}
	}

	[RuleVersion(0)]
	public CopyactionContext copyaction() {
		CopyactionContext _localctx = new CopyactionContext(Context, State);
		EnterRule(_localctx, 52, RULE_copyaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430; Match(T__30);
			State = 431; card();
			State = 432; card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveactionContext : ParserRuleContext {
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public RemoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRemoveaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRemoveaction(this);
		}
	}

	[RuleVersion(0)]
	public RemoveactionContext removeaction() {
		RemoveactionContext _localctx = new RemoveactionContext(Context, State);
		EnterRule(_localctx, 54, RULE_removeaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434; Match(T__31);
			State = 435; card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShuffleactionContext : ParserRuleContext {
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public ShuffleactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shuffleaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterShuffleaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitShuffleaction(this);
		}
	}

	[RuleVersion(0)]
	public ShuffleactionContext shuffleaction() {
		ShuffleactionContext _localctx = new ShuffleactionContext(Context, State);
		EnterRule(_localctx, 56, RULE_shuffleaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437; Match(T__32);
			State = 438; cstorage();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TurnactionContext : ParserRuleContext {
		public TurnactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_turnaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTurnaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTurnaction(this);
		}
	}

	[RuleVersion(0)]
	public TurnactionContext turnaction() {
		TurnactionContext _localctx = new TurnactionContext(Context, State);
		EnterRule(_localctx, 58, RULE_turnaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440; Match(T__33);
			State = 441; Match(T__34);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatContext : ParserRuleContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public MoveactionContext moveaction() {
			return GetRuleContext<MoveactionContext>(0);
		}
		public RepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRepeat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRepeat(this);
		}
	}

	[RuleVersion(0)]
	public RepeatContext repeat() {
		RepeatContext _localctx = new RepeatContext(Context, State);
		EnterRule(_localctx, 60, RULE_repeat);
		try {
			State = 450;
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 443; Match(T__35);
				State = 444; @int();
				State = 445; action();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 447; Match(T__35);
				State = 448; Match(T__12);
				State = 449; moveaction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardContext : ParserRuleContext {
		public MaxofContext maxof() {
			return GetRuleContext<MaxofContext>(0);
		}
		public MinofContext minof() {
			return GetRuleContext<MinofContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ActualContext actual() {
			return GetRuleContext<ActualContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_card; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCard(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCard(this);
		}
	}

	[RuleVersion(0)]
	public CardContext card() {
		CardContext _localctx = new CardContext(Context, State);
		EnterRule(_localctx, 62, RULE_card);
		try {
			State = 465;
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 452; maxof();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 453; minof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 454; var();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 455; actual();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				{
				State = 456; Match(OPEN);
				State = 460;
				switch (TokenStream.La(1)) {
				case T__36:
					{
					State = 457; Match(T__36);
					}
					break;
				case T__37:
					{
					State = 458; Match(T__37);
					}
					break;
				case T__42:
				case INTNUM:
				case OPEN:
					{
					State = 459; @int();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 462; cstorage();
				State = 463; Match(CLOSE);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ActualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actual; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterActual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitActual(this);
		}
	}

	[RuleVersion(0)]
	public ActualContext actual() {
		ActualContext _localctx = new ActualContext(Context, State);
		EnterRule(_localctx, 64, RULE_actual);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467; Match(OPEN);
			State = 468; Match(T__38);
			State = 469; card();
			State = 470; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RawstorageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public VarContext[] var() {
			return GetRuleContexts<VarContext>();
		}
		public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public RawstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rawstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRawstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRawstorage(this);
		}
	}

	[RuleVersion(0)]
	public RawstorageContext rawstorage() {
		RawstorageContext _localctx = new RawstorageContext(Context, State);
		EnterRule(_localctx, 66, RULE_rawstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472; Match(OPEN);
			State = 476;
			switch (TokenStream.La(1)) {
			case T__0:
				{
				State = 473; Match(T__0);
				}
				break;
			case OPEN:
				{
				State = 474; who();
				}
				break;
			case T__42:
				{
				State = 475; var();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 478; Match(T__39);
			State = 481;
			switch (TokenStream.La(1)) {
			case LETT:
				{
				State = 479; namegr();
				}
				break;
			case T__42:
				{
				State = 480; var();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 483; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CstorageContext : ParserRuleContext {
		public UnionofContext unionof() {
			return GetRuleContext<UnionofContext>(0);
		}
		public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public LocpreContext locpre() {
			return GetRuleContext<LocpreContext>(0);
		}
		public LocdescContext locdesc() {
			return GetRuleContext<LocdescContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public MemstorageContext memstorage() {
			return GetRuleContext<MemstorageContext>(0);
		}
		public CstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCstorage(this);
		}
	}

	[RuleVersion(0)]
	public CstorageContext cstorage() {
		CstorageContext _localctx = new CstorageContext(Context, State);
		EnterRule(_localctx, 68, RULE_cstorage);
		try {
			State = 498;
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 485; unionof();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 486; filter();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 487; Match(OPEN);
				State = 488; locpre();
				State = 489; locdesc();
				State = 492;
				switch (TokenStream.La(1)) {
				case LETT:
					{
					State = 490; namegr();
					}
					break;
				case T__42:
					{
					State = 491; var();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 494; Match(CLOSE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 496; memstorage();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 497; var();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemstorageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public MemstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMemstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMemstorage(this);
		}
	}

	[RuleVersion(0)]
	public MemstorageContext memstorage() {
		MemstorageContext _localctx = new MemstorageContext(Context, State);
		EnterRule(_localctx, 70, RULE_memstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 500; Match(OPEN);
			State = 504;
			switch (TokenStream.La(1)) {
			case T__36:
				{
				State = 501; Match(T__36);
				}
				break;
			case T__37:
				{
				State = 502; Match(T__37);
				}
				break;
			case T__42:
			case INTNUM:
			case OPEN:
				{
				State = 503; @int();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 506; memset();
			State = 507; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemsetContext : ParserRuleContext {
		public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		public MemsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memset; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMemset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMemset(this);
		}
	}

	[RuleVersion(0)]
	public MemsetContext memset() {
		MemsetContext _localctx = new MemsetContext(Context, State);
		EnterRule(_localctx, 72, RULE_memset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 509; tuple();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 74, RULE_tuple);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511; Match(OPEN);
			State = 512; Match(T__40);
			State = 513; @int();
			State = 514; cstorage();
			State = 515; Match(T__41);
			State = 516; var();
			State = 517; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 76, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 519; Match(T__42);
			State = 520; namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocpreContext : ParserRuleContext {
		public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public LocpreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locpre; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLocpre(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLocpre(this);
		}
	}

	[RuleVersion(0)]
	public LocpreContext locpre() {
		LocpreContext _localctx = new LocpreContext(Context, State);
		EnterRule(_localctx, 78, RULE_locpre);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525;
			switch (TokenStream.La(1)) {
			case T__0:
				{
				State = 522; Match(T__0);
				}
				break;
			case OPEN:
				{
				State = 523; whop();
				}
				break;
			case T__42:
				{
				State = 524; var();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocdescContext : ParserRuleContext {
		public LocdescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locdesc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLocdesc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLocdesc(this);
		}
	}

	[RuleVersion(0)]
	public LocdescContext locdesc() {
		LocdescContext _localctx = new LocdescContext(Context, State);
		EnterRule(_localctx, 80, RULE_locdesc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhoContext : ParserRuleContext {
		public WhotContext whot() {
			return GetRuleContext<WhotContext>(0);
		}
		public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public WhoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_who; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWho(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWho(this);
		}
	}

	[RuleVersion(0)]
	public WhoContext who() {
		WhoContext _localctx = new WhoContext(Context, State);
		EnterRule(_localctx, 82, RULE_who);
		try {
			State = 531;
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 529; whot();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 530; whop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhopContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public WhodescContext whodesc() {
			return GetRuleContext<WhodescContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OwnerContext owner() {
			return GetRuleContext<OwnerContext>(0);
		}
		public WhopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhop(this);
		}
	}

	[RuleVersion(0)]
	public WhopContext whop() {
		WhopContext _localctx = new WhopContext(Context, State);
		EnterRule(_localctx, 84, RULE_whop);
		try {
			State = 539;
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 533; Match(OPEN);
				State = 534; whodesc();
				State = 535; Match(T__3);
				State = 536; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 538; owner();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhotContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public WhodescContext whodesc() {
			return GetRuleContext<WhodescContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TeampContext teamp() {
			return GetRuleContext<TeampContext>(0);
		}
		public WhotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whot; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhot(this);
		}
	}

	[RuleVersion(0)]
	public WhotContext whot() {
		WhotContext _localctx = new WhotContext(Context, State);
		EnterRule(_localctx, 86, RULE_whot);
		try {
			State = 547;
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 541; Match(OPEN);
				State = 542; whodesc();
				State = 543; Match(T__4);
				State = 544; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 546; teamp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhodescContext : ParserRuleContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public WhodescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whodesc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhodesc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhodesc(this);
		}
	}

	[RuleVersion(0)]
	public WhodescContext whodesc() {
		WhodescContext _localctx = new WhodescContext(Context, State);
		EnterRule(_localctx, 88, RULE_whodesc);
		try {
			State = 553;
			switch (TokenStream.La(1)) {
			case T__42:
			case INTNUM:
			case OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 549; @int();
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 2);
				{
				State = 550; Match(T__25);
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 3);
				{
				State = 551; Match(T__23);
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 4);
				{
				State = 552; Match(T__24);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OwnerContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OwnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_owner; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterOwner(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitOwner(this);
		}
	}

	[RuleVersion(0)]
	public OwnerContext owner() {
		OwnerContext _localctx = new OwnerContext(Context, State);
		EnterRule(_localctx, 90, RULE_owner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 555; Match(OPEN);
			State = 556; Match(T__47);
			State = 557; card();
			State = 558; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeampContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TeampContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeamp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeamp(this);
		}
	}

	[RuleVersion(0)]
	public TeampContext teamp() {
		TeampContext _localctx = new TeampContext(Context, State);
		EnterRule(_localctx, 92, RULE_teamp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560; Match(OPEN);
			State = 561; Match(T__4);
			State = 562; whop();
			State = 563; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OtherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterOther(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitOther(this);
		}
	}

	[RuleVersion(0)]
	public OtherContext other() {
		OtherContext _localctx = new OtherContext(Context, State);
		EnterRule(_localctx, 94, RULE_other);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565; Match(OPEN);
			State = 566; Match(T__48);
			State = 567;
			_la = TokenStream.La(1);
			if ( !(_la==T__3 || _la==T__4) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 568; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedContext : ParserRuleContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public TypedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTyped(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTyped(this);
		}
	}

	[RuleVersion(0)]
	public TypedContext typed() {
		TypedContext _localctx = new TypedContext(Context, State);
		EnterRule(_localctx, 96, RULE_typed);
		try {
			State = 575;
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 570; @int();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 571; boolean();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 572; namegr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 573; var();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 574; collection();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionContext : ParserRuleContext {
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public StrcollectionContext strcollection() {
			return GetRuleContext<StrcollectionContext>(0);
		}
		public CstoragecollectionContext cstoragecollection() {
			return GetRuleContext<CstoragecollectionContext>(0);
		}
		public WhotContext whot() {
			return GetRuleContext<WhotContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public OtherContext other() {
			return GetRuleContext<OtherContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		public CollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCollection(this);
		}
	}

	[RuleVersion(0)]
	public CollectionContext collection() {
		CollectionContext _localctx = new CollectionContext(Context, State);
		EnterRule(_localctx, 98, RULE_collection);
		try {
			State = 587;
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 577; cstorage();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 578; strcollection();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 579; cstoragecollection();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 580; Match(T__3);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 581; Match(T__4);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 582; whot();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 583; var();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 584; other();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 585; range();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 586; filter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrcollectionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public StrcollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strcollection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterStrcollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitStrcollection(this);
		}
	}

	[RuleVersion(0)]
	public StrcollectionContext strcollection() {
		StrcollectionContext _localctx = new StrcollectionContext(Context, State);
		EnterRule(_localctx, 100, RULE_strcollection);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 589; Match(OPEN);
			State = 595;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 590; namegr();
					State = 591; Match(T__19);
					}
					} 
				}
				State = 597;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			}
			State = 598; namegr();
			State = 599; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CstoragecollectionContext : ParserRuleContext {
		public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public CstoragecollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cstoragecollection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCstoragecollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCstoragecollection(this);
		}
	}

	[RuleVersion(0)]
	public CstoragecollectionContext cstoragecollection() {
		CstoragecollectionContext _localctx = new CstoragecollectionContext(Context, State);
		EnterRule(_localctx, 102, RULE_cstoragecollection);
		try {
			State = 604;
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 601; memset();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 602; agg();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 603; let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 104, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 606; Match(OPEN);
			State = 607; Match(T__49);
			State = 608; @int();
			State = 609; Match(T__50);
			State = 610; @int();
			State = 611; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterFilter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitFilter(this);
		}
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(Context, State);
		EnterRule(_localctx, 106, RULE_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 613; Match(OPEN);
			State = 614; Match(T__51);
			State = 615; collection();
			State = 616; var();
			State = 617; boolean();
			State = 618; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrcompContext : ParserRuleContext {
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public CardattContext[] cardatt() {
			return GetRuleContexts<CardattContext>();
		}
		public CardattContext cardatt(int i) {
			return GetRuleContext<CardattContext>(i);
		}
		public AttrcompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrcomp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAttrcomp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAttrcomp(this);
		}
	}

	[RuleVersion(0)]
	public AttrcompContext attrcomp() {
		AttrcompContext _localctx = new AttrcompContext(Context, State);
		EnterRule(_localctx, 108, RULE_attrcomp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 620; Match(EQOP);
			State = 621; cardatt();
			State = 622; cardatt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardattContext : ParserRuleContext {
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public CardattContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cardatt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCardatt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCardatt(this);
		}
	}

	[RuleVersion(0)]
	public CardattContext cardatt() {
		CardattContext _localctx = new CardattContext(Context, State);
		EnterRule(_localctx, 110, RULE_cardatt);
		try {
			State = 635;
			switch (TokenStream.La(1)) {
			case LETT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 624; namegr();
				}
				break;
			case T__42:
				EnterOuterAlt(_localctx, 2);
				{
				State = 625; var();
				}
				break;
			case OPEN:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 626; Match(OPEN);
				State = 627; Match(T__52);
				State = 630;
				switch (TokenStream.La(1)) {
				case T__42:
					{
					State = 628; var();
					}
					break;
				case LETT:
					{
					State = 629; namegr();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 632; card();
				State = 633; Match(CLOSE);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AttrcompContext attrcomp() {
			return GetRuleContext<AttrcompContext>(0);
		}
		public ITerminalNode BOOLOP() { return GetToken(RecycleParser.BOOLOP, 0); }
		public BooleanContext[] boolean() {
			return GetRuleContexts<BooleanContext>();
		}
		public BooleanContext boolean(int i) {
			return GetRuleContext<BooleanContext>(i);
		}
		public IntopContext intop() {
			return GetRuleContext<IntopContext>(0);
		}
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public ITerminalNode UNOP() { return GetToken(RecycleParser.UNOP, 0); }
		public WhopContext[] whop() {
			return GetRuleContexts<WhopContext>();
		}
		public WhopContext whop(int i) {
			return GetRuleContext<WhopContext>(i);
		}
		public WhotContext[] whot() {
			return GetRuleContexts<WhotContext>();
		}
		public WhotContext whot(int i) {
			return GetRuleContext<WhotContext>(i);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 112, RULE_boolean);
		try {
			int _alt;
			State = 669;
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 637; Match(OPEN);
				State = 664;
				switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
				case 1:
					{
					{
					State = 638; Match(BOOLOP);
					State = 639; boolean();
					State = 641;
					ErrorHandler.Sync(this);
					_alt = 1+1;
					do {
						switch (_alt) {
						case 1+1:
							{
							{
							State = 640; boolean();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 643;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
					} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					}
					break;
				case 2:
					{
					{
					State = 645; intop();
					State = 646; @int();
					State = 647; @int();
					}
					}
					break;
				case 3:
					{
					State = 649; attrcomp();
					}
					break;
				case 4:
					{
					{
					State = 650; Match(EQOP);
					State = 651; card();
					State = 652; card();
					}
					}
					break;
				case 5:
					{
					{
					State = 654; Match(UNOP);
					State = 655; boolean();
					}
					}
					break;
				case 6:
					{
					{
					State = 656; Match(EQOP);
					State = 657; whop();
					State = 658; whop();
					}
					}
					break;
				case 7:
					{
					{
					State = 660; Match(EQOP);
					State = 661; whot();
					State = 662; whot();
					}
					}
					break;
				}
				State = 666; Match(CLOSE);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 668; agg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntopContext : ParserRuleContext {
		public ITerminalNode COMPOP() { return GetToken(RecycleParser.COMPOP, 0); }
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public IntopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterIntop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitIntop(this);
		}
	}

	[RuleVersion(0)]
	public IntopContext intop() {
		IntopContext _localctx = new IntopContext(Context, State);
		EnterRule(_localctx, 114, RULE_intop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 671;
			_la = TokenStream.La(1);
			if ( !(_la==COMPOP || _la==EQOP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
	}

	[RuleVersion(0)]
	public AddContext add() {
		AddContext _localctx = new AddContext(Context, State);
		EnterRule(_localctx, 116, RULE_add);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 673; Match(OPEN);
			State = 674; Match(T__53);
			State = 675; @int();
			State = 676; @int();
			State = 677; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMult(this);
		}
	}

	[RuleVersion(0)]
	public MultContext mult() {
		MultContext _localctx = new MultContext(Context, State);
		EnterRule(_localctx, 118, RULE_mult);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 679; Match(OPEN);
			State = 680; Match(T__54);
			State = 681; @int();
			State = 682; @int();
			State = 683; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtractContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubtractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtract; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSubtract(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSubtract(this);
		}
	}

	[RuleVersion(0)]
	public SubtractContext subtract() {
		SubtractContext _localctx = new SubtractContext(Context, State);
		EnterRule(_localctx, 120, RULE_subtract);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 685; Match(OPEN);
			State = 686; Match(T__55);
			State = 687; @int();
			State = 688; @int();
			State = 689; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMod(this);
		}
	}

	[RuleVersion(0)]
	public ModContext mod() {
		ModContext _localctx = new ModContext(Context, State);
		EnterRule(_localctx, 122, RULE_mod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 691; Match(OPEN);
			State = 692; Match(T__56);
			State = 693; @int();
			State = 694; @int();
			State = 695; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivideContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divide; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDivide(this);
		}
	}

	[RuleVersion(0)]
	public DivideContext divide() {
		DivideContext _localctx = new DivideContext(Context, State);
		EnterRule(_localctx, 124, RULE_divide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 697; Match(OPEN);
			State = 698; Match(T__57);
			State = 699; @int();
			State = 700; @int();
			State = 701; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public SizeofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSizeof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSizeof(this);
		}
	}

	[RuleVersion(0)]
	public SizeofContext @sizeof() {
		SizeofContext _localctx = new SizeofContext(Context, State);
		EnterRule(_localctx, 126, RULE_sizeof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 703; Match(OPEN);
			State = 704; Match(T__58);
			State = 708;
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 705; cstorage();
				}
				break;
			case 2:
				{
				State = 706; memset();
				}
				break;
			case 3:
				{
				State = 707; var();
				}
				break;
			}
			State = 710; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaxofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MaxofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMaxof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMaxof(this);
		}
	}

	[RuleVersion(0)]
	public MaxofContext maxof() {
		MaxofContext _localctx = new MaxofContext(Context, State);
		EnterRule(_localctx, 128, RULE_maxof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 712; Match(OPEN);
			State = 713; Match(T__7);
			State = 714; cstorage();
			State = 715; Match(T__41);
			State = 716; var();
			State = 717; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MinofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMinof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMinof(this);
		}
	}

	[RuleVersion(0)]
	public MinofContext minof() {
		MinofContext _localctx = new MinofContext(Context, State);
		EnterRule(_localctx, 130, RULE_minof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 719; Match(OPEN);
			State = 720; Match(T__6);
			State = 721; cstorage();
			State = 722; Match(T__41);
			State = 723; var();
			State = 724; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public CstorageContext[] cstorage() {
			return GetRuleContexts<CstorageContext>();
		}
		public CstorageContext cstorage(int i) {
			return GetRuleContext<CstorageContext>(i);
		}
		public UnionofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterUnionof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitUnionof(this);
		}
	}

	[RuleVersion(0)]
	public UnionofContext unionof() {
		UnionofContext _localctx = new UnionofContext(Context, State);
		EnterRule(_localctx, 132, RULE_unionof);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 726; Match(OPEN);
			State = 727; Match(T__59);
			State = 734;
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 729;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 728; cstorage();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 731;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			case 2:
				{
				State = 733; agg();
				}
				break;
			}
			State = 736; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSum(this);
		}
	}

	[RuleVersion(0)]
	public SumContext sum() {
		SumContext _localctx = new SumContext(Context, State);
		EnterRule(_localctx, 134, RULE_sum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 738; Match(OPEN);
			State = 739; Match(T__60);
			State = 740; cstorage();
			State = 741; Match(T__41);
			State = 742; var();
			State = 743; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoreContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ScoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_score; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterScore(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitScore(this);
		}
	}

	[RuleVersion(0)]
	public ScoreContext score() {
		ScoreContext _localctx = new ScoreContext(Context, State);
		EnterRule(_localctx, 136, RULE_score);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 745; Match(OPEN);
			State = 746; Match(T__61);
			State = 747; card();
			State = 748; Match(T__41);
			State = 749; var();
			State = 750; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		public SizeofContext @sizeof() {
			return GetRuleContext<SizeofContext>(0);
		}
		public MultContext mult() {
			return GetRuleContext<MultContext>(0);
		}
		public SubtractContext subtract() {
			return GetRuleContext<SubtractContext>(0);
		}
		public ModContext mod() {
			return GetRuleContext<ModContext>(0);
		}
		public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public ScoreContext score() {
			return GetRuleContext<ScoreContext>(0);
		}
		public ITerminalNode[] INTNUM() { return GetTokens(RecycleParser.INTNUM); }
		public ITerminalNode INTNUM(int i) {
			return GetToken(RecycleParser.INTNUM, i);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 138, RULE_int);
		try {
			int _alt;
			State = 767;
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 752; @sizeof();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 753; mult();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 754; subtract();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 755; mod();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 756; add();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 757; divide();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 758; sum();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 759; rawstorage();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 760; score();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 762;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 761; Match(INTNUM);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 764;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 766; var();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamegrContext : ParserRuleContext {
		public ITerminalNode[] LETT() { return GetTokens(RecycleParser.LETT); }
		public ITerminalNode LETT(int i) {
			return GetToken(RecycleParser.LETT, i);
		}
		public NamegrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namegr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterNamegr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitNamegr(this);
		}
	}

	[RuleVersion(0)]
	public NamegrContext namegr() {
		NamegrContext _localctx = new NamegrContext(Context, State);
		EnterRule(_localctx, 140, RULE_namegr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 770;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 769; Match(LETT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 772;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3J\x309\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x3\x2\x3\x2\x3\x2\a\x2\x94\n\x2\f\x2\xE\x2"+
		"\x97\v\x2\x3\x2\x3\x2\x3\x2\x6\x2\x9C\n\x2\r\x2\xE\x2\x9D\x3\x2\x3\x2"+
		"\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\xAC"+
		"\n\x3\x3\x3\x3\x3\x6\x3\xB0\n\x3\r\x3\xE\x3\xB1\x3\x3\x3\x3\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x6\x4\xBC\n\x4\r\x4\xE\x4\xBD\x3\x4\x3\x4\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\xDA\n\a"+
		"\x3\a\x3\a\x3\a\x5\a\xDF\n\a\x3\b\x3\b\x3\b\x3\b\x6\b\xE5\n\b\r\b\xE\b"+
		"\xE6\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x6\b\xF0\n\b\r\b\xE\b\xF1\x3\b"+
		"\x3\b\x3\b\x3\b\x3\b\x5\b\xF9\n\b\x3\t\x3\t\x3\t\x3\t\x6\t\xFF\n\t\r\t"+
		"\xE\t\x100\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x108\n\t\x3\n\x3\n\x3\n\x3\n"+
		"\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x116\n\n\x3\v\x3\v\x3\v"+
		"\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\x121\n\v\x3\v\x3\v\x3\f\x3\f\x3\f"+
		"\x3\f\x3\f\x3\f\x3\f\x5\f\x12C\n\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r"+
		"\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x13B\n\xE\x3\xE\x3\xE\x3\xF"+
		"\x3\xF\x3\xF\x6\xF\x142\n\xF\r\xF\xE\xF\x143\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x11\x3\x11\x3\x11\x6\x11\x14E\n\x11\r\x11\xE\x11\x14F\x3\x11"+
		"\x3\x11\x3\x12\x3\x12\x3\x12\a\x12\x157\n\x12\f\x12\xE\x12\x15A\v\x12"+
		"\x3\x12\x3\x12\a\x12\x15E\n\x12\f\x12\xE\x12\x161\v\x12\x3\x12\x3\x12"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\a\x13\x16A\n\x13\f\x13\xE\x13\x16D"+
		"\v\x13\x3\x13\x3\x13\a\x13\x171\n\x13\f\x13\xE\x13\x174\v\x13\x3\x13\x3"+
		"\x13\x5\x13\x178\n\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x6\x14\x17F"+
		"\n\x14\r\x14\xE\x14\x180\x3\x14\x3\x14\x3\x15\x3\x15\x6\x15\x187\n\x15"+
		"\r\x15\xE\x15\x188\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x5\x16\x195\n\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x3\x17\x5\x17\x19F\n\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x19\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3 \x3 \x3 \x3 \x5 \x1C5"+
		"\n \x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x5!\x1CF\n!\x3!\x3!\x3!\x5!\x1D4\n"+
		"!\x3\"\x3\"\x3\"\x3\"\x3\"\x3#\x3#\x3#\x3#\x5#\x1DF\n#\x3#\x3#\x3#\x5"+
		"#\x1E4\n#\x3#\x3#\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x5$\x1EF\n$\x3$\x3$\x3$"+
		"\x3$\x5$\x1F5\n$\x3%\x3%\x3%\x3%\x5%\x1FB\n%\x3%\x3%\x3%\x3&\x3&\x3\'"+
		"\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3(\x3(\x3(\x3)\x3)\x3)\x5)\x210\n"+
		")\x3*\x3*\x3+\x3+\x5+\x216\n+\x3,\x3,\x3,\x3,\x3,\x3,\x5,\x21E\n,\x3-"+
		"\x3-\x3-\x3-\x3-\x3-\x5-\x226\n-\x3.\x3.\x3.\x3.\x5.\x22C\n.\x3/\x3/\x3"+
		"/\x3/\x3/\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31\x3\x31"+
		"\x3\x31\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32\x242\n\x32\x3\x33\x3"+
		"\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x5\x33\x24E"+
		"\n\x33\x3\x34\x3\x34\x3\x34\x3\x34\a\x34\x254\n\x34\f\x34\xE\x34\x257"+
		"\v\x34\x3\x34\x3\x34\x3\x34\x3\x35\x3\x35\x3\x35\x5\x35\x25F\n\x35\x3"+
		"\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x37\x3\x37\x3\x37\x3"+
		"\x37\x3\x37\x3\x37\x3\x37\x3\x38\x3\x38\x3\x38\x3\x38\x3\x39\x3\x39\x3"+
		"\x39\x3\x39\x3\x39\x3\x39\x5\x39\x279\n\x39\x3\x39\x3\x39\x3\x39\x5\x39"+
		"\x27E\n\x39\x3:\x3:\x3:\x3:\x6:\x284\n:\r:\xE:\x285\x3:\x3:\x3:\x3:\x3"+
		":\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x5:\x29B\n:"+
		"\x3:\x3:\x3:\x5:\x2A0\n:\x3;\x3;\x3<\x3<\x3<\x3<\x3<\x3<\x3=\x3=\x3=\x3"+
		"=\x3=\x3=\x3>\x3>\x3>\x3>\x3>\x3>\x3?\x3?\x3?\x3?\x3?\x3?\x3@\x3@\x3@"+
		"\x3@\x3@\x3@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x2C7\n\x41\x3\x41"+
		"\x3\x41\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x43\x3\x43"+
		"\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x44\x3\x44\x3\x44\x6\x44\x2DC\n"+
		"\x44\r\x44\xE\x44\x2DD\x3\x44\x5\x44\x2E1\n\x44\x3\x44\x3\x44\x3\x45\x3"+
		"\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x46\x3\x46\x3\x46\x3\x46\x3"+
		"\x46\x3\x46\x3\x46\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x6G\x2FD\n"+
		"G\rG\xEG\x2FE\x3G\x5G\x302\nG\x3H\x6H\x305\nH\rH\xEH\x306\x3H\x14\x95"+
		"\x9D\xB1\xBD\xE6\xF1\x100\x143\x14F\x158\x15F\x16B\x172\x180\x188\x255"+
		"\x285\x2DD\x2I\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&"+
		"(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66hjl"+
		"nprtvxz|~\x80\x82\x84\x86\x88\x8A\x8C\x8E\x2\b\x3\x2\x6\a\x3\x2\t\n\x3"+
		"\x2\xE\xF\x3\x2\x1A\x1B\x3\x2.\x31\x3\x2\x42\x43\x338\x2\x90\x3\x2\x2"+
		"\x2\x4\xA2\x3\x2\x2\x2\x6\xB5\x3\x2\x2\x2\b\xC1\x3\x2\x2\x2\n\xC6\x3\x2"+
		"\x2\x2\f\xDE\x3\x2\x2\x2\xE\xF8\x3\x2\x2\x2\x10\x107\x3\x2\x2\x2\x12\x115"+
		"\x3\x2\x2\x2\x14\x117\x3\x2\x2\x2\x16\x124\x3\x2\x2\x2\x18\x12F\x3\x2"+
		"\x2\x2\x1A\x135\x3\x2\x2\x2\x1C\x13E\x3\x2\x2\x2\x1E\x145\x3\x2\x2\x2"+
		" \x14A\x3\x2\x2\x2\"\x153\x3\x2\x2\x2$\x177\x3\x2\x2\x2&\x179\x3\x2\x2"+
		"\x2(\x184\x3\x2\x2\x2*\x18D\x3\x2\x2\x2,\x198\x3\x2\x2\x2.\x1A0\x3\x2"+
		"\x2\x2\x30\x1A4\x3\x2\x2\x2\x32\x1A8\x3\x2\x2\x2\x34\x1AC\x3\x2\x2\x2"+
		"\x36\x1B0\x3\x2\x2\x2\x38\x1B4\x3\x2\x2\x2:\x1B7\x3\x2\x2\x2<\x1BA\x3"+
		"\x2\x2\x2>\x1C4\x3\x2\x2\x2@\x1D3\x3\x2\x2\x2\x42\x1D5\x3\x2\x2\x2\x44"+
		"\x1DA\x3\x2\x2\x2\x46\x1F4\x3\x2\x2\x2H\x1F6\x3\x2\x2\x2J\x1FF\x3\x2\x2"+
		"\x2L\x201\x3\x2\x2\x2N\x209\x3\x2\x2\x2P\x20F\x3\x2\x2\x2R\x211\x3\x2"+
		"\x2\x2T\x215\x3\x2\x2\x2V\x21D\x3\x2\x2\x2X\x225\x3\x2\x2\x2Z\x22B\x3"+
		"\x2\x2\x2\\\x22D\x3\x2\x2\x2^\x232\x3\x2\x2\x2`\x237\x3\x2\x2\x2\x62\x241"+
		"\x3\x2\x2\x2\x64\x24D\x3\x2\x2\x2\x66\x24F\x3\x2\x2\x2h\x25E\x3\x2\x2"+
		"\x2j\x260\x3\x2\x2\x2l\x267\x3\x2\x2\x2n\x26E\x3\x2\x2\x2p\x27D\x3\x2"+
		"\x2\x2r\x29F\x3\x2\x2\x2t\x2A1\x3\x2\x2\x2v\x2A3\x3\x2\x2\x2x\x2A9\x3"+
		"\x2\x2\x2z\x2AF\x3\x2\x2\x2|\x2B5\x3\x2\x2\x2~\x2BB\x3\x2\x2\x2\x80\x2C1"+
		"\x3\x2\x2\x2\x82\x2CA\x3\x2\x2\x2\x84\x2D1\x3\x2\x2\x2\x86\x2D8\x3\x2"+
		"\x2\x2\x88\x2E4\x3\x2\x2\x2\x8A\x2EB\x3\x2\x2\x2\x8C\x301\x3\x2\x2\x2"+
		"\x8E\x304\x3\x2\x2\x2\x90\x91\aG\x2\x2\x91\x95\a\x3\x2\x2\x92\x94\x5\x18"+
		"\r\x2\x93\x92\x3\x2\x2\x2\x94\x97\x3\x2\x2\x2\x95\x96\x3\x2\x2\x2\x95"+
		"\x93\x3\x2\x2\x2\x96\x98\x3\x2\x2\x2\x97\x95\x3\x2\x2\x2\x98\x9B\x5\x4"+
		"\x3\x2\x99\x9C\x5\xE\b\x2\x9A\x9C\x5\x6\x4\x2\x9B\x99\x3\x2\x2\x2\x9B"+
		"\x9A\x3\x2\x2\x2\x9C\x9D\x3\x2\x2\x2\x9D\x9E\x3\x2\x2\x2\x9D\x9B\x3\x2"+
		"\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F\xA0\x5\b\x5\x2\xA0\xA1\aH\x2\x2\xA1\x3"+
		"\x3\x2\x2\x2\xA2\xA3\aG\x2\x2\xA3\xA4\a\x4\x2\x2\xA4\xA5\x5\x1A\xE\x2"+
		"\xA5\xA6\aG\x2\x2\xA6\xA7\x5\x1C\xF\x2\xA7\xAF\aH\x2\x2\xA8\xAB\aG\x2"+
		"\x2\xA9\xAC\x5\x1E\x10\x2\xAA\xAC\x5> \x2\xAB\xA9\x3\x2\x2\x2\xAB\xAA"+
		"\x3\x2\x2\x2\xAC\xAD\x3\x2\x2\x2\xAD\xAE\aH\x2\x2\xAE\xB0\x3\x2\x2\x2"+
		"\xAF\xA8\x3\x2\x2\x2\xB0\xB1\x3\x2\x2\x2\xB1\xB2\x3\x2\x2\x2\xB1\xAF\x3"+
		"\x2\x2\x2\xB2\xB3\x3\x2\x2\x2\xB3\xB4\aH\x2\x2\xB4\x5\x3\x2\x2\x2\xB5"+
		"\xB6\aG\x2\x2\xB6\xB7\a\x5\x2\x2\xB7\xB8\t\x2\x2\x2\xB8\xBB\x5\n\x6\x2"+
		"\xB9\xBC\x5\xE\b\x2\xBA\xBC\x5\x6\x4\x2\xBB\xB9\x3\x2\x2\x2\xBB\xBA\x3"+
		"\x2\x2\x2\xBC\xBD\x3\x2\x2\x2\xBD\xBE\x3\x2\x2\x2\xBD\xBB\x3\x2\x2\x2"+
		"\xBE\xBF\x3\x2\x2\x2\xBF\xC0\aH\x2\x2\xC0\a\x3\x2\x2\x2\xC1\xC2\aG\x2"+
		"\x2\xC2\xC3\a\b\x2\x2\xC3\xC4\t\x3\x2\x2\xC4\xC5\x5\x8CG\x2\xC5\t\x3\x2"+
		"\x2\x2\xC6\xC7\aG\x2\x2\xC7\xC8\a\v\x2\x2\xC8\xC9\x5r:\x2\xC9\xCA\aH\x2"+
		"\x2\xCA\v\x3\x2\x2\x2\xCB\xD9\aG\x2\x2\xCC\xDA\x5&\x14\x2\xCD\xDA\x5\x1C"+
		"\xF\x2\xCE\xDA\x5\x1E\x10\x2\xCF\xDA\x5,\x17\x2\xD0\xDA\x5.\x18\x2\xD1"+
		"\xDA\x5\x34\x1B\x2\xD2\xDA\x5\x36\x1C\x2\xD3\xDA\x5\x30\x19\x2\xD4\xDA"+
		"\x5\x32\x1A\x2\xD5\xDA\x5\x38\x1D\x2\xD6\xDA\x5<\x1F\x2\xD7\xDA\x5:\x1E"+
		"\x2\xD8\xDA\x5> \x2\xD9\xCC\x3\x2\x2\x2\xD9\xCD\x3\x2\x2\x2\xD9\xCE\x3"+
		"\x2\x2\x2\xD9\xCF\x3\x2\x2\x2\xD9\xD0\x3\x2\x2\x2\xD9\xD1\x3\x2\x2\x2"+
		"\xD9\xD2\x3\x2\x2\x2\xD9\xD3\x3\x2\x2\x2\xD9\xD4\x3\x2\x2\x2\xD9\xD5\x3"+
		"\x2\x2\x2\xD9\xD6\x3\x2\x2\x2\xD9\xD7\x3\x2\x2\x2\xD9\xD8\x3\x2\x2\x2"+
		"\xDA\xDB\x3\x2\x2\x2\xDB\xDC\aH\x2\x2\xDC\xDF\x3\x2\x2\x2\xDD\xDF\x5\x14"+
		"\v\x2\xDE\xCB\x3\x2\x2\x2\xDE\xDD\x3\x2\x2\x2\xDF\r\x3\x2\x2\x2\xE0\xE1"+
		"\aG\x2\x2\xE1\xE2\a\f\x2\x2\xE2\xE4\aG\x2\x2\xE3\xE5\x5\x12\n\x2\xE4\xE3"+
		"\x3\x2\x2\x2\xE5\xE6\x3\x2\x2\x2\xE6\xE7\x3\x2\x2\x2\xE6\xE4\x3\x2\x2"+
		"\x2\xE7\xE8\x3\x2\x2\x2\xE8\xE9\aH\x2\x2\xE9\xEA\aH\x2\x2\xEA\xF9\x3\x2"+
		"\x2\x2\xEB\xEC\aG\x2\x2\xEC\xED\a\r\x2\x2\xED\xEF\aG\x2\x2\xEE\xF0\x5"+
		"\x12\n\x2\xEF\xEE\x3\x2\x2\x2\xF0\xF1\x3\x2\x2\x2\xF1\xF2\x3\x2\x2\x2"+
		"\xF1\xEF\x3\x2\x2\x2\xF2\xF3\x3\x2\x2\x2\xF3\xF4\aH\x2\x2\xF4\xF5\aH\x2"+
		"\x2\xF5\xF9\x3\x2\x2\x2\xF6\xF9\x5\x14\v\x2\xF7\xF9\x5\x16\f\x2\xF8\xE0"+
		"\x3\x2\x2\x2\xF8\xEB\x3\x2\x2\x2\xF8\xF6\x3\x2\x2\x2\xF8\xF7\x3\x2\x2"+
		"\x2\xF9\xF\x3\x2\x2\x2\xFA\xFB\aG\x2\x2\xFB\xFC\a\r\x2\x2\xFC\xFE\aG\x2"+
		"\x2\xFD\xFF\x5\x12\n\x2\xFE\xFD\x3\x2\x2\x2\xFF\x100\x3\x2\x2\x2\x100"+
		"\x101\x3\x2\x2\x2\x100\xFE\x3\x2\x2\x2\x101\x102\x3\x2\x2\x2\x102\x103"+
		"\aH\x2\x2\x103\x104\aH\x2\x2\x104\x108\x3\x2\x2\x2\x105\x108\x5\x14\v"+
		"\x2\x106\x108\x5\x16\f\x2\x107\xFA\x3\x2\x2\x2\x107\x105\x3\x2\x2\x2\x107"+
		"\x106\x3\x2\x2\x2\x108\x11\x3\x2\x2\x2\x109\x10A\aG\x2\x2\x10A\x10B\x5"+
		"r:\x2\x10B\x10C\x5\x10\t\x2\x10C\x10D\aH\x2\x2\x10D\x116\x3\x2\x2\x2\x10E"+
		"\x116\x5\x10\t\x2\x10F\x110\aG\x2\x2\x110\x111\x5r:\x2\x111\x112\x5\f"+
		"\a\x2\x112\x113\aH\x2\x2\x113\x116\x3\x2\x2\x2\x114\x116\x5\f\a\x2\x115"+
		"\x109\x3\x2\x2\x2\x115\x10E\x3\x2\x2\x2\x115\x10F\x3\x2\x2\x2\x115\x114"+
		"\x3\x2\x2\x2\x116\x13\x3\x2\x2\x2\x117\x118\aG\x2\x2\x118\x119\t\x4\x2"+
		"\x2\x119\x11A\x5\x64\x33\x2\x11A\x120\x5N(\x2\x11B\x121\x5\x10\t\x2\x11C"+
		"\x121\x5\f\a\x2\x11D\x121\x5r:\x2\x11E\x121\x5\x46$\x2\x11F\x121\x5\x44"+
		"#\x2\x120\x11B\x3\x2\x2\x2\x120\x11C\x3\x2\x2\x2\x120\x11D\x3\x2\x2\x2"+
		"\x120\x11E\x3\x2\x2\x2\x120\x11F\x3\x2\x2\x2\x121\x122\x3\x2\x2\x2\x122"+
		"\x123\aH\x2\x2\x123\x15\x3\x2\x2\x2\x124\x125\aG\x2\x2\x125\x126\a\x10"+
		"\x2\x2\x126\x127\x5\x62\x32\x2\x127\x12B\x5N(\x2\x128\x12C\x5\x10\t\x2"+
		"\x129\x12C\x5\f\a\x2\x12A\x12C\x5\x12\n\x2\x12B\x128\x3\x2\x2\x2\x12B"+
		"\x129\x3\x2\x2\x2\x12B\x12A\x3\x2\x2\x2\x12C\x12D\x3\x2\x2\x2\x12D\x12E"+
		"\aH\x2\x2\x12E\x17\x3\x2\x2\x2\x12F\x130\aG\x2\x2\x130\x131\a\x11\x2\x2"+
		"\x131\x132\x5\x62\x32\x2\x132\x133\x5N(\x2\x133\x134\aH\x2\x2\x134\x19"+
		"\x3\x2\x2\x2\x135\x136\aG\x2\x2\x136\x137\a\x12\x2\x2\x137\x13A\a\x13"+
		"\x2\x2\x138\x13B\x5\x8CG\x2\x139\x13B\x5N(\x2\x13A\x138\x3\x2\x2\x2\x13A"+
		"\x139\x3\x2\x2\x2\x13B\x13C\x3\x2\x2\x2\x13C\x13D\aH\x2\x2\x13D\x1B\x3"+
		"\x2\x2\x2\x13E\x13F\a\x12\x2\x2\x13F\x141\a\x14\x2\x2\x140\x142\x5\"\x12"+
		"\x2\x141\x140\x3\x2\x2\x2\x142\x143\x3\x2\x2\x2\x143\x144\x3\x2\x2\x2"+
		"\x143\x141\x3\x2\x2\x2\x144\x1D\x3\x2\x2\x2\x145\x146\a\x12\x2\x2\x146"+
		"\x147\a\x15\x2\x2\x147\x148\x5\x46$\x2\x148\x149\x5 \x11\x2\x149\x1F\x3"+
		"\x2\x2\x2\x14A\x14B\aG\x2\x2\x14B\x14D\a\x15\x2\x2\x14C\x14E\x5$\x13\x2"+
		"\x14D\x14C\x3\x2\x2\x2\x14E\x14F\x3\x2\x2\x2\x14F\x150\x3\x2\x2\x2\x14F"+
		"\x14D\x3\x2\x2\x2\x150\x151\x3\x2\x2\x2\x151\x152\aH\x2\x2\x152!\x3\x2"+
		"\x2\x2\x153\x158\aG\x2\x2\x154\x155\a\x45\x2\x2\x155\x157\a\x16\x2\x2"+
		"\x156\x154\x3\x2\x2\x2\x157\x15A\x3\x2\x2\x2\x158\x159\x3\x2\x2\x2\x158"+
		"\x156\x3\x2\x2\x2\x159\x15B\x3\x2\x2\x2\x15A\x158\x3\x2\x2\x2\x15B\x15F"+
		"\a\x45\x2\x2\x15C\x15E\x5\"\x12\x2\x15D\x15C\x3\x2\x2\x2\x15E\x161\x3"+
		"\x2\x2\x2\x15F\x160\x3\x2\x2\x2\x15F\x15D\x3\x2\x2\x2\x160\x162\x3\x2"+
		"\x2\x2\x161\x15F\x3\x2\x2\x2\x162\x163\aH\x2\x2\x163#\x3\x2\x2\x2\x164"+
		"\x178\x5N(\x2\x165\x16B\aG\x2\x2\x166\x167\x5\x8EH\x2\x167\x168\a\x16"+
		"\x2\x2\x168\x16A\x3\x2\x2\x2\x169\x166\x3\x2\x2\x2\x16A\x16D\x3\x2\x2"+
		"\x2\x16B\x16C\x3\x2\x2\x2\x16B\x169\x3\x2\x2\x2\x16C\x16E\x3\x2\x2\x2"+
		"\x16D\x16B\x3\x2\x2\x2\x16E\x172\x5\x8EH\x2\x16F\x171\x5$\x13\x2\x170"+
		"\x16F\x3\x2\x2\x2\x171\x174\x3\x2\x2\x2\x172\x173\x3\x2\x2\x2\x172\x170"+
		"\x3\x2\x2\x2\x173\x175\x3\x2\x2\x2\x174\x172\x3\x2\x2\x2\x175\x176\aH"+
		"\x2\x2\x176\x178\x3\x2\x2\x2\x177\x164\x3\x2\x2\x2\x177\x165\x3\x2\x2"+
		"\x2\x178%\x3\x2\x2\x2\x179\x17A\a\x17\x2\x2\x17A\x17B\a\x18\x2\x2\x17B"+
		"\x17C\x5N(\x2\x17C\x17E\aG\x2\x2\x17D\x17F\x5(\x15\x2\x17E\x17D\x3\x2"+
		"\x2\x2\x17F\x180\x3\x2\x2\x2\x180\x181\x3\x2\x2\x2\x180\x17E\x3\x2\x2"+
		"\x2\x181\x182\x3\x2\x2\x2\x182\x183\aH\x2\x2\x183\'\x3\x2\x2\x2\x184\x186"+
		"\aG\x2\x2\x185\x187\x5*\x16\x2\x186\x185\x3\x2\x2\x2\x187\x188\x3\x2\x2"+
		"\x2\x188\x189\x3\x2\x2\x2\x188\x186\x3\x2\x2\x2\x189\x18A\x3\x2\x2\x2"+
		"\x18A\x18B\x5\x8CG\x2\x18B\x18C\aH\x2\x2\x18C)\x3\x2\x2\x2\x18D\x18E\a"+
		"G\x2\x2\x18E\x194\x5\x8EH\x2\x18F\x190\aG\x2\x2\x190\x191\x5\x8EH\x2\x191"+
		"\x192\aH\x2\x2\x192\x195\x3\x2\x2\x2\x193\x195\x5p\x39\x2\x194\x18F\x3"+
		"\x2\x2\x2\x194\x193\x3\x2\x2\x2\x195\x196\x3\x2\x2\x2\x196\x197\aH\x2"+
		"\x2\x197+\x3\x2\x2\x2\x198\x199\a\x19\x2\x2\x199\x19E\t\x5\x2\x2\x19A"+
		"\x19F\x5\\/\x2\x19B\x19F\a\x1B\x2\x2\x19C\x19F\a\x1A\x2\x2\x19D\x19F\a"+
		"\x1C\x2\x2\x19E\x19A\x3\x2\x2\x2\x19E\x19B\x3\x2\x2\x2\x19E\x19C\x3\x2"+
		"\x2\x2\x19E\x19D\x3\x2\x2\x2\x19F-\x3\x2\x2\x2\x1A0\x1A1\a\x1D\x2\x2\x1A1"+
		"\x1A2\x5\x44#\x2\x1A2\x1A3\x5\x8CG\x2\x1A3/\x3\x2\x2\x2\x1A4\x1A5\a\x1E"+
		"\x2\x2\x1A5\x1A6\x5\x44#\x2\x1A6\x1A7\x5\x8CG\x2\x1A7\x31\x3\x2\x2\x2"+
		"\x1A8\x1A9\a\x1F\x2\x2\x1A9\x1AA\x5\x44#\x2\x1AA\x1AB\x5\x8CG\x2\x1AB"+
		"\x33\x3\x2\x2\x2\x1AC\x1AD\a \x2\x2\x1AD\x1AE\x5@!\x2\x1AE\x1AF\x5@!\x2"+
		"\x1AF\x35\x3\x2\x2\x2\x1B0\x1B1\a!\x2\x2\x1B1\x1B2\x5@!\x2\x1B2\x1B3\x5"+
		"@!\x2\x1B3\x37\x3\x2\x2\x2\x1B4\x1B5\a\"\x2\x2\x1B5\x1B6\x5@!\x2\x1B6"+
		"\x39\x3\x2\x2\x2\x1B7\x1B8\a#\x2\x2\x1B8\x1B9\x5\x46$\x2\x1B9;\x3\x2\x2"+
		"\x2\x1BA\x1BB\a$\x2\x2\x1BB\x1BC\a%\x2\x2\x1BC=\x3\x2\x2\x2\x1BD\x1BE"+
		"\a&\x2\x2\x1BE\x1BF\x5\x8CG\x2\x1BF\x1C0\x5\f\a\x2\x1C0\x1C5\x3\x2\x2"+
		"\x2\x1C1\x1C2\a&\x2\x2\x1C2\x1C3\a\xF\x2\x2\x1C3\x1C5\x5\x34\x1B\x2\x1C4"+
		"\x1BD\x3\x2\x2\x2\x1C4\x1C1\x3\x2\x2\x2\x1C5?\x3\x2\x2\x2\x1C6\x1D4\x5"+
		"\x82\x42\x2\x1C7\x1D4\x5\x84\x43\x2\x1C8\x1D4\x5N(\x2\x1C9\x1D4\x5\x42"+
		"\"\x2\x1CA\x1CE\aG\x2\x2\x1CB\x1CF\a\'\x2\x2\x1CC\x1CF\a(\x2\x2\x1CD\x1CF"+
		"\x5\x8CG\x2\x1CE\x1CB\x3\x2\x2\x2\x1CE\x1CC\x3\x2\x2\x2\x1CE\x1CD\x3\x2"+
		"\x2\x2\x1CF\x1D0\x3\x2\x2\x2\x1D0\x1D1\x5\x46$\x2\x1D1\x1D2\aH\x2\x2\x1D2"+
		"\x1D4\x3\x2\x2\x2\x1D3\x1C6\x3\x2\x2\x2\x1D3\x1C7\x3\x2\x2\x2\x1D3\x1C8"+
		"\x3\x2\x2\x2\x1D3\x1C9\x3\x2\x2\x2\x1D3\x1CA\x3\x2\x2\x2\x1D4\x41\x3\x2"+
		"\x2\x2\x1D5\x1D6\aG\x2\x2\x1D6\x1D7\a)\x2\x2\x1D7\x1D8\x5@!\x2\x1D8\x1D9"+
		"\aH\x2\x2\x1D9\x43\x3\x2\x2\x2\x1DA\x1DE\aG\x2\x2\x1DB\x1DF\a\x3\x2\x2"+
		"\x1DC\x1DF\x5T+\x2\x1DD\x1DF\x5N(\x2\x1DE\x1DB\x3\x2\x2\x2\x1DE\x1DC\x3"+
		"\x2\x2\x2\x1DE\x1DD\x3\x2\x2\x2\x1DF\x1E0\x3\x2\x2\x2\x1E0\x1E3\a*\x2"+
		"\x2\x1E1\x1E4\x5\x8EH\x2\x1E2\x1E4\x5N(\x2\x1E3\x1E1\x3\x2\x2\x2\x1E3"+
		"\x1E2\x3\x2\x2\x2\x1E4\x1E5\x3\x2\x2\x2\x1E5\x1E6\aH\x2\x2\x1E6\x45\x3"+
		"\x2\x2\x2\x1E7\x1F5\x5\x86\x44\x2\x1E8\x1F5\x5l\x37\x2\x1E9\x1EA\aG\x2"+
		"\x2\x1EA\x1EB\x5P)\x2\x1EB\x1EE\x5R*\x2\x1EC\x1EF\x5\x8EH\x2\x1ED\x1EF"+
		"\x5N(\x2\x1EE\x1EC\x3\x2\x2\x2\x1EE\x1ED\x3\x2\x2\x2\x1EF\x1F0\x3\x2\x2"+
		"\x2\x1F0\x1F1\aH\x2\x2\x1F1\x1F5\x3\x2\x2\x2\x1F2\x1F5\x5H%\x2\x1F3\x1F5"+
		"\x5N(\x2\x1F4\x1E7\x3\x2\x2\x2\x1F4\x1E8\x3\x2\x2\x2\x1F4\x1E9\x3\x2\x2"+
		"\x2\x1F4\x1F2\x3\x2\x2\x2\x1F4\x1F3\x3\x2\x2\x2\x1F5G\x3\x2\x2\x2\x1F6"+
		"\x1FA\aG\x2\x2\x1F7\x1FB\a\'\x2\x2\x1F8\x1FB\a(\x2\x2\x1F9\x1FB\x5\x8C"+
		"G\x2\x1FA\x1F7\x3\x2\x2\x2\x1FA\x1F8\x3\x2\x2\x2\x1FA\x1F9\x3\x2\x2\x2"+
		"\x1FB\x1FC\x3\x2\x2\x2\x1FC\x1FD\x5J&\x2\x1FD\x1FE\aH\x2\x2\x1FEI\x3\x2"+
		"\x2\x2\x1FF\x200\x5L\'\x2\x200K\x3\x2\x2\x2\x201\x202\aG\x2\x2\x202\x203"+
		"\a+\x2\x2\x203\x204\x5\x8CG\x2\x204\x205\x5\x46$\x2\x205\x206\a,\x2\x2"+
		"\x206\x207\x5N(\x2\x207\x208\aH\x2\x2\x208M\x3\x2\x2\x2\x209\x20A\a-\x2"+
		"\x2\x20A\x20B\x5\x8EH\x2\x20BO\x3\x2\x2\x2\x20C\x210\a\x3\x2\x2\x20D\x210"+
		"\x5V,\x2\x20E\x210\x5N(\x2\x20F\x20C\x3\x2\x2\x2\x20F\x20D\x3\x2\x2\x2"+
		"\x20F\x20E\x3\x2\x2\x2\x210Q\x3\x2\x2\x2\x211\x212\t\x6\x2\x2\x212S\x3"+
		"\x2\x2\x2\x213\x216\x5X-\x2\x214\x216\x5V,\x2\x215\x213\x3\x2\x2\x2\x215"+
		"\x214\x3\x2\x2\x2\x216U\x3\x2\x2\x2\x217\x218\aG\x2\x2\x218\x219\x5Z."+
		"\x2\x219\x21A\a\x6\x2\x2\x21A\x21B\aH\x2\x2\x21B\x21E\x3\x2\x2\x2\x21C"+
		"\x21E\x5\\/\x2\x21D\x217\x3\x2\x2\x2\x21D\x21C\x3\x2\x2\x2\x21EW\x3\x2"+
		"\x2\x2\x21F\x220\aG\x2\x2\x220\x221\x5Z.\x2\x221\x222\a\a\x2\x2\x222\x223"+
		"\aH\x2\x2\x223\x226\x3\x2\x2\x2\x224\x226\x5^\x30\x2\x225\x21F\x3\x2\x2"+
		"\x2\x225\x224\x3\x2\x2\x2\x226Y\x3\x2\x2\x2\x227\x22C\x5\x8CG\x2\x228"+
		"\x22C\a\x1C\x2\x2\x229\x22C\a\x1A\x2\x2\x22A\x22C\a\x1B\x2\x2\x22B\x227"+
		"\x3\x2\x2\x2\x22B\x228\x3\x2\x2\x2\x22B\x229\x3\x2\x2\x2\x22B\x22A\x3"+
		"\x2\x2\x2\x22C[\x3\x2\x2\x2\x22D\x22E\aG\x2\x2\x22E\x22F\a\x32\x2\x2\x22F"+
		"\x230\x5@!\x2\x230\x231\aH\x2\x2\x231]\x3\x2\x2\x2\x232\x233\aG\x2\x2"+
		"\x233\x234\a\a\x2\x2\x234\x235\x5V,\x2\x235\x236\aH\x2\x2\x236_\x3\x2"+
		"\x2\x2\x237\x238\aG\x2\x2\x238\x239\a\x33\x2\x2\x239\x23A\t\x2\x2\x2\x23A"+
		"\x23B\aH\x2\x2\x23B\x61\x3\x2\x2\x2\x23C\x242\x5\x8CG\x2\x23D\x242\x5"+
		"r:\x2\x23E\x242\x5\x8EH\x2\x23F\x242\x5N(\x2\x240\x242\x5\x64\x33\x2\x241"+
		"\x23C\x3\x2\x2\x2\x241\x23D\x3\x2\x2\x2\x241\x23E\x3\x2\x2\x2\x241\x23F"+
		"\x3\x2\x2\x2\x241\x240\x3\x2\x2\x2\x242\x63\x3\x2\x2\x2\x243\x24E\x5\x46"+
		"$\x2\x244\x24E\x5\x66\x34\x2\x245\x24E\x5h\x35\x2\x246\x24E\a\x6\x2\x2"+
		"\x247\x24E\a\a\x2\x2\x248\x24E\x5X-\x2\x249\x24E\x5N(\x2\x24A\x24E\x5"+
		"`\x31\x2\x24B\x24E\x5j\x36\x2\x24C\x24E\x5l\x37\x2\x24D\x243\x3\x2\x2"+
		"\x2\x24D\x244\x3\x2\x2\x2\x24D\x245\x3\x2\x2\x2\x24D\x246\x3\x2\x2\x2"+
		"\x24D\x247\x3\x2\x2\x2\x24D\x248\x3\x2\x2\x2\x24D\x249\x3\x2\x2\x2\x24D"+
		"\x24A\x3\x2\x2\x2\x24D\x24B\x3\x2\x2\x2\x24D\x24C\x3\x2\x2\x2\x24E\x65"+
		"\x3\x2\x2\x2\x24F\x255\aG\x2\x2\x250\x251\x5\x8EH\x2\x251\x252\a\x16\x2"+
		"\x2\x252\x254\x3\x2\x2\x2\x253\x250\x3\x2\x2\x2\x254\x257\x3\x2\x2\x2"+
		"\x255\x256\x3\x2\x2\x2\x255\x253\x3\x2\x2\x2\x256\x258\x3\x2\x2\x2\x257"+
		"\x255\x3\x2\x2\x2\x258\x259\x5\x8EH\x2\x259\x25A\aH\x2\x2\x25Ag\x3\x2"+
		"\x2\x2\x25B\x25F\x5J&\x2\x25C\x25F\x5\x14\v\x2\x25D\x25F\x5\x16\f\x2\x25E"+
		"\x25B\x3\x2\x2\x2\x25E\x25C\x3\x2\x2\x2\x25E\x25D\x3\x2\x2\x2\x25Fi\x3"+
		"\x2\x2\x2\x260\x261\aG\x2\x2\x261\x262\a\x34\x2\x2\x262\x263\x5\x8CG\x2"+
		"\x263\x264\a\x35\x2\x2\x264\x265\x5\x8CG\x2\x265\x266\aH\x2\x2\x266k\x3"+
		"\x2\x2\x2\x267\x268\aG\x2\x2\x268\x269\a\x36\x2\x2\x269\x26A\x5\x64\x33"+
		"\x2\x26A\x26B\x5N(\x2\x26B\x26C\x5r:\x2\x26C\x26D\aH\x2\x2\x26Dm\x3\x2"+
		"\x2\x2\x26E\x26F\a\x43\x2\x2\x26F\x270\x5p\x39\x2\x270\x271\x5p\x39\x2"+
		"\x271o\x3\x2\x2\x2\x272\x27E\x5\x8EH\x2\x273\x27E\x5N(\x2\x274\x275\a"+
		"G\x2\x2\x275\x278\a\x37\x2\x2\x276\x279\x5N(\x2\x277\x279\x5\x8EH\x2\x278"+
		"\x276\x3\x2\x2\x2\x278\x277\x3\x2\x2\x2\x279\x27A\x3\x2\x2\x2\x27A\x27B"+
		"\x5@!\x2\x27B\x27C\aH\x2\x2\x27C\x27E\x3\x2\x2\x2\x27D\x272\x3\x2\x2\x2"+
		"\x27D\x273\x3\x2\x2\x2\x27D\x274\x3\x2\x2\x2\x27Eq\x3\x2\x2\x2\x27F\x29A"+
		"\aG\x2\x2\x280\x281\a\x41\x2\x2\x281\x283\x5r:\x2\x282\x284\x5r:\x2\x283"+
		"\x282\x3\x2\x2\x2\x284\x285\x3\x2\x2\x2\x285\x286\x3\x2\x2\x2\x285\x283"+
		"\x3\x2\x2\x2\x286\x29B\x3\x2\x2\x2\x287\x288\x5t;\x2\x288\x289\x5\x8C"+
		"G\x2\x289\x28A\x5\x8CG\x2\x28A\x29B\x3\x2\x2\x2\x28B\x29B\x5n\x38\x2\x28C"+
		"\x28D\a\x43\x2\x2\x28D\x28E\x5@!\x2\x28E\x28F\x5@!\x2\x28F\x29B\x3\x2"+
		"\x2\x2\x290\x291\a\x44\x2\x2\x291\x29B\x5r:\x2\x292\x293\a\x43\x2\x2\x293"+
		"\x294\x5V,\x2\x294\x295\x5V,\x2\x295\x29B\x3\x2\x2\x2\x296\x297\a\x43"+
		"\x2\x2\x297\x298\x5X-\x2\x298\x299\x5X-\x2\x299\x29B\x3\x2\x2\x2\x29A"+
		"\x280\x3\x2\x2\x2\x29A\x287\x3\x2\x2\x2\x29A\x28B\x3\x2\x2\x2\x29A\x28C"+
		"\x3\x2\x2\x2\x29A\x290\x3\x2\x2\x2\x29A\x292\x3\x2\x2\x2\x29A\x296\x3"+
		"\x2\x2\x2\x29B\x29C\x3\x2\x2\x2\x29C\x29D\aH\x2\x2\x29D\x2A0\x3\x2\x2"+
		"\x2\x29E\x2A0\x5\x14\v\x2\x29F\x27F\x3\x2\x2\x2\x29F\x29E\x3\x2\x2\x2"+
		"\x2A0s\x3\x2\x2\x2\x2A1\x2A2\t\a\x2\x2\x2A2u\x3\x2\x2\x2\x2A3\x2A4\aG"+
		"\x2\x2\x2A4\x2A5\a\x38\x2\x2\x2A5\x2A6\x5\x8CG\x2\x2A6\x2A7\x5\x8CG\x2"+
		"\x2A7\x2A8\aH\x2\x2\x2A8w\x3\x2\x2\x2\x2A9\x2AA\aG\x2\x2\x2AA\x2AB\a\x39"+
		"\x2\x2\x2AB\x2AC\x5\x8CG\x2\x2AC\x2AD\x5\x8CG\x2\x2AD\x2AE\aH\x2\x2\x2AE"+
		"y\x3\x2\x2\x2\x2AF\x2B0\aG\x2\x2\x2B0\x2B1\a:\x2\x2\x2B1\x2B2\x5\x8CG"+
		"\x2\x2B2\x2B3\x5\x8CG\x2\x2B3\x2B4\aH\x2\x2\x2B4{\x3\x2\x2\x2\x2B5\x2B6"+
		"\aG\x2\x2\x2B6\x2B7\a;\x2\x2\x2B7\x2B8\x5\x8CG\x2\x2B8\x2B9\x5\x8CG\x2"+
		"\x2B9\x2BA\aH\x2\x2\x2BA}\x3\x2\x2\x2\x2BB\x2BC\aG\x2\x2\x2BC\x2BD\a<"+
		"\x2\x2\x2BD\x2BE\x5\x8CG\x2\x2BE\x2BF\x5\x8CG\x2\x2BF\x2C0\aH\x2\x2\x2C0"+
		"\x7F\x3\x2\x2\x2\x2C1\x2C2\aG\x2\x2\x2C2\x2C6\a=\x2\x2\x2C3\x2C7\x5\x46"+
		"$\x2\x2C4\x2C7\x5J&\x2\x2C5\x2C7\x5N(\x2\x2C6\x2C3\x3\x2\x2\x2\x2C6\x2C4"+
		"\x3\x2\x2\x2\x2C6\x2C5\x3\x2\x2\x2\x2C7\x2C8\x3\x2\x2\x2\x2C8\x2C9\aH"+
		"\x2\x2\x2C9\x81\x3\x2\x2\x2\x2CA\x2CB\aG\x2\x2\x2CB\x2CC\a\n\x2\x2\x2CC"+
		"\x2CD\x5\x46$\x2\x2CD\x2CE\a,\x2\x2\x2CE\x2CF\x5N(\x2\x2CF\x2D0\aH\x2"+
		"\x2\x2D0\x83\x3\x2\x2\x2\x2D1\x2D2\aG\x2\x2\x2D2\x2D3\a\t\x2\x2\x2D3\x2D4"+
		"\x5\x46$\x2\x2D4\x2D5\a,\x2\x2\x2D5\x2D6\x5N(\x2\x2D6\x2D7\aH\x2\x2\x2D7"+
		"\x85\x3\x2\x2\x2\x2D8\x2D9\aG\x2\x2\x2D9\x2E0\a>\x2\x2\x2DA\x2DC\x5\x46"+
		"$\x2\x2DB\x2DA\x3\x2\x2\x2\x2DC\x2DD\x3\x2\x2\x2\x2DD\x2DE\x3\x2\x2\x2"+
		"\x2DD\x2DB\x3\x2\x2\x2\x2DE\x2E1\x3\x2\x2\x2\x2DF\x2E1\x5\x14\v\x2\x2E0"+
		"\x2DB\x3\x2\x2\x2\x2E0\x2DF\x3\x2\x2\x2\x2E1\x2E2\x3\x2\x2\x2\x2E2\x2E3"+
		"\aH\x2\x2\x2E3\x87\x3\x2\x2\x2\x2E4\x2E5\aG\x2\x2\x2E5\x2E6\a?\x2\x2\x2E6"+
		"\x2E7\x5\x46$\x2\x2E7\x2E8\a,\x2\x2\x2E8\x2E9\x5N(\x2\x2E9\x2EA\aH\x2"+
		"\x2\x2EA\x89\x3\x2\x2\x2\x2EB\x2EC\aG\x2\x2\x2EC\x2ED\a@\x2\x2\x2ED\x2EE"+
		"\x5@!\x2\x2EE\x2EF\a,\x2\x2\x2EF\x2F0\x5N(\x2\x2F0\x2F1\aH\x2\x2\x2F1"+
		"\x8B\x3\x2\x2\x2\x2F2\x302\x5\x80\x41\x2\x2F3\x302\x5x=\x2\x2F4\x302\x5"+
		"z>\x2\x2F5\x302\x5|?\x2\x2F6\x302\x5v<\x2\x2F7\x302\x5~@\x2\x2F8\x302"+
		"\x5\x88\x45\x2\x2F9\x302\x5\x44#\x2\x2FA\x302\x5\x8A\x46\x2\x2FB\x2FD"+
		"\a\x45\x2\x2\x2FC\x2FB\x3\x2\x2\x2\x2FD\x2FE\x3\x2\x2\x2\x2FE\x2FC\x3"+
		"\x2\x2\x2\x2FE\x2FF\x3\x2\x2\x2\x2FF\x302\x3\x2\x2\x2\x300\x302\x5N(\x2"+
		"\x301\x2F2\x3\x2\x2\x2\x301\x2F3\x3\x2\x2\x2\x301\x2F4\x3\x2\x2\x2\x301"+
		"\x2F5\x3\x2\x2\x2\x301\x2F6\x3\x2\x2\x2\x301\x2F7\x3\x2\x2\x2\x301\x2F8"+
		"\x3\x2\x2\x2\x301\x2F9\x3\x2\x2\x2\x301\x2FA\x3\x2\x2\x2\x301\x2FC\x3"+
		"\x2\x2\x2\x301\x300\x3\x2\x2\x2\x302\x8D\x3\x2\x2\x2\x303\x305\a\x46\x2"+
		"\x2\x304\x303\x3\x2\x2\x2\x305\x306\x3\x2\x2\x2\x306\x304\x3\x2\x2\x2"+
		"\x306\x307\x3\x2\x2\x2\x307\x8F\x3\x2\x2\x2;\x95\x9B\x9D\xAB\xB1\xBB\xBD"+
		"\xD9\xDE\xE6\xF1\xF8\x100\x107\x115\x120\x12B\x13A\x143\x14F\x158\x15F"+
		"\x16B\x172\x177\x180\x188\x194\x19E\x1C4\x1CE\x1D3\x1DE\x1E3\x1EE\x1F4"+
		"\x1FA\x20F\x215\x21D\x225\x22B\x241\x24D\x255\x25E\x278\x27D\x285\x29A"+
		"\x29F\x2C6\x2DD\x2E0\x2FE\x301\x306";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
