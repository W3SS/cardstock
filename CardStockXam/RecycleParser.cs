//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Recycle.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class RecycleParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		BOOLOP=60, COMPOP=61, EQOP=62, UNOP=63, INTNUM=64, LETT=65, OPEN=66, CLOSE=67, 
		WS=68, ANY=69;
	public const int
		RULE_game = 0, RULE_setup = 1, RULE_stage = 2, RULE_scoring = 3, RULE_endcondition = 4, 
		RULE_action = 5, RULE_multiaction = 6, RULE_condact = 7, RULE_agg = 8, 
		RULE_let = 9, RULE_playercreate = 10, RULE_teamcreate = 11, RULE_deckcreate = 12, 
		RULE_deck = 13, RULE_teams = 14, RULE_attribute = 15, RULE_initpoints = 16, 
		RULE_awards = 17, RULE_subaward = 18, RULE_cycleaction = 19, RULE_setaction = 20, 
		RULE_incaction = 21, RULE_decaction = 22, RULE_moveaction = 23, RULE_copyaction = 24, 
		RULE_removeaction = 25, RULE_shuffleaction = 26, RULE_turnaction = 27, 
		RULE_repeat = 28, RULE_card = 29, RULE_actual = 30, RULE_rawstorage = 31, 
		RULE_cstorage = 32, RULE_locdesc = 33, RULE_memstorage = 34, RULE_memset = 35, 
		RULE_tuple = 36, RULE_var = 37, RULE_locpre = 38, RULE_who = 39, RULE_owner = 40, 
		RULE_typed = 41, RULE_collection = 42, RULE_strcollection = 43, RULE_cstoragecollection = 44, 
		RULE_pcollection = 45, RULE_declare = 46, RULE_trueany = 47, RULE_filter = 48, 
		RULE_attrcomp = 49, RULE_cardatt = 50, RULE_boolean = 51, RULE_intop = 52, 
		RULE_add = 53, RULE_mult = 54, RULE_subtract = 55, RULE_mod = 56, RULE_divide = 57, 
		RULE_sizeof = 58, RULE_maxof = 59, RULE_minof = 60, RULE_unionof = 61, 
		RULE_sum = 62, RULE_score = 63, RULE_int = 64, RULE_namegr = 65;
	public static readonly string[] ruleNames = {
		"game", "setup", "stage", "scoring", "endcondition", "action", "multiaction", 
		"condact", "agg", "let", "playercreate", "teamcreate", "deckcreate", "deck", 
		"teams", "attribute", "initpoints", "awards", "subaward", "cycleaction", 
		"setaction", "incaction", "decaction", "moveaction", "copyaction", "removeaction", 
		"shuffleaction", "turnaction", "repeat", "card", "actual", "rawstorage", 
		"cstorage", "locdesc", "memstorage", "memset", "tuple", "var", "locpre", 
		"who", "owner", "typed", "collection", "strcollection", "cstoragecollection", 
		"pcollection", "declare", "trueany", "filter", "attrcomp", "cardatt", 
		"boolean", "intop", "add", "mult", "subtract", "mod", "divide", "sizeof", 
		"maxof", "minof", "unionof", "sum", "score", "int", "namegr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'game'", "'setup'", "'stage'", "'player'", "'team'", "'scoring'", 
		"'min'", "'max'", "'end'", "'choice'", "'do'", "'any'", "'all'", "'let'", 
		"'create'", "'players'", "'teams'", "'deck'", "','", "'put'", "'points'", 
		"'cycle'", "'next'", "'current'", "'previous'", "'set'", "'inc'", "'dec'", 
		"'move'", "'remember'", "'forget'", "'shuffle'", "'turn'", "'pass'", "'repeat'", 
		"'top'", "'bottom'", "'actual'", "'sto'", "'vloc'", "'iloc'", "'hloc'", 
		"'mem'", "'tuples'", "'using'", "'''", "'owner'", "'declare'", "'filter'", 
		"'cardatt'", "'+'", "'*'", "'-'", "'%'", "'//'", "'size'", "'union'", 
		"'sum'", "'score'", null, null, null, "'not'", null, null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"BOOLOP", "COMPOP", "EQOP", "UNOP", "INTNUM", "LETT", "OPEN", "CLOSE", 
		"WS", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Recycle.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public RecycleParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class GameContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public SetupContext setup() {
			return GetRuleContext<SetupContext>(0);
		}
		public ScoringContext scoring() {
			return GetRuleContext<ScoringContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DeclareContext[] declare() {
			return GetRuleContexts<DeclareContext>();
		}
		public DeclareContext declare(int i) {
			return GetRuleContext<DeclareContext>(i);
		}
		public MultiactionContext[] multiaction() {
			return GetRuleContexts<MultiactionContext>();
		}
		public MultiactionContext multiaction(int i) {
			return GetRuleContext<MultiactionContext>(i);
		}
		public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public GameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_game; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterGame(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitGame(this);
		}
	}

	[RuleVersion(0)]
	public GameContext game() {
		GameContext _localctx = new GameContext(Context, State);
		EnterRule(_localctx, 0, RULE_game);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; Match(OPEN);
			State = 133; Match(T__0);
			State = 137;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 134; declare();
					}
					} 
				}
				State = 139;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 140; setup();
			State = 143;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 143;
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						State = 141; multiaction();
						}
						break;
					case 2:
						{
						State = 142; stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 145;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 147; scoring();
			State = 148; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetupContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public PlayercreateContext playercreate() {
			return GetRuleContext<PlayercreateContext>(0);
		}
		public TeamcreateContext teamcreate() {
			return GetRuleContext<TeamcreateContext>(0);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public DeckcreateContext[] deckcreate() {
			return GetRuleContexts<DeckcreateContext>();
		}
		public DeckcreateContext deckcreate(int i) {
			return GetRuleContext<DeckcreateContext>(i);
		}
		public SetupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSetup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSetup(this);
		}
	}

	[RuleVersion(0)]
	public SetupContext setup() {
		SetupContext _localctx = new SetupContext(Context, State);
		EnterRule(_localctx, 2, RULE_setup);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 150; Match(OPEN);
			State = 151; Match(T__1);
			State = 152; playercreate();
			State = 153; Match(OPEN);
			State = 154; teamcreate();
			State = 155; Match(CLOSE);
			State = 160;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 156; Match(OPEN);
					State = 157; deckcreate();
					State = 158; Match(CLOSE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 162;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 164; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public EndconditionContext endcondition() {
			return GetRuleContext<EndconditionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultiactionContext[] multiaction() {
			return GetRuleContexts<MultiactionContext>();
		}
		public MultiactionContext multiaction(int i) {
			return GetRuleContext<MultiactionContext>(i);
		}
		public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public StageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterStage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitStage(this);
		}
	}

	[RuleVersion(0)]
	public StageContext stage() {
		StageContext _localctx = new StageContext(Context, State);
		EnterRule(_localctx, 4, RULE_stage);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; Match(OPEN);
			State = 167; Match(T__2);
			State = 168;
			_la = TokenStream.La(1);
			if ( !(_la==T__3 || _la==T__4) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 169; endcondition();
			State = 172;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 172;
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						State = 170; multiaction();
						}
						break;
					case 2:
						{
						State = 171; stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 174;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 176; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoringContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ScoringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scoring; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterScoring(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitScoring(this);
		}
	}

	[RuleVersion(0)]
	public ScoringContext scoring() {
		ScoringContext _localctx = new ScoringContext(Context, State);
		EnterRule(_localctx, 6, RULE_scoring);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178; Match(OPEN);
			State = 179; Match(T__5);
			State = 180;
			_la = TokenStream.La(1);
			if ( !(_la==T__6 || _la==T__7) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 181; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndconditionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public EndconditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endcondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterEndcondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitEndcondition(this);
		}
	}

	[RuleVersion(0)]
	public EndconditionContext endcondition() {
		EndconditionContext _localctx = new EndconditionContext(Context, State);
		EnterRule(_localctx, 8, RULE_endcondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183; Match(OPEN);
			State = 184; Match(T__8);
			State = 185; boolean();
			State = 186; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public InitpointsContext initpoints() {
			return GetRuleContext<InitpointsContext>(0);
		}
		public TeamcreateContext teamcreate() {
			return GetRuleContext<TeamcreateContext>(0);
		}
		public DeckcreateContext deckcreate() {
			return GetRuleContext<DeckcreateContext>(0);
		}
		public CycleactionContext cycleaction() {
			return GetRuleContext<CycleactionContext>(0);
		}
		public SetactionContext setaction() {
			return GetRuleContext<SetactionContext>(0);
		}
		public MoveactionContext moveaction() {
			return GetRuleContext<MoveactionContext>(0);
		}
		public CopyactionContext copyaction() {
			return GetRuleContext<CopyactionContext>(0);
		}
		public IncactionContext incaction() {
			return GetRuleContext<IncactionContext>(0);
		}
		public DecactionContext decaction() {
			return GetRuleContext<DecactionContext>(0);
		}
		public RemoveactionContext removeaction() {
			return GetRuleContext<RemoveactionContext>(0);
		}
		public TurnactionContext turnaction() {
			return GetRuleContext<TurnactionContext>(0);
		}
		public ShuffleactionContext shuffleaction() {
			return GetRuleContext<ShuffleactionContext>(0);
		}
		public RepeatContext repeat() {
			return GetRuleContext<RepeatContext>(0);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 10, RULE_action);
		try {
			State = 207;
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 188; Match(OPEN);
				State = 202;
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 189; initpoints();
					}
					break;
				case 2:
					{
					State = 190; teamcreate();
					}
					break;
				case 3:
					{
					State = 191; deckcreate();
					}
					break;
				case 4:
					{
					State = 192; cycleaction();
					}
					break;
				case 5:
					{
					State = 193; setaction();
					}
					break;
				case 6:
					{
					State = 194; moveaction();
					}
					break;
				case 7:
					{
					State = 195; copyaction();
					}
					break;
				case 8:
					{
					State = 196; incaction();
					}
					break;
				case 9:
					{
					State = 197; decaction();
					}
					break;
				case 10:
					{
					State = 198; removeaction();
					}
					break;
				case 11:
					{
					State = 199; turnaction();
					}
					break;
				case 12:
					{
					State = 200; shuffleaction();
					}
					break;
				case 13:
					{
					State = 201; repeat();
					}
					break;
				}
				State = 204; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 206; agg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiactionContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public CondactContext[] condact() {
			return GetRuleContexts<CondactContext>();
		}
		public CondactContext condact(int i) {
			return GetRuleContext<CondactContext>(i);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public MultiactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMultiaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMultiaction(this);
		}
	}

	[RuleVersion(0)]
	public MultiactionContext multiaction() {
		MultiactionContext _localctx = new MultiactionContext(Context, State);
		EnterRule(_localctx, 12, RULE_multiaction);
		try {
			int _alt;
			State = 233;
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 209; Match(OPEN);
				State = 210; Match(T__9);
				State = 211; Match(OPEN);
				State = 213;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 212; condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 215;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 217; Match(CLOSE);
				State = 218; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 220; Match(OPEN);
				State = 221; Match(T__10);
				State = 222; Match(OPEN);
				State = 224;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 223; condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 226;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 228; Match(CLOSE);
				State = 229; Match(CLOSE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 231; agg();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 232; let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondactContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public MultiactionContext multiaction() {
			return GetRuleContext<MultiactionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public CondactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condact; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCondact(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCondact(this);
		}
	}

	[RuleVersion(0)]
	public CondactContext condact() {
		CondactContext _localctx = new CondactContext(Context, State);
		EnterRule(_localctx, 14, RULE_condact);
		try {
			State = 247;
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 235; Match(OPEN);
				State = 236; boolean();
				State = 237; multiaction();
				State = 238; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 240; multiaction();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 241; Match(OPEN);
				State = 242; boolean();
				State = 243; action();
				State = 244; Match(CLOSE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 246; action();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultiactionContext multiaction() {
			return GetRuleContext<MultiactionContext>(0);
		}
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public CondactContext condact() {
			return GetRuleContext<CondactContext>(0);
		}
		public AggContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAgg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAgg(this);
		}
	}

	[RuleVersion(0)]
	public AggContext agg() {
		AggContext _localctx = new AggContext(Context, State);
		EnterRule(_localctx, 16, RULE_agg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; Match(OPEN);
			State = 250;
			_la = TokenStream.La(1);
			if ( !(_la==T__11 || _la==T__12) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 251; collection();
			State = 252; var();
			State = 258;
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 253; multiaction();
				}
				break;
			case 2:
				{
				State = 254; action();
				}
				break;
			case 3:
				{
				State = 255; boolean();
				}
				break;
			case 4:
				{
				State = 256; cstorage();
				}
				break;
			case 5:
				{
				State = 257; condact();
				}
				break;
			}
			State = 260; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public TypedContext typed() {
			return GetRuleContext<TypedContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultiactionContext multiaction() {
			return GetRuleContext<MultiactionContext>(0);
		}
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public CondactContext condact() {
			return GetRuleContext<CondactContext>(0);
		}
		public LetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLet(this);
		}
	}

	[RuleVersion(0)]
	public LetContext let() {
		LetContext _localctx = new LetContext(Context, State);
		EnterRule(_localctx, 18, RULE_let);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262; Match(OPEN);
			State = 263; Match(T__13);
			State = 264; typed();
			State = 265; var();
			State = 269;
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 266; multiaction();
				}
				break;
			case 2:
				{
				State = 267; action();
				}
				break;
			case 3:
				{
				State = 268; condact();
				}
				break;
			}
			State = 271; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayercreateContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public PlayercreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playercreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterPlayercreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitPlayercreate(this);
		}
	}

	[RuleVersion(0)]
	public PlayercreateContext playercreate() {
		PlayercreateContext _localctx = new PlayercreateContext(Context, State);
		EnterRule(_localctx, 20, RULE_playercreate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273; Match(OPEN);
			State = 274; Match(T__14);
			State = 275; Match(T__15);
			State = 278;
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 276; @int();
				}
				break;
			case 2:
				{
				State = 277; var();
				}
				break;
			}
			State = 280; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamcreateContext : ParserRuleContext {
		public TeamsContext[] teams() {
			return GetRuleContexts<TeamsContext>();
		}
		public TeamsContext teams(int i) {
			return GetRuleContext<TeamsContext>(i);
		}
		public TeamcreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamcreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeamcreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeamcreate(this);
		}
	}

	[RuleVersion(0)]
	public TeamcreateContext teamcreate() {
		TeamcreateContext _localctx = new TeamcreateContext(Context, State);
		EnterRule(_localctx, 22, RULE_teamcreate);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 282; Match(T__14);
			State = 283; Match(T__16);
			State = 285;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 284; teams();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 287;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckcreateContext : ParserRuleContext {
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public DeckContext deck() {
			return GetRuleContext<DeckContext>(0);
		}
		public RepeatContext repeat() {
			return GetRuleContext<RepeatContext>(0);
		}
		public DeckcreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deckcreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeckcreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeckcreate(this);
		}
	}

	[RuleVersion(0)]
	public DeckcreateContext deckcreate() {
		DeckcreateContext _localctx = new DeckcreateContext(Context, State);
		EnterRule(_localctx, 24, RULE_deckcreate);
		try {
			State = 295;
			switch (TokenStream.La(1)) {
			case T__14:
				EnterOuterAlt(_localctx, 1);
				{
				State = 289; Match(T__14);
				State = 290; Match(T__17);
				State = 291; cstorage();
				State = 292; deck();
				}
				break;
			case T__34:
				EnterOuterAlt(_localctx, 2);
				{
				State = 294; repeat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public DeckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deck; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeck(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeck(this);
		}
	}

	[RuleVersion(0)]
	public DeckContext deck() {
		DeckContext _localctx = new DeckContext(Context, State);
		EnterRule(_localctx, 26, RULE_deck);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 297; Match(OPEN);
			State = 298; Match(T__17);
			State = 300;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 299; attribute();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 302;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 304; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamsContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode[] INTNUM() { return GetTokens(RecycleParser.INTNUM); }
		public ITerminalNode INTNUM(int i) {
			return GetToken(RecycleParser.INTNUM, i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TeamsContext[] teams() {
			return GetRuleContexts<TeamsContext>();
		}
		public TeamsContext teams(int i) {
			return GetRuleContext<TeamsContext>(i);
		}
		public TeamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teams; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeams(this);
		}
	}

	[RuleVersion(0)]
	public TeamsContext teams() {
		TeamsContext _localctx = new TeamsContext(Context, State);
		EnterRule(_localctx, 28, RULE_teams);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 306; Match(OPEN);
			State = 311;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 307; Match(INTNUM);
					State = 308; Match(T__18);
					}
					} 
				}
				State = 313;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			State = 314; Match(INTNUM);
			State = 318;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 315; teams();
					}
					} 
				}
				State = 320;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			State = 321; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 30, RULE_attribute);
		try {
			int _alt;
			State = 342;
			switch (TokenStream.La(1)) {
			case T__45:
				EnterOuterAlt(_localctx, 1);
				{
				State = 323; var();
				}
				break;
			case OPEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 324; Match(OPEN);
				State = 330;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 325; namegr();
						State = 326; Match(T__18);
						}
						} 
					}
					State = 332;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
				}
				State = 333; namegr();
				State = 337;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 334; attribute();
						}
						} 
					}
					State = 339;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
				}
				State = 340; Match(CLOSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitpointsContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AwardsContext[] awards() {
			return GetRuleContexts<AwardsContext>();
		}
		public AwardsContext awards(int i) {
			return GetRuleContext<AwardsContext>(i);
		}
		public InitpointsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initpoints; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterInitpoints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitInitpoints(this);
		}
	}

	[RuleVersion(0)]
	public InitpointsContext initpoints() {
		InitpointsContext _localctx = new InitpointsContext(Context, State);
		EnterRule(_localctx, 32, RULE_initpoints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 344; Match(T__19);
			State = 345; Match(T__20);
			State = 346; var();
			State = 347; Match(OPEN);
			State = 349;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 348; awards();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 351;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 353; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwardsContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubawardContext[] subaward() {
			return GetRuleContexts<SubawardContext>();
		}
		public SubawardContext subaward(int i) {
			return GetRuleContext<SubawardContext>(i);
		}
		public AwardsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awards; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAwards(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAwards(this);
		}
	}

	[RuleVersion(0)]
	public AwardsContext awards() {
		AwardsContext _localctx = new AwardsContext(Context, State);
		EnterRule(_localctx, 34, RULE_awards);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 355; Match(OPEN);
			State = 357;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 356; subaward();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 359;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 361; @int();
			State = 362; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubawardContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public TrueanyContext trueany() {
			return GetRuleContext<TrueanyContext>(0);
		}
		public CardattContext cardatt() {
			return GetRuleContext<CardattContext>(0);
		}
		public SubawardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subaward; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSubaward(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSubaward(this);
		}
	}

	[RuleVersion(0)]
	public SubawardContext subaward() {
		SubawardContext _localctx = new SubawardContext(Context, State);
		EnterRule(_localctx, 36, RULE_subaward);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364; Match(OPEN);
			State = 365; namegr();
			State = 371;
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				{
				State = 366; Match(OPEN);
				State = 367; trueany();
				State = 368; Match(CLOSE);
				}
				}
				break;
			case 2:
				{
				{
				State = 370; cardatt();
				}
				}
				break;
			}
			State = 373; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CycleactionContext : ParserRuleContext {
		public OwnerContext owner() {
			return GetRuleContext<OwnerContext>(0);
		}
		public CycleactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cycleaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCycleaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCycleaction(this);
		}
	}

	[RuleVersion(0)]
	public CycleactionContext cycleaction() {
		CycleactionContext _localctx = new CycleactionContext(Context, State);
		EnterRule(_localctx, 38, RULE_cycleaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375; Match(T__21);
			State = 376;
			_la = TokenStream.La(1);
			if ( !(_la==T__22 || _la==T__23) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 381;
			switch (TokenStream.La(1)) {
			case OPEN:
				{
				State = 377; owner();
				}
				break;
			case T__23:
				{
				State = 378; Match(T__23);
				}
				break;
			case T__22:
				{
				State = 379; Match(T__22);
				}
				break;
			case T__24:
				{
				State = 380; Match(T__24);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public SetactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSetaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSetaction(this);
		}
	}

	[RuleVersion(0)]
	public SetactionContext setaction() {
		SetactionContext _localctx = new SetactionContext(Context, State);
		EnterRule(_localctx, 40, RULE_setaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383; Match(T__25);
			State = 384; rawstorage();
			State = 385; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public IncactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterIncaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitIncaction(this);
		}
	}

	[RuleVersion(0)]
	public IncactionContext incaction() {
		IncactionContext _localctx = new IncactionContext(Context, State);
		EnterRule(_localctx, 42, RULE_incaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387; Match(T__26);
			State = 388; rawstorage();
			State = 389; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public DecactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDecaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDecaction(this);
		}
	}

	[RuleVersion(0)]
	public DecactionContext decaction() {
		DecactionContext _localctx = new DecactionContext(Context, State);
		EnterRule(_localctx, 44, RULE_decaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391; Match(T__27);
			State = 392; rawstorage();
			State = 393; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveactionContext : ParserRuleContext {
		public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public MoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMoveaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMoveaction(this);
		}
	}

	[RuleVersion(0)]
	public MoveactionContext moveaction() {
		MoveactionContext _localctx = new MoveactionContext(Context, State);
		EnterRule(_localctx, 46, RULE_moveaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395; Match(T__28);
			State = 396; card();
			State = 397; card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyactionContext : ParserRuleContext {
		public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public CopyactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCopyaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCopyaction(this);
		}
	}

	[RuleVersion(0)]
	public CopyactionContext copyaction() {
		CopyactionContext _localctx = new CopyactionContext(Context, State);
		EnterRule(_localctx, 48, RULE_copyaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399; Match(T__29);
			State = 400; card();
			State = 401; card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveactionContext : ParserRuleContext {
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public RemoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRemoveaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRemoveaction(this);
		}
	}

	[RuleVersion(0)]
	public RemoveactionContext removeaction() {
		RemoveactionContext _localctx = new RemoveactionContext(Context, State);
		EnterRule(_localctx, 50, RULE_removeaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403; Match(T__30);
			State = 404; card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShuffleactionContext : ParserRuleContext {
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public ShuffleactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shuffleaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterShuffleaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitShuffleaction(this);
		}
	}

	[RuleVersion(0)]
	public ShuffleactionContext shuffleaction() {
		ShuffleactionContext _localctx = new ShuffleactionContext(Context, State);
		EnterRule(_localctx, 52, RULE_shuffleaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406; Match(T__31);
			State = 407; cstorage();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TurnactionContext : ParserRuleContext {
		public TurnactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_turnaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTurnaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTurnaction(this);
		}
	}

	[RuleVersion(0)]
	public TurnactionContext turnaction() {
		TurnactionContext _localctx = new TurnactionContext(Context, State);
		EnterRule(_localctx, 54, RULE_turnaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409; Match(T__32);
			State = 410; Match(T__33);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatContext : ParserRuleContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public RepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRepeat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRepeat(this);
		}
	}

	[RuleVersion(0)]
	public RepeatContext repeat() {
		RepeatContext _localctx = new RepeatContext(Context, State);
		EnterRule(_localctx, 56, RULE_repeat);
		try {
			State = 419;
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 412; Match(T__34);
				State = 413; @int();
				State = 414; action();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 416; Match(T__34);
				State = 417; Match(T__12);
				State = 418; action();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardContext : ParserRuleContext {
		public MaxofContext maxof() {
			return GetRuleContext<MaxofContext>(0);
		}
		public MinofContext minof() {
			return GetRuleContext<MinofContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ActualContext actual() {
			return GetRuleContext<ActualContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_card; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCard(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCard(this);
		}
	}

	[RuleVersion(0)]
	public CardContext card() {
		CardContext _localctx = new CardContext(Context, State);
		EnterRule(_localctx, 58, RULE_card);
		try {
			State = 434;
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 421; maxof();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 422; minof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 423; var();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 424; actual();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				{
				State = 425; Match(OPEN);
				State = 429;
				switch (TokenStream.La(1)) {
				case T__35:
					{
					State = 426; Match(T__35);
					}
					break;
				case T__36:
					{
					State = 427; Match(T__36);
					}
					break;
				case T__45:
				case INTNUM:
				case OPEN:
					{
					State = 428; @int();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 431; cstorage();
				State = 432; Match(CLOSE);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ActualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actual; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterActual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitActual(this);
		}
	}

	[RuleVersion(0)]
	public ActualContext actual() {
		ActualContext _localctx = new ActualContext(Context, State);
		EnterRule(_localctx, 60, RULE_actual);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436; Match(OPEN);
			State = 437; Match(T__37);
			State = 438; card();
			State = 439; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RawstorageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public VarContext[] var() {
			return GetRuleContexts<VarContext>();
		}
		public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public RawstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rawstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRawstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRawstorage(this);
		}
	}

	[RuleVersion(0)]
	public RawstorageContext rawstorage() {
		RawstorageContext _localctx = new RawstorageContext(Context, State);
		EnterRule(_localctx, 62, RULE_rawstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441; Match(OPEN);
			State = 445;
			switch (TokenStream.La(1)) {
			case T__0:
				{
				State = 442; Match(T__0);
				}
				break;
			case OPEN:
				{
				State = 443; who();
				}
				break;
			case T__45:
				{
				State = 444; var();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 447; Match(T__38);
			State = 450;
			switch (TokenStream.La(1)) {
			case LETT:
				{
				State = 448; namegr();
				}
				break;
			case T__45:
				{
				State = 449; var();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 452; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CstorageContext : ParserRuleContext {
		public UnionofContext unionof() {
			return GetRuleContext<UnionofContext>(0);
		}
		public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public LocpreContext locpre() {
			return GetRuleContext<LocpreContext>(0);
		}
		public LocdescContext locdesc() {
			return GetRuleContext<LocdescContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public MemstorageContext memstorage() {
			return GetRuleContext<MemstorageContext>(0);
		}
		public CstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCstorage(this);
		}
	}

	[RuleVersion(0)]
	public CstorageContext cstorage() {
		CstorageContext _localctx = new CstorageContext(Context, State);
		EnterRule(_localctx, 64, RULE_cstorage);
		try {
			State = 467;
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 454; unionof();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 455; filter();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 456; Match(OPEN);
				State = 457; locpre();
				State = 458; locdesc();
				State = 461;
				switch (TokenStream.La(1)) {
				case LETT:
					{
					State = 459; namegr();
					}
					break;
				case T__45:
					{
					State = 460; var();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 463; Match(CLOSE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 465; memstorage();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 466; var();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocdescContext : ParserRuleContext {
		public LocdescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locdesc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLocdesc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLocdesc(this);
		}
	}

	[RuleVersion(0)]
	public LocdescContext locdesc() {
		LocdescContext _localctx = new LocdescContext(Context, State);
		EnterRule(_localctx, 66, RULE_locdesc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemstorageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public MemstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMemstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMemstorage(this);
		}
	}

	[RuleVersion(0)]
	public MemstorageContext memstorage() {
		MemstorageContext _localctx = new MemstorageContext(Context, State);
		EnterRule(_localctx, 68, RULE_memstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 471; Match(OPEN);
			State = 475;
			switch (TokenStream.La(1)) {
			case T__35:
				{
				State = 472; Match(T__35);
				}
				break;
			case T__36:
				{
				State = 473; Match(T__36);
				}
				break;
			case T__45:
			case INTNUM:
			case OPEN:
				{
				State = 474; @int();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 477; memset();
			State = 478; Match(CLOSE);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemsetContext : ParserRuleContext {
		public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		public MemsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memset; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMemset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMemset(this);
		}
	}

	[RuleVersion(0)]
	public MemsetContext memset() {
		MemsetContext _localctx = new MemsetContext(Context, State);
		EnterRule(_localctx, 70, RULE_memset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 480; tuple();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 72, RULE_tuple);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482; Match(OPEN);
			State = 483; Match(T__43);
			State = 484; @int();
			State = 485; cstorage();
			State = 486; Match(T__44);
			State = 487; var();
			State = 488; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 74, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490; Match(T__45);
			State = 491; namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocpreContext : ParserRuleContext {
		public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public LocpreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locpre; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLocpre(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLocpre(this);
		}
	}

	[RuleVersion(0)]
	public LocpreContext locpre() {
		LocpreContext _localctx = new LocpreContext(Context, State);
		EnterRule(_localctx, 76, RULE_locpre);
		try {
			State = 496;
			switch (TokenStream.La(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 493; Match(T__0);
				}
				break;
			case OPEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 494; who();
				}
				break;
			case T__45:
				EnterOuterAlt(_localctx, 3);
				{
				State = 495; var();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhoContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public OwnerContext owner() {
			return GetRuleContext<OwnerContext>(0);
		}
		public WhoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_who; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWho(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWho(this);
		}
	}

	[RuleVersion(0)]
	public WhoContext who() {
		WhoContext _localctx = new WhoContext(Context, State);
		EnterRule(_localctx, 78, RULE_who);
		int _la;
		try {
			State = 509;
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 498; Match(OPEN);
				State = 504;
				switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
				case 1:
					{
					State = 499; @int();
					}
					break;
				case 2:
					{
					State = 500; Match(T__24);
					}
					break;
				case 3:
					{
					State = 501; Match(T__22);
					}
					break;
				case 4:
					{
					State = 502; Match(T__23);
					}
					break;
				case 5:
					{
					State = 503; who();
					}
					break;
				}
				State = 506;
				_la = TokenStream.La(1);
				if ( !(_la==T__3 || _la==T__4) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 507; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 508; owner();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OwnerContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OwnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_owner; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterOwner(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitOwner(this);
		}
	}

	[RuleVersion(0)]
	public OwnerContext owner() {
		OwnerContext _localctx = new OwnerContext(Context, State);
		EnterRule(_localctx, 80, RULE_owner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511; Match(OPEN);
			State = 512; Match(T__46);
			State = 513; card();
			State = 514; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedContext : ParserRuleContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public TypedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTyped(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTyped(this);
		}
	}

	[RuleVersion(0)]
	public TypedContext typed() {
		TypedContext _localctx = new TypedContext(Context, State);
		EnterRule(_localctx, 82, RULE_typed);
		try {
			State = 521;
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 516; @int();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 517; boolean();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 518; namegr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 519; var();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 520; collection();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionContext : ParserRuleContext {
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public StrcollectionContext strcollection() {
			return GetRuleContext<StrcollectionContext>(0);
		}
		public CstoragecollectionContext cstoragecollection() {
			return GetRuleContext<CstoragecollectionContext>(0);
		}
		public PcollectionContext pcollection() {
			return GetRuleContext<PcollectionContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public CollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCollection(this);
		}
	}

	[RuleVersion(0)]
	public CollectionContext collection() {
		CollectionContext _localctx = new CollectionContext(Context, State);
		EnterRule(_localctx, 84, RULE_collection);
		try {
			State = 529;
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 523; cstorage();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 524; strcollection();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 525; cstoragecollection();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 526; pcollection();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 527; Match(T__4);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 528; var();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrcollectionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public StrcollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strcollection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterStrcollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitStrcollection(this);
		}
	}

	[RuleVersion(0)]
	public StrcollectionContext strcollection() {
		StrcollectionContext _localctx = new StrcollectionContext(Context, State);
		EnterRule(_localctx, 86, RULE_strcollection);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 531; Match(OPEN);
			State = 537;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 532; namegr();
					State = 533; Match(T__18);
					}
					} 
				}
				State = 539;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			State = 540; namegr();
			State = 541; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CstoragecollectionContext : ParserRuleContext {
		public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public CstoragecollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cstoragecollection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCstoragecollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCstoragecollection(this);
		}
	}

	[RuleVersion(0)]
	public CstoragecollectionContext cstoragecollection() {
		CstoragecollectionContext _localctx = new CstoragecollectionContext(Context, State);
		EnterRule(_localctx, 88, RULE_cstoragecollection);
		try {
			State = 546;
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 543; memset();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 544; agg();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 545; let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PcollectionContext : ParserRuleContext {
		public PcollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pcollection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterPcollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitPcollection(this);
		}
	}

	[RuleVersion(0)]
	public PcollectionContext pcollection() {
		PcollectionContext _localctx = new PcollectionContext(Context, State);
		EnterRule(_localctx, 90, RULE_pcollection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 548; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public TypedContext typed() {
			return GetRuleContext<TypedContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeclare(this);
		}
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(Context, State);
		EnterRule(_localctx, 92, RULE_declare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 550; Match(OPEN);
			State = 551; Match(T__47);
			State = 552; typed();
			State = 553; var();
			State = 554; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrueanyContext : ParserRuleContext {
		public ITerminalNode[] ANY() { return GetTokens(RecycleParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(RecycleParser.ANY, i);
		}
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode[] BOOLOP() { return GetTokens(RecycleParser.BOOLOP); }
		public ITerminalNode BOOLOP(int i) {
			return GetToken(RecycleParser.BOOLOP, i);
		}
		public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		public TrueanyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trueany; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTrueany(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTrueany(this);
		}
	}

	[RuleVersion(0)]
	public TrueanyContext trueany() {
		TrueanyContext _localctx = new TrueanyContext(Context, State);
		EnterRule(_localctx, 94, RULE_trueany);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 560;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 560;
					switch (TokenStream.La(1)) {
					case ANY:
						{
						State = 556; Match(ANY);
						}
						break;
					case T__45:
					case INTNUM:
					case OPEN:
						{
						State = 557; @int();
						}
						break;
					case BOOLOP:
						{
						State = 558; Match(BOOLOP);
						}
						break;
					case LETT:
						{
						State = 559; namegr();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 562;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterFilter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitFilter(this);
		}
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(Context, State);
		EnterRule(_localctx, 96, RULE_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 564; Match(OPEN);
			State = 565; Match(T__48);
			State = 566; cstorage();
			State = 567; var();
			State = 568; boolean();
			State = 569; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrcompContext : ParserRuleContext {
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public CardattContext[] cardatt() {
			return GetRuleContexts<CardattContext>();
		}
		public CardattContext cardatt(int i) {
			return GetRuleContext<CardattContext>(i);
		}
		public AttrcompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrcomp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAttrcomp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAttrcomp(this);
		}
	}

	[RuleVersion(0)]
	public AttrcompContext attrcomp() {
		AttrcompContext _localctx = new AttrcompContext(Context, State);
		EnterRule(_localctx, 98, RULE_attrcomp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571; Match(EQOP);
			State = 572; cardatt();
			State = 573; cardatt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardattContext : ParserRuleContext {
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public CardattContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cardatt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCardatt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCardatt(this);
		}
	}

	[RuleVersion(0)]
	public CardattContext cardatt() {
		CardattContext _localctx = new CardattContext(Context, State);
		EnterRule(_localctx, 100, RULE_cardatt);
		try {
			State = 586;
			switch (TokenStream.La(1)) {
			case LETT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 575; namegr();
				}
				break;
			case OPEN:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 576; Match(OPEN);
				State = 577; Match(T__49);
				State = 580;
				switch (TokenStream.La(1)) {
				case T__45:
					{
					State = 578; var();
					}
					break;
				case LETT:
					{
					State = 579; namegr();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 582; card();
				State = 583; Match(CLOSE);
				}
				}
				break;
			case T__45:
				EnterOuterAlt(_localctx, 3);
				{
				State = 585; var();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AttrcompContext attrcomp() {
			return GetRuleContext<AttrcompContext>(0);
		}
		public ITerminalNode BOOLOP() { return GetToken(RecycleParser.BOOLOP, 0); }
		public BooleanContext[] boolean() {
			return GetRuleContexts<BooleanContext>();
		}
		public BooleanContext boolean(int i) {
			return GetRuleContext<BooleanContext>(i);
		}
		public IntopContext intop() {
			return GetRuleContext<IntopContext>(0);
		}
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public ITerminalNode UNOP() { return GetToken(RecycleParser.UNOP, 0); }
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 102, RULE_boolean);
		try {
			int _alt;
			State = 612;
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 588; Match(OPEN);
				State = 607;
				switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
				case 1:
					{
					{
					State = 589; Match(BOOLOP);
					State = 590; boolean();
					State = 592;
					ErrorHandler.Sync(this);
					_alt = 1+1;
					do {
						switch (_alt) {
						case 1+1:
							{
							{
							State = 591; boolean();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 594;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
					} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					}
					break;
				case 2:
					{
					{
					State = 596; intop();
					State = 597; @int();
					State = 598; @int();
					}
					}
					break;
				case 3:
					{
					State = 600; attrcomp();
					}
					break;
				case 4:
					{
					{
					State = 601; Match(EQOP);
					State = 602; card();
					State = 603; card();
					}
					}
					break;
				case 5:
					{
					{
					State = 605; Match(UNOP);
					State = 606; boolean();
					}
					}
					break;
				}
				State = 609; Match(CLOSE);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 611; agg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntopContext : ParserRuleContext {
		public ITerminalNode COMPOP() { return GetToken(RecycleParser.COMPOP, 0); }
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public IntopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterIntop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitIntop(this);
		}
	}

	[RuleVersion(0)]
	public IntopContext intop() {
		IntopContext _localctx = new IntopContext(Context, State);
		EnterRule(_localctx, 104, RULE_intop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 614;
			_la = TokenStream.La(1);
			if ( !(_la==COMPOP || _la==EQOP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
	}

	[RuleVersion(0)]
	public AddContext add() {
		AddContext _localctx = new AddContext(Context, State);
		EnterRule(_localctx, 106, RULE_add);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 616; Match(OPEN);
			State = 617; Match(T__50);
			State = 618; @int();
			State = 619; @int();
			State = 620; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMult(this);
		}
	}

	[RuleVersion(0)]
	public MultContext mult() {
		MultContext _localctx = new MultContext(Context, State);
		EnterRule(_localctx, 108, RULE_mult);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 622; Match(OPEN);
			State = 623; Match(T__51);
			State = 624; @int();
			State = 625; @int();
			State = 626; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtractContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubtractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtract; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSubtract(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSubtract(this);
		}
	}

	[RuleVersion(0)]
	public SubtractContext subtract() {
		SubtractContext _localctx = new SubtractContext(Context, State);
		EnterRule(_localctx, 110, RULE_subtract);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 628; Match(OPEN);
			State = 629; Match(T__52);
			State = 630; @int();
			State = 631; @int();
			State = 632; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMod(this);
		}
	}

	[RuleVersion(0)]
	public ModContext mod() {
		ModContext _localctx = new ModContext(Context, State);
		EnterRule(_localctx, 112, RULE_mod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 634; Match(OPEN);
			State = 635; Match(T__53);
			State = 636; @int();
			State = 637; @int();
			State = 638; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivideContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divide; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDivide(this);
		}
	}

	[RuleVersion(0)]
	public DivideContext divide() {
		DivideContext _localctx = new DivideContext(Context, State);
		EnterRule(_localctx, 114, RULE_divide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640; Match(OPEN);
			State = 641; Match(T__54);
			State = 642; @int();
			State = 643; @int();
			State = 644; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public SizeofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSizeof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSizeof(this);
		}
	}

	[RuleVersion(0)]
	public SizeofContext @sizeof() {
		SizeofContext _localctx = new SizeofContext(Context, State);
		EnterRule(_localctx, 116, RULE_sizeof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 646; Match(OPEN);
			State = 647; Match(T__55);
			State = 651;
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 648; cstorage();
				}
				break;
			case 2:
				{
				State = 649; memset();
				}
				break;
			case 3:
				{
				State = 650; var();
				}
				break;
			}
			State = 653; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaxofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MaxofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMaxof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMaxof(this);
		}
	}

	[RuleVersion(0)]
	public MaxofContext maxof() {
		MaxofContext _localctx = new MaxofContext(Context, State);
		EnterRule(_localctx, 118, RULE_maxof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 655; Match(OPEN);
			State = 656; Match(T__7);
			State = 657; cstorage();
			State = 658; Match(T__44);
			State = 659; var();
			State = 660; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MinofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMinof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMinof(this);
		}
	}

	[RuleVersion(0)]
	public MinofContext minof() {
		MinofContext _localctx = new MinofContext(Context, State);
		EnterRule(_localctx, 120, RULE_minof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 662; Match(OPEN);
			State = 663; Match(T__6);
			State = 664; cstorage();
			State = 665; Match(T__44);
			State = 666; var();
			State = 667; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public CstorageContext[] cstorage() {
			return GetRuleContexts<CstorageContext>();
		}
		public CstorageContext cstorage(int i) {
			return GetRuleContext<CstorageContext>(i);
		}
		public UnionofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterUnionof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitUnionof(this);
		}
	}

	[RuleVersion(0)]
	public UnionofContext unionof() {
		UnionofContext _localctx = new UnionofContext(Context, State);
		EnterRule(_localctx, 122, RULE_unionof);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 669; Match(OPEN);
			State = 670; Match(T__56);
			State = 677;
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 672;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 671; cstorage();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 674;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			case 2:
				{
				State = 676; agg();
				}
				break;
			}
			State = 679; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSum(this);
		}
	}

	[RuleVersion(0)]
	public SumContext sum() {
		SumContext _localctx = new SumContext(Context, State);
		EnterRule(_localctx, 124, RULE_sum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681; Match(OPEN);
			State = 682; Match(T__57);
			State = 683; cstorage();
			State = 684; Match(T__44);
			State = 685; var();
			State = 686; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoreContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ScoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_score; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterScore(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitScore(this);
		}
	}

	[RuleVersion(0)]
	public ScoreContext score() {
		ScoreContext _localctx = new ScoreContext(Context, State);
		EnterRule(_localctx, 126, RULE_score);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688; Match(OPEN);
			State = 689; Match(T__58);
			State = 690; card();
			State = 691; Match(T__44);
			State = 692; var();
			State = 693; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		public SizeofContext @sizeof() {
			return GetRuleContext<SizeofContext>(0);
		}
		public MultContext mult() {
			return GetRuleContext<MultContext>(0);
		}
		public SubtractContext subtract() {
			return GetRuleContext<SubtractContext>(0);
		}
		public ModContext mod() {
			return GetRuleContext<ModContext>(0);
		}
		public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public ScoreContext score() {
			return GetRuleContext<ScoreContext>(0);
		}
		public ITerminalNode[] INTNUM() { return GetTokens(RecycleParser.INTNUM); }
		public ITerminalNode INTNUM(int i) {
			return GetToken(RecycleParser.INTNUM, i);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 128, RULE_int);
		try {
			int _alt;
			State = 710;
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 695; @sizeof();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 696; mult();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 697; subtract();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 698; mod();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 699; add();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 700; divide();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 701; sum();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 702; rawstorage();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 703; score();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 705;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 704; Match(INTNUM);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 707;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 709; var();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamegrContext : ParserRuleContext {
		public ITerminalNode[] LETT() { return GetTokens(RecycleParser.LETT); }
		public ITerminalNode LETT(int i) {
			return GetToken(RecycleParser.LETT, i);
		}
		public NamegrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namegr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterNamegr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitNamegr(this);
		}
	}

	[RuleVersion(0)]
	public NamegrContext namegr() {
		NamegrContext _localctx = new NamegrContext(Context, State);
		EnterRule(_localctx, 130, RULE_namegr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 713;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 712; Match(LETT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 715;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3G\x2D0\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x3\x2\x3\x2\x3\x2\a\x2\x8A"+
		"\n\x2\f\x2\xE\x2\x8D\v\x2\x3\x2\x3\x2\x3\x2\x6\x2\x92\n\x2\r\x2\xE\x2"+
		"\x93\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x6\x3\xA3\n\x3\r\x3\xE\x3\xA4\x3\x3\x3\x3\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x6\x4\xAF\n\x4\r\x4\xE\x4\xB0\x3\x4\x3\x4\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\xCD\n\a\x3"+
		"\a\x3\a\x3\a\x5\a\xD2\n\a\x3\b\x3\b\x3\b\x3\b\x6\b\xD8\n\b\r\b\xE\b\xD9"+
		"\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x6\b\xE3\n\b\r\b\xE\b\xE4\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x5\b\xEC\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x5\t\xFA\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3"+
		"\n\x3\n\x5\n\x105\n\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5"+
		"\v\x110\n\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\x119\n\f\x3\f\x3\f"+
		"\x3\r\x3\r\x3\r\x6\r\x120\n\r\r\r\xE\r\x121\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x5\xE\x12A\n\xE\x3\xF\x3\xF\x3\xF\x6\xF\x12F\n\xF\r\xF\xE\xF"+
		"\x130\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\a\x10\x138\n\x10\f\x10\xE\x10\x13B"+
		"\v\x10\x3\x10\x3\x10\a\x10\x13F\n\x10\f\x10\xE\x10\x142\v\x10\x3\x10\x3"+
		"\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\a\x11\x14B\n\x11\f\x11\xE\x11"+
		"\x14E\v\x11\x3\x11\x3\x11\a\x11\x152\n\x11\f\x11\xE\x11\x155\v\x11\x3"+
		"\x11\x3\x11\x5\x11\x159\n\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x6\x12"+
		"\x160\n\x12\r\x12\xE\x12\x161\x3\x12\x3\x12\x3\x13\x3\x13\x6\x13\x168"+
		"\n\x13\r\x13\xE\x13\x169\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3"+
		"\x14\x3\x14\x3\x14\x3\x14\x5\x14\x176\n\x14\x3\x14\x3\x14\x3\x15\x3\x15"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x180\n\x15\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3"+
		"\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x5\x1E\x1A6\n\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x1B0\n\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x1B5"+
		"\n\x1F\x3 \x3 \x3 \x3 \x3 \x3!\x3!\x3!\x3!\x5!\x1C0\n!\x3!\x3!\x3!\x5"+
		"!\x1C5\n!\x3!\x3!\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x5\"\x1D0\n\"\x3"+
		"\"\x3\"\x3\"\x3\"\x5\"\x1D6\n\"\x3#\x3#\x3$\x3$\x3$\x3$\x5$\x1DE\n$\x3"+
		"$\x3$\x3$\x3%\x3%\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3\'\x3\'\x3\'\x3(\x3"+
		"(\x3(\x5(\x1F3\n(\x3)\x3)\x3)\x3)\x3)\x3)\x5)\x1FB\n)\x3)\x3)\x3)\x5)"+
		"\x200\n)\x3*\x3*\x3*\x3*\x3*\x3+\x3+\x3+\x3+\x3+\x5+\x20C\n+\x3,\x3,\x3"+
		",\x3,\x3,\x3,\x5,\x214\n,\x3-\x3-\x3-\x3-\a-\x21A\n-\f-\xE-\x21D\v-\x3"+
		"-\x3-\x3-\x3.\x3.\x3.\x5.\x225\n.\x3/\x3/\x3\x30\x3\x30\x3\x30\x3\x30"+
		"\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31\x3\x31\x6\x31\x233\n\x31\r\x31\xE"+
		"\x31\x234\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x33\x3\x33"+
		"\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x5\x34\x247\n\x34\x3"+
		"\x34\x3\x34\x3\x34\x3\x34\x5\x34\x24D\n\x34\x3\x35\x3\x35\x3\x35\x3\x35"+
		"\x6\x35\x253\n\x35\r\x35\xE\x35\x254\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35"+
		"\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x262\n\x35\x3\x35\x3"+
		"\x35\x3\x35\x5\x35\x267\n\x35\x3\x36\x3\x36\x3\x37\x3\x37\x3\x37\x3\x37"+
		"\x3\x37\x3\x37\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x39\x3\x39"+
		"\x3\x39\x3\x39\x3\x39\x3\x39\x3:\x3:\x3:\x3:\x3:\x3:\x3;\x3;\x3;\x3;\x3"+
		";\x3;\x3<\x3<\x3<\x3<\x3<\x5<\x28E\n<\x3<\x3<\x3=\x3=\x3=\x3=\x3=\x3="+
		"\x3=\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3?\x3?\x3?\x6?\x2A3\n?\r?\xE?\x2A4\x3"+
		"?\x5?\x2A8\n?\x3?\x3?\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3\x41\x3\x41\x3\x41"+
		"\x3\x41\x3\x41\x3\x41\x3\x41\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42"+
		"\x3\x42\x3\x42\x3\x42\x3\x42\x6\x42\x2C4\n\x42\r\x42\xE\x42\x2C5\x3\x42"+
		"\x5\x42\x2C9\n\x42\x3\x43\x6\x43\x2CC\n\x43\r\x43\xE\x43\x2CD\x3\x43\x14"+
		"\x8B\x93\xA4\xB0\xD9\xE4\x121\x130\x139\x140\x14C\x153\x161\x169\x21B"+
		"\x234\x254\x2A4\x2\x44\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E"+
		" \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66"+
		"hjlnprtvxz|~\x80\x82\x84\x2\b\x3\x2\x6\a\x3\x2\t\n\x3\x2\xE\xF\x3\x2\x19"+
		"\x1A\x3\x2*-\x3\x2?@\x2FE\x2\x86\x3\x2\x2\x2\x4\x98\x3\x2\x2\x2\x6\xA8"+
		"\x3\x2\x2\x2\b\xB4\x3\x2\x2\x2\n\xB9\x3\x2\x2\x2\f\xD1\x3\x2\x2\x2\xE"+
		"\xEB\x3\x2\x2\x2\x10\xF9\x3\x2\x2\x2\x12\xFB\x3\x2\x2\x2\x14\x108\x3\x2"+
		"\x2\x2\x16\x113\x3\x2\x2\x2\x18\x11C\x3\x2\x2\x2\x1A\x129\x3\x2\x2\x2"+
		"\x1C\x12B\x3\x2\x2\x2\x1E\x134\x3\x2\x2\x2 \x158\x3\x2\x2\x2\"\x15A\x3"+
		"\x2\x2\x2$\x165\x3\x2\x2\x2&\x16E\x3\x2\x2\x2(\x179\x3\x2\x2\x2*\x181"+
		"\x3\x2\x2\x2,\x185\x3\x2\x2\x2.\x189\x3\x2\x2\x2\x30\x18D\x3\x2\x2\x2"+
		"\x32\x191\x3\x2\x2\x2\x34\x195\x3\x2\x2\x2\x36\x198\x3\x2\x2\x2\x38\x19B"+
		"\x3\x2\x2\x2:\x1A5\x3\x2\x2\x2<\x1B4\x3\x2\x2\x2>\x1B6\x3\x2\x2\x2@\x1BB"+
		"\x3\x2\x2\x2\x42\x1D5\x3\x2\x2\x2\x44\x1D7\x3\x2\x2\x2\x46\x1D9\x3\x2"+
		"\x2\x2H\x1E2\x3\x2\x2\x2J\x1E4\x3\x2\x2\x2L\x1EC\x3\x2\x2\x2N\x1F2\x3"+
		"\x2\x2\x2P\x1FF\x3\x2\x2\x2R\x201\x3\x2\x2\x2T\x20B\x3\x2\x2\x2V\x213"+
		"\x3\x2\x2\x2X\x215\x3\x2\x2\x2Z\x224\x3\x2\x2\x2\\\x226\x3\x2\x2\x2^\x228"+
		"\x3\x2\x2\x2`\x232\x3\x2\x2\x2\x62\x236\x3\x2\x2\x2\x64\x23D\x3\x2\x2"+
		"\x2\x66\x24C\x3\x2\x2\x2h\x266\x3\x2\x2\x2j\x268\x3\x2\x2\x2l\x26A\x3"+
		"\x2\x2\x2n\x270\x3\x2\x2\x2p\x276\x3\x2\x2\x2r\x27C\x3\x2\x2\x2t\x282"+
		"\x3\x2\x2\x2v\x288\x3\x2\x2\x2x\x291\x3\x2\x2\x2z\x298\x3\x2\x2\x2|\x29F"+
		"\x3\x2\x2\x2~\x2AB\x3\x2\x2\x2\x80\x2B2\x3\x2\x2\x2\x82\x2C8\x3\x2\x2"+
		"\x2\x84\x2CB\x3\x2\x2\x2\x86\x87\a\x44\x2\x2\x87\x8B\a\x3\x2\x2\x88\x8A"+
		"\x5^\x30\x2\x89\x88\x3\x2\x2\x2\x8A\x8D\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2"+
		"\x8B\x89\x3\x2\x2\x2\x8C\x8E\x3\x2\x2\x2\x8D\x8B\x3\x2\x2\x2\x8E\x91\x5"+
		"\x4\x3\x2\x8F\x92\x5\xE\b\x2\x90\x92\x5\x6\x4\x2\x91\x8F\x3\x2\x2\x2\x91"+
		"\x90\x3\x2\x2\x2\x92\x93\x3\x2\x2\x2\x93\x94\x3\x2\x2\x2\x93\x91\x3\x2"+
		"\x2\x2\x94\x95\x3\x2\x2\x2\x95\x96\x5\b\x5\x2\x96\x97\a\x45\x2\x2\x97"+
		"\x3\x3\x2\x2\x2\x98\x99\a\x44\x2\x2\x99\x9A\a\x4\x2\x2\x9A\x9B\x5\x16"+
		"\f\x2\x9B\x9C\a\x44\x2\x2\x9C\x9D\x5\x18\r\x2\x9D\xA2\a\x45\x2\x2\x9E"+
		"\x9F\a\x44\x2\x2\x9F\xA0\x5\x1A\xE\x2\xA0\xA1\a\x45\x2\x2\xA1\xA3\x3\x2"+
		"\x2\x2\xA2\x9E\x3\x2\x2\x2\xA3\xA4\x3\x2\x2\x2\xA4\xA5\x3\x2\x2\x2\xA4"+
		"\xA2\x3\x2\x2\x2\xA5\xA6\x3\x2\x2\x2\xA6\xA7\a\x45\x2\x2\xA7\x5\x3\x2"+
		"\x2\x2\xA8\xA9\a\x44\x2\x2\xA9\xAA\a\x5\x2\x2\xAA\xAB\t\x2\x2\x2\xAB\xAE"+
		"\x5\n\x6\x2\xAC\xAF\x5\xE\b\x2\xAD\xAF\x5\x6\x4\x2\xAE\xAC\x3\x2\x2\x2"+
		"\xAE\xAD\x3\x2\x2\x2\xAF\xB0\x3\x2\x2\x2\xB0\xB1\x3\x2\x2\x2\xB0\xAE\x3"+
		"\x2\x2\x2\xB1\xB2\x3\x2\x2\x2\xB2\xB3\a\x45\x2\x2\xB3\a\x3\x2\x2\x2\xB4"+
		"\xB5\a\x44\x2\x2\xB5\xB6\a\b\x2\x2\xB6\xB7\t\x3\x2\x2\xB7\xB8\x5\x82\x42"+
		"\x2\xB8\t\x3\x2\x2\x2\xB9\xBA\a\x44\x2\x2\xBA\xBB\a\v\x2\x2\xBB\xBC\x5"+
		"h\x35\x2\xBC\xBD\a\x45\x2\x2\xBD\v\x3\x2\x2\x2\xBE\xCC\a\x44\x2\x2\xBF"+
		"\xCD\x5\"\x12\x2\xC0\xCD\x5\x18\r\x2\xC1\xCD\x5\x1A\xE\x2\xC2\xCD\x5("+
		"\x15\x2\xC3\xCD\x5*\x16\x2\xC4\xCD\x5\x30\x19\x2\xC5\xCD\x5\x32\x1A\x2"+
		"\xC6\xCD\x5,\x17\x2\xC7\xCD\x5.\x18\x2\xC8\xCD\x5\x34\x1B\x2\xC9\xCD\x5"+
		"\x38\x1D\x2\xCA\xCD\x5\x36\x1C\x2\xCB\xCD\x5:\x1E\x2\xCC\xBF\x3\x2\x2"+
		"\x2\xCC\xC0\x3\x2\x2\x2\xCC\xC1\x3\x2\x2\x2\xCC\xC2\x3\x2\x2\x2\xCC\xC3"+
		"\x3\x2\x2\x2\xCC\xC4\x3\x2\x2\x2\xCC\xC5\x3\x2\x2\x2\xCC\xC6\x3\x2\x2"+
		"\x2\xCC\xC7\x3\x2\x2\x2\xCC\xC8\x3\x2\x2\x2\xCC\xC9\x3\x2\x2\x2\xCC\xCA"+
		"\x3\x2\x2\x2\xCC\xCB\x3\x2\x2\x2\xCD\xCE\x3\x2\x2\x2\xCE\xCF\a\x45\x2"+
		"\x2\xCF\xD2\x3\x2\x2\x2\xD0\xD2\x5\x12\n\x2\xD1\xBE\x3\x2\x2\x2\xD1\xD0"+
		"\x3\x2\x2\x2\xD2\r\x3\x2\x2\x2\xD3\xD4\a\x44\x2\x2\xD4\xD5\a\f\x2\x2\xD5"+
		"\xD7\a\x44\x2\x2\xD6\xD8\x5\x10\t\x2\xD7\xD6\x3\x2\x2\x2\xD8\xD9\x3\x2"+
		"\x2\x2\xD9\xDA\x3\x2\x2\x2\xD9\xD7\x3\x2\x2\x2\xDA\xDB\x3\x2\x2\x2\xDB"+
		"\xDC\a\x45\x2\x2\xDC\xDD\a\x45\x2\x2\xDD\xEC\x3\x2\x2\x2\xDE\xDF\a\x44"+
		"\x2\x2\xDF\xE0\a\r\x2\x2\xE0\xE2\a\x44\x2\x2\xE1\xE3\x5\x10\t\x2\xE2\xE1"+
		"\x3\x2\x2\x2\xE3\xE4\x3\x2\x2\x2\xE4\xE5\x3\x2\x2\x2\xE4\xE2\x3\x2\x2"+
		"\x2\xE5\xE6\x3\x2\x2\x2\xE6\xE7\a\x45\x2\x2\xE7\xE8\a\x45\x2\x2\xE8\xEC"+
		"\x3\x2\x2\x2\xE9\xEC\x5\x12\n\x2\xEA\xEC\x5\x14\v\x2\xEB\xD3\x3\x2\x2"+
		"\x2\xEB\xDE\x3\x2\x2\x2\xEB\xE9\x3\x2\x2\x2\xEB\xEA\x3\x2\x2\x2\xEC\xF"+
		"\x3\x2\x2\x2\xED\xEE\a\x44\x2\x2\xEE\xEF\x5h\x35\x2\xEF\xF0\x5\xE\b\x2"+
		"\xF0\xF1\a\x45\x2\x2\xF1\xFA\x3\x2\x2\x2\xF2\xFA\x5\xE\b\x2\xF3\xF4\a"+
		"\x44\x2\x2\xF4\xF5\x5h\x35\x2\xF5\xF6\x5\f\a\x2\xF6\xF7\a\x45\x2\x2\xF7"+
		"\xFA\x3\x2\x2\x2\xF8\xFA\x5\f\a\x2\xF9\xED\x3\x2\x2\x2\xF9\xF2\x3\x2\x2"+
		"\x2\xF9\xF3\x3\x2\x2\x2\xF9\xF8\x3\x2\x2\x2\xFA\x11\x3\x2\x2\x2\xFB\xFC"+
		"\a\x44\x2\x2\xFC\xFD\t\x4\x2\x2\xFD\xFE\x5V,\x2\xFE\x104\x5L\'\x2\xFF"+
		"\x105\x5\xE\b\x2\x100\x105\x5\f\a\x2\x101\x105\x5h\x35\x2\x102\x105\x5"+
		"\x42\"\x2\x103\x105\x5\x10\t\x2\x104\xFF\x3\x2\x2\x2\x104\x100\x3\x2\x2"+
		"\x2\x104\x101\x3\x2\x2\x2\x104\x102\x3\x2\x2\x2\x104\x103\x3\x2\x2\x2"+
		"\x105\x106\x3\x2\x2\x2\x106\x107\a\x45\x2\x2\x107\x13\x3\x2\x2\x2\x108"+
		"\x109\a\x44\x2\x2\x109\x10A\a\x10\x2\x2\x10A\x10B\x5T+\x2\x10B\x10F\x5"+
		"L\'\x2\x10C\x110\x5\xE\b\x2\x10D\x110\x5\f\a\x2\x10E\x110\x5\x10\t\x2"+
		"\x10F\x10C\x3\x2\x2\x2\x10F\x10D\x3\x2\x2\x2\x10F\x10E\x3\x2\x2\x2\x110"+
		"\x111\x3\x2\x2\x2\x111\x112\a\x45\x2\x2\x112\x15\x3\x2\x2\x2\x113\x114"+
		"\a\x44\x2\x2\x114\x115\a\x11\x2\x2\x115\x118\a\x12\x2\x2\x116\x119\x5"+
		"\x82\x42\x2\x117\x119\x5L\'\x2\x118\x116\x3\x2\x2\x2\x118\x117\x3\x2\x2"+
		"\x2\x119\x11A\x3\x2\x2\x2\x11A\x11B\a\x45\x2\x2\x11B\x17\x3\x2\x2\x2\x11C"+
		"\x11D\a\x11\x2\x2\x11D\x11F\a\x13\x2\x2\x11E\x120\x5\x1E\x10\x2\x11F\x11E"+
		"\x3\x2\x2\x2\x120\x121\x3\x2\x2\x2\x121\x122\x3\x2\x2\x2\x121\x11F\x3"+
		"\x2\x2\x2\x122\x19\x3\x2\x2\x2\x123\x124\a\x11\x2\x2\x124\x125\a\x14\x2"+
		"\x2\x125\x126\x5\x42\"\x2\x126\x127\x5\x1C\xF\x2\x127\x12A\x3\x2\x2\x2"+
		"\x128\x12A\x5:\x1E\x2\x129\x123\x3\x2\x2\x2\x129\x128\x3\x2\x2\x2\x12A"+
		"\x1B\x3\x2\x2\x2\x12B\x12C\a\x44\x2\x2\x12C\x12E\a\x14\x2\x2\x12D\x12F"+
		"\x5 \x11\x2\x12E\x12D\x3\x2\x2\x2\x12F\x130\x3\x2\x2\x2\x130\x131\x3\x2"+
		"\x2\x2\x130\x12E\x3\x2\x2\x2\x131\x132\x3\x2\x2\x2\x132\x133\a\x45\x2"+
		"\x2\x133\x1D\x3\x2\x2\x2\x134\x139\a\x44\x2\x2\x135\x136\a\x42\x2\x2\x136"+
		"\x138\a\x15\x2\x2\x137\x135\x3\x2\x2\x2\x138\x13B\x3\x2\x2\x2\x139\x13A"+
		"\x3\x2\x2\x2\x139\x137\x3\x2\x2\x2\x13A\x13C\x3\x2\x2\x2\x13B\x139\x3"+
		"\x2\x2\x2\x13C\x140\a\x42\x2\x2\x13D\x13F\x5\x1E\x10\x2\x13E\x13D\x3\x2"+
		"\x2\x2\x13F\x142\x3\x2\x2\x2\x140\x141\x3\x2\x2\x2\x140\x13E\x3\x2\x2"+
		"\x2\x141\x143\x3\x2\x2\x2\x142\x140\x3\x2\x2\x2\x143\x144\a\x45\x2\x2"+
		"\x144\x1F\x3\x2\x2\x2\x145\x159\x5L\'\x2\x146\x14C\a\x44\x2\x2\x147\x148"+
		"\x5\x84\x43\x2\x148\x149\a\x15\x2\x2\x149\x14B\x3\x2\x2\x2\x14A\x147\x3"+
		"\x2\x2\x2\x14B\x14E\x3\x2\x2\x2\x14C\x14D\x3\x2\x2\x2\x14C\x14A\x3\x2"+
		"\x2\x2\x14D\x14F\x3\x2\x2\x2\x14E\x14C\x3\x2\x2\x2\x14F\x153\x5\x84\x43"+
		"\x2\x150\x152\x5 \x11\x2\x151\x150\x3\x2\x2\x2\x152\x155\x3\x2\x2\x2\x153"+
		"\x154\x3\x2\x2\x2\x153\x151\x3\x2\x2\x2\x154\x156\x3\x2\x2\x2\x155\x153"+
		"\x3\x2\x2\x2\x156\x157\a\x45\x2\x2\x157\x159\x3\x2\x2\x2\x158\x145\x3"+
		"\x2\x2\x2\x158\x146\x3\x2\x2\x2\x159!\x3\x2\x2\x2\x15A\x15B\a\x16\x2\x2"+
		"\x15B\x15C\a\x17\x2\x2\x15C\x15D\x5L\'\x2\x15D\x15F\a\x44\x2\x2\x15E\x160"+
		"\x5$\x13\x2\x15F\x15E\x3\x2\x2\x2\x160\x161\x3\x2\x2\x2\x161\x162\x3\x2"+
		"\x2\x2\x161\x15F\x3\x2\x2\x2\x162\x163\x3\x2\x2\x2\x163\x164\a\x45\x2"+
		"\x2\x164#\x3\x2\x2\x2\x165\x167\a\x44\x2\x2\x166\x168\x5&\x14\x2\x167"+
		"\x166\x3\x2\x2\x2\x168\x169\x3\x2\x2\x2\x169\x16A\x3\x2\x2\x2\x169\x167"+
		"\x3\x2\x2\x2\x16A\x16B\x3\x2\x2\x2\x16B\x16C\x5\x82\x42\x2\x16C\x16D\a"+
		"\x45\x2\x2\x16D%\x3\x2\x2\x2\x16E\x16F\a\x44\x2\x2\x16F\x175\x5\x84\x43"+
		"\x2\x170\x171\a\x44\x2\x2\x171\x172\x5`\x31\x2\x172\x173\a\x45\x2\x2\x173"+
		"\x176\x3\x2\x2\x2\x174\x176\x5\x66\x34\x2\x175\x170\x3\x2\x2\x2\x175\x174"+
		"\x3\x2\x2\x2\x176\x177\x3\x2\x2\x2\x177\x178\a\x45\x2\x2\x178\'\x3\x2"+
		"\x2\x2\x179\x17A\a\x18\x2\x2\x17A\x17F\t\x5\x2\x2\x17B\x180\x5R*\x2\x17C"+
		"\x180\a\x1A\x2\x2\x17D\x180\a\x19\x2\x2\x17E\x180\a\x1B\x2\x2\x17F\x17B"+
		"\x3\x2\x2\x2\x17F\x17C\x3\x2\x2\x2\x17F\x17D\x3\x2\x2\x2\x17F\x17E\x3"+
		"\x2\x2\x2\x180)\x3\x2\x2\x2\x181\x182\a\x1C\x2\x2\x182\x183\x5@!\x2\x183"+
		"\x184\x5\x82\x42\x2\x184+\x3\x2\x2\x2\x185\x186\a\x1D\x2\x2\x186\x187"+
		"\x5@!\x2\x187\x188\x5\x82\x42\x2\x188-\x3\x2\x2\x2\x189\x18A\a\x1E\x2"+
		"\x2\x18A\x18B\x5@!\x2\x18B\x18C\x5\x82\x42\x2\x18C/\x3\x2\x2\x2\x18D\x18E"+
		"\a\x1F\x2\x2\x18E\x18F\x5<\x1F\x2\x18F\x190\x5<\x1F\x2\x190\x31\x3\x2"+
		"\x2\x2\x191\x192\a \x2\x2\x192\x193\x5<\x1F\x2\x193\x194\x5<\x1F\x2\x194"+
		"\x33\x3\x2\x2\x2\x195\x196\a!\x2\x2\x196\x197\x5<\x1F\x2\x197\x35\x3\x2"+
		"\x2\x2\x198\x199\a\"\x2\x2\x199\x19A\x5\x42\"\x2\x19A\x37\x3\x2\x2\x2"+
		"\x19B\x19C\a#\x2\x2\x19C\x19D\a$\x2\x2\x19D\x39\x3\x2\x2\x2\x19E\x19F"+
		"\a%\x2\x2\x19F\x1A0\x5\x82\x42\x2\x1A0\x1A1\x5\f\a\x2\x1A1\x1A6\x3\x2"+
		"\x2\x2\x1A2\x1A3\a%\x2\x2\x1A3\x1A4\a\xF\x2\x2\x1A4\x1A6\x5\f\a\x2\x1A5"+
		"\x19E\x3\x2\x2\x2\x1A5\x1A2\x3\x2\x2\x2\x1A6;\x3\x2\x2\x2\x1A7\x1B5\x5"+
		"x=\x2\x1A8\x1B5\x5z>\x2\x1A9\x1B5\x5L\'\x2\x1AA\x1B5\x5> \x2\x1AB\x1AF"+
		"\a\x44\x2\x2\x1AC\x1B0\a&\x2\x2\x1AD\x1B0\a\'\x2\x2\x1AE\x1B0\x5\x82\x42"+
		"\x2\x1AF\x1AC\x3\x2\x2\x2\x1AF\x1AD\x3\x2\x2\x2\x1AF\x1AE\x3\x2\x2\x2"+
		"\x1B0\x1B1\x3\x2\x2\x2\x1B1\x1B2\x5\x42\"\x2\x1B2\x1B3\a\x45\x2\x2\x1B3"+
		"\x1B5\x3\x2\x2\x2\x1B4\x1A7\x3\x2\x2\x2\x1B4\x1A8\x3\x2\x2\x2\x1B4\x1A9"+
		"\x3\x2\x2\x2\x1B4\x1AA\x3\x2\x2\x2\x1B4\x1AB\x3\x2\x2\x2\x1B5=\x3\x2\x2"+
		"\x2\x1B6\x1B7\a\x44\x2\x2\x1B7\x1B8\a(\x2\x2\x1B8\x1B9\x5<\x1F\x2\x1B9"+
		"\x1BA\a\x45\x2\x2\x1BA?\x3\x2\x2\x2\x1BB\x1BF\a\x44\x2\x2\x1BC\x1C0\a"+
		"\x3\x2\x2\x1BD\x1C0\x5P)\x2\x1BE\x1C0\x5L\'\x2\x1BF\x1BC\x3\x2\x2\x2\x1BF"+
		"\x1BD\x3\x2\x2\x2\x1BF\x1BE\x3\x2\x2\x2\x1C0\x1C1\x3\x2\x2\x2\x1C1\x1C4"+
		"\a)\x2\x2\x1C2\x1C5\x5\x84\x43\x2\x1C3\x1C5\x5L\'\x2\x1C4\x1C2\x3\x2\x2"+
		"\x2\x1C4\x1C3\x3\x2\x2\x2\x1C5\x1C6\x3\x2\x2\x2\x1C6\x1C7\a\x45\x2\x2"+
		"\x1C7\x41\x3\x2\x2\x2\x1C8\x1D6\x5|?\x2\x1C9\x1D6\x5\x62\x32\x2\x1CA\x1CB"+
		"\a\x44\x2\x2\x1CB\x1CC\x5N(\x2\x1CC\x1CF\x5\x44#\x2\x1CD\x1D0\x5\x84\x43"+
		"\x2\x1CE\x1D0\x5L\'\x2\x1CF\x1CD\x3\x2\x2\x2\x1CF\x1CE\x3\x2\x2\x2\x1D0"+
		"\x1D1\x3\x2\x2\x2\x1D1\x1D2\a\x45\x2\x2\x1D2\x1D6\x3\x2\x2\x2\x1D3\x1D6"+
		"\x5\x46$\x2\x1D4\x1D6\x5L\'\x2\x1D5\x1C8\x3\x2\x2\x2\x1D5\x1C9\x3\x2\x2"+
		"\x2\x1D5\x1CA\x3\x2\x2\x2\x1D5\x1D3\x3\x2\x2\x2\x1D5\x1D4\x3\x2\x2\x2"+
		"\x1D6\x43\x3\x2\x2\x2\x1D7\x1D8\t\x6\x2\x2\x1D8\x45\x3\x2\x2\x2\x1D9\x1DD"+
		"\a\x44\x2\x2\x1DA\x1DE\a&\x2\x2\x1DB\x1DE\a\'\x2\x2\x1DC\x1DE\x5\x82\x42"+
		"\x2\x1DD\x1DA\x3\x2\x2\x2\x1DD\x1DB\x3\x2\x2\x2\x1DD\x1DC\x3\x2\x2\x2"+
		"\x1DE\x1DF\x3\x2\x2\x2\x1DF\x1E0\x5H%\x2\x1E0\x1E1\a\x45\x2\x2\x1E1G\x3"+
		"\x2\x2\x2\x1E2\x1E3\x5J&\x2\x1E3I\x3\x2\x2\x2\x1E4\x1E5\a\x44\x2\x2\x1E5"+
		"\x1E6\a.\x2\x2\x1E6\x1E7\x5\x82\x42\x2\x1E7\x1E8\x5\x42\"\x2\x1E8\x1E9"+
		"\a/\x2\x2\x1E9\x1EA\x5L\'\x2\x1EA\x1EB\a\x45\x2\x2\x1EBK\x3\x2\x2\x2\x1EC"+
		"\x1ED\a\x30\x2\x2\x1ED\x1EE\x5\x84\x43\x2\x1EEM\x3\x2\x2\x2\x1EF\x1F3"+
		"\a\x3\x2\x2\x1F0\x1F3\x5P)\x2\x1F1\x1F3\x5L\'\x2\x1F2\x1EF\x3\x2\x2\x2"+
		"\x1F2\x1F0\x3\x2\x2\x2\x1F2\x1F1\x3\x2\x2\x2\x1F3O\x3\x2\x2\x2\x1F4\x1FA"+
		"\a\x44\x2\x2\x1F5\x1FB\x5\x82\x42\x2\x1F6\x1FB\a\x1B\x2\x2\x1F7\x1FB\a"+
		"\x19\x2\x2\x1F8\x1FB\a\x1A\x2\x2\x1F9\x1FB\x5P)\x2\x1FA\x1F5\x3\x2\x2"+
		"\x2\x1FA\x1F6\x3\x2\x2\x2\x1FA\x1F7\x3\x2\x2\x2\x1FA\x1F8\x3\x2\x2\x2"+
		"\x1FA\x1F9\x3\x2\x2\x2\x1FB\x1FC\x3\x2\x2\x2\x1FC\x1FD\t\x2\x2\x2\x1FD"+
		"\x200\a\x45\x2\x2\x1FE\x200\x5R*\x2\x1FF\x1F4\x3\x2\x2\x2\x1FF\x1FE\x3"+
		"\x2\x2\x2\x200Q\x3\x2\x2\x2\x201\x202\a\x44\x2\x2\x202\x203\a\x31\x2\x2"+
		"\x203\x204\x5<\x1F\x2\x204\x205\a\x45\x2\x2\x205S\x3\x2\x2\x2\x206\x20C"+
		"\x5\x82\x42\x2\x207\x20C\x5h\x35\x2\x208\x20C\x5\x84\x43\x2\x209\x20C"+
		"\x5L\'\x2\x20A\x20C\x5V,\x2\x20B\x206\x3\x2\x2\x2\x20B\x207\x3\x2\x2\x2"+
		"\x20B\x208\x3\x2\x2\x2\x20B\x209\x3\x2\x2\x2\x20B\x20A\x3\x2\x2\x2\x20C"+
		"U\x3\x2\x2\x2\x20D\x214\x5\x42\"\x2\x20E\x214\x5X-\x2\x20F\x214\x5Z.\x2"+
		"\x210\x214\x5\\/\x2\x211\x214\a\a\x2\x2\x212\x214\x5L\'\x2\x213\x20D\x3"+
		"\x2\x2\x2\x213\x20E\x3\x2\x2\x2\x213\x20F\x3\x2\x2\x2\x213\x210\x3\x2"+
		"\x2\x2\x213\x211\x3\x2\x2\x2\x213\x212\x3\x2\x2\x2\x214W\x3\x2\x2\x2\x215"+
		"\x21B\a\x44\x2\x2\x216\x217\x5\x84\x43\x2\x217\x218\a\x15\x2\x2\x218\x21A"+
		"\x3\x2\x2\x2\x219\x216\x3\x2\x2\x2\x21A\x21D\x3\x2\x2\x2\x21B\x21C\x3"+
		"\x2\x2\x2\x21B\x219\x3\x2\x2\x2\x21C\x21E\x3\x2\x2\x2\x21D\x21B\x3\x2"+
		"\x2\x2\x21E\x21F\x5\x84\x43\x2\x21F\x220\a\x45\x2\x2\x220Y\x3\x2\x2\x2"+
		"\x221\x225\x5H%\x2\x222\x225\x5\x12\n\x2\x223\x225\x5\x14\v\x2\x224\x221"+
		"\x3\x2\x2\x2\x224\x222\x3\x2\x2\x2\x224\x223\x3\x2\x2\x2\x225[\x3\x2\x2"+
		"\x2\x226\x227\a\x6\x2\x2\x227]\x3\x2\x2\x2\x228\x229\a\x44\x2\x2\x229"+
		"\x22A\a\x32\x2\x2\x22A\x22B\x5T+\x2\x22B\x22C\x5L\'\x2\x22C\x22D\a\x45"+
		"\x2\x2\x22D_\x3\x2\x2\x2\x22E\x233\aG\x2\x2\x22F\x233\x5\x82\x42\x2\x230"+
		"\x233\a>\x2\x2\x231\x233\x5\x84\x43\x2\x232\x22E\x3\x2\x2\x2\x232\x22F"+
		"\x3\x2\x2\x2\x232\x230\x3\x2\x2\x2\x232\x231\x3\x2\x2\x2\x233\x234\x3"+
		"\x2\x2\x2\x234\x235\x3\x2\x2\x2\x234\x232\x3\x2\x2\x2\x235\x61\x3\x2\x2"+
		"\x2\x236\x237\a\x44\x2\x2\x237\x238\a\x33\x2\x2\x238\x239\x5\x42\"\x2"+
		"\x239\x23A\x5L\'\x2\x23A\x23B\x5h\x35\x2\x23B\x23C\a\x45\x2\x2\x23C\x63"+
		"\x3\x2\x2\x2\x23D\x23E\a@\x2\x2\x23E\x23F\x5\x66\x34\x2\x23F\x240\x5\x66"+
		"\x34\x2\x240\x65\x3\x2\x2\x2\x241\x24D\x5\x84\x43\x2\x242\x243\a\x44\x2"+
		"\x2\x243\x246\a\x34\x2\x2\x244\x247\x5L\'\x2\x245\x247\x5\x84\x43\x2\x246"+
		"\x244\x3\x2\x2\x2\x246\x245\x3\x2\x2\x2\x247\x248\x3\x2\x2\x2\x248\x249"+
		"\x5<\x1F\x2\x249\x24A\a\x45\x2\x2\x24A\x24D\x3\x2\x2\x2\x24B\x24D\x5L"+
		"\'\x2\x24C\x241\x3\x2\x2\x2\x24C\x242\x3\x2\x2\x2\x24C\x24B\x3\x2\x2\x2"+
		"\x24Dg\x3\x2\x2\x2\x24E\x261\a\x44\x2\x2\x24F\x250\a>\x2\x2\x250\x252"+
		"\x5h\x35\x2\x251\x253\x5h\x35\x2\x252\x251\x3\x2\x2\x2\x253\x254\x3\x2"+
		"\x2\x2\x254\x255\x3\x2\x2\x2\x254\x252\x3\x2\x2\x2\x255\x262\x3\x2\x2"+
		"\x2\x256\x257\x5j\x36\x2\x257\x258\x5\x82\x42\x2\x258\x259\x5\x82\x42"+
		"\x2\x259\x262\x3\x2\x2\x2\x25A\x262\x5\x64\x33\x2\x25B\x25C\a@\x2\x2\x25C"+
		"\x25D\x5<\x1F\x2\x25D\x25E\x5<\x1F\x2\x25E\x262\x3\x2\x2\x2\x25F\x260"+
		"\a\x41\x2\x2\x260\x262\x5h\x35\x2\x261\x24F\x3\x2\x2\x2\x261\x256\x3\x2"+
		"\x2\x2\x261\x25A\x3\x2\x2\x2\x261\x25B\x3\x2\x2\x2\x261\x25F\x3\x2\x2"+
		"\x2\x262\x263\x3\x2\x2\x2\x263\x264\a\x45\x2\x2\x264\x267\x3\x2\x2\x2"+
		"\x265\x267\x5\x12\n\x2\x266\x24E\x3\x2\x2\x2\x266\x265\x3\x2\x2\x2\x267"+
		"i\x3\x2\x2\x2\x268\x269\t\a\x2\x2\x269k\x3\x2\x2\x2\x26A\x26B\a\x44\x2"+
		"\x2\x26B\x26C\a\x35\x2\x2\x26C\x26D\x5\x82\x42\x2\x26D\x26E\x5\x82\x42"+
		"\x2\x26E\x26F\a\x45\x2\x2\x26Fm\x3\x2\x2\x2\x270\x271\a\x44\x2\x2\x271"+
		"\x272\a\x36\x2\x2\x272\x273\x5\x82\x42\x2\x273\x274\x5\x82\x42\x2\x274"+
		"\x275\a\x45\x2\x2\x275o\x3\x2\x2\x2\x276\x277\a\x44\x2\x2\x277\x278\a"+
		"\x37\x2\x2\x278\x279\x5\x82\x42\x2\x279\x27A\x5\x82\x42\x2\x27A\x27B\a"+
		"\x45\x2\x2\x27Bq\x3\x2\x2\x2\x27C\x27D\a\x44\x2\x2\x27D\x27E\a\x38\x2"+
		"\x2\x27E\x27F\x5\x82\x42\x2\x27F\x280\x5\x82\x42\x2\x280\x281\a\x45\x2"+
		"\x2\x281s\x3\x2\x2\x2\x282\x283\a\x44\x2\x2\x283\x284\a\x39\x2\x2\x284"+
		"\x285\x5\x82\x42\x2\x285\x286\x5\x82\x42\x2\x286\x287\a\x45\x2\x2\x287"+
		"u\x3\x2\x2\x2\x288\x289\a\x44\x2\x2\x289\x28D\a:\x2\x2\x28A\x28E\x5\x42"+
		"\"\x2\x28B\x28E\x5H%\x2\x28C\x28E\x5L\'\x2\x28D\x28A\x3\x2\x2\x2\x28D"+
		"\x28B\x3\x2\x2\x2\x28D\x28C\x3\x2\x2\x2\x28E\x28F\x3\x2\x2\x2\x28F\x290"+
		"\a\x45\x2\x2\x290w\x3\x2\x2\x2\x291\x292\a\x44\x2\x2\x292\x293\a\n\x2"+
		"\x2\x293\x294\x5\x42\"\x2\x294\x295\a/\x2\x2\x295\x296\x5L\'\x2\x296\x297"+
		"\a\x45\x2\x2\x297y\x3\x2\x2\x2\x298\x299\a\x44\x2\x2\x299\x29A\a\t\x2"+
		"\x2\x29A\x29B\x5\x42\"\x2\x29B\x29C\a/\x2\x2\x29C\x29D\x5L\'\x2\x29D\x29E"+
		"\a\x45\x2\x2\x29E{\x3\x2\x2\x2\x29F\x2A0\a\x44\x2\x2\x2A0\x2A7\a;\x2\x2"+
		"\x2A1\x2A3\x5\x42\"\x2\x2A2\x2A1\x3\x2\x2\x2\x2A3\x2A4\x3\x2\x2\x2\x2A4"+
		"\x2A5\x3\x2\x2\x2\x2A4\x2A2\x3\x2\x2\x2\x2A5\x2A8\x3\x2\x2\x2\x2A6\x2A8"+
		"\x5\x12\n\x2\x2A7\x2A2\x3\x2\x2\x2\x2A7\x2A6\x3\x2\x2\x2\x2A8\x2A9\x3"+
		"\x2\x2\x2\x2A9\x2AA\a\x45\x2\x2\x2AA}\x3\x2\x2\x2\x2AB\x2AC\a\x44\x2\x2"+
		"\x2AC\x2AD\a<\x2\x2\x2AD\x2AE\x5\x42\"\x2\x2AE\x2AF\a/\x2\x2\x2AF\x2B0"+
		"\x5L\'\x2\x2B0\x2B1\a\x45\x2\x2\x2B1\x7F\x3\x2\x2\x2\x2B2\x2B3\a\x44\x2"+
		"\x2\x2B3\x2B4\a=\x2\x2\x2B4\x2B5\x5<\x1F\x2\x2B5\x2B6\a/\x2\x2\x2B6\x2B7"+
		"\x5L\'\x2\x2B7\x2B8\a\x45\x2\x2\x2B8\x81\x3\x2\x2\x2\x2B9\x2C9\x5v<\x2"+
		"\x2BA\x2C9\x5n\x38\x2\x2BB\x2C9\x5p\x39\x2\x2BC\x2C9\x5r:\x2\x2BD\x2C9"+
		"\x5l\x37\x2\x2BE\x2C9\x5t;\x2\x2BF\x2C9\x5~@\x2\x2C0\x2C9\x5@!\x2\x2C1"+
		"\x2C9\x5\x80\x41\x2\x2C2\x2C4\a\x42\x2\x2\x2C3\x2C2\x3\x2\x2\x2\x2C4\x2C5"+
		"\x3\x2\x2\x2\x2C5\x2C3\x3\x2\x2\x2\x2C5\x2C6\x3\x2\x2\x2\x2C6\x2C9\x3"+
		"\x2\x2\x2\x2C7\x2C9\x5L\'\x2\x2C8\x2B9\x3\x2\x2\x2\x2C8\x2BA\x3\x2\x2"+
		"\x2\x2C8\x2BB\x3\x2\x2\x2\x2C8\x2BC\x3\x2\x2\x2\x2C8\x2BD\x3\x2\x2\x2"+
		"\x2C8\x2BE\x3\x2\x2\x2\x2C8\x2BF\x3\x2\x2\x2\x2C8\x2C0\x3\x2\x2\x2\x2C8"+
		"\x2C1\x3\x2\x2\x2\x2C8\x2C3\x3\x2\x2\x2\x2C8\x2C7\x3\x2\x2\x2\x2C9\x83"+
		"\x3\x2\x2\x2\x2CA\x2CC\a\x43\x2\x2\x2CB\x2CA\x3\x2\x2\x2\x2CC\x2CD\x3"+
		"\x2\x2\x2\x2CD\x2CB\x3\x2\x2\x2\x2CD\x2CE\x3\x2\x2\x2\x2CE\x85\x3\x2\x2"+
		"\x2\x39\x8B\x91\x93\xA4\xAE\xB0\xCC\xD1\xD9\xE4\xEB\xF9\x104\x10F\x118"+
		"\x121\x129\x130\x139\x140\x14C\x153\x158\x161\x169\x175\x17F\x1A5\x1AF"+
		"\x1B4\x1BF\x1C4\x1CF\x1D5\x1DD\x1F2\x1FA\x1FF\x20B\x213\x21B\x224\x232"+
		"\x234\x246\x24C\x254\x261\x266\x28D\x2A4\x2A7\x2C5\x2C8\x2CD";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
