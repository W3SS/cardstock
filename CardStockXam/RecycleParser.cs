//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Recycle.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class RecycleParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, BOOLOP=63, COMPOP=64, EQOP=65, UNOP=66, 
		INTNUM=67, LETT=68, OPEN=69, CLOSE=70, WS=71, ANY=72;
	public const int
		RULE_game = 0, RULE_setup = 1, RULE_stage = 2, RULE_scoring = 3, RULE_endcondition = 4, 
		RULE_action = 5, RULE_multiaction = 6, RULE_condact = 7, RULE_agg = 8, 
		RULE_let = 9, RULE_declare = 10, RULE_playercreate = 11, RULE_teamcreate = 12, 
		RULE_deckcreate = 13, RULE_deck = 14, RULE_teams = 15, RULE_attribute = 16, 
		RULE_initpoints = 17, RULE_awards = 18, RULE_subaward = 19, RULE_cycleaction = 20, 
		RULE_setaction = 21, RULE_incaction = 22, RULE_decaction = 23, RULE_moveaction = 24, 
		RULE_copyaction = 25, RULE_removeaction = 26, RULE_shuffleaction = 27, 
		RULE_turnaction = 28, RULE_repeat = 29, RULE_card = 30, RULE_actual = 31, 
		RULE_rawstorage = 32, RULE_cstorage = 33, RULE_memstorage = 34, RULE_memset = 35, 
		RULE_tuple = 36, RULE_var = 37, RULE_locpre = 38, RULE_locdesc = 39, RULE_who = 40, 
		RULE_whop = 41, RULE_whot = 42, RULE_whodesc = 43, RULE_owner = 44, RULE_teamp = 45, 
		RULE_other = 46, RULE_typed = 47, RULE_collection = 48, RULE_strcollection = 49, 
		RULE_cstoragecollection = 50, RULE_range = 51, RULE_trueany = 52, RULE_filter = 53, 
		RULE_attrcomp = 54, RULE_cardatt = 55, RULE_boolean = 56, RULE_intop = 57, 
		RULE_add = 58, RULE_mult = 59, RULE_subtract = 60, RULE_mod = 61, RULE_divide = 62, 
		RULE_sizeof = 63, RULE_maxof = 64, RULE_minof = 65, RULE_unionof = 66, 
		RULE_sum = 67, RULE_score = 68, RULE_int = 69, RULE_namegr = 70;
	public static readonly string[] ruleNames = {
		"game", "setup", "stage", "scoring", "endcondition", "action", "multiaction", 
		"condact", "agg", "let", "declare", "playercreate", "teamcreate", "deckcreate", 
		"deck", "teams", "attribute", "initpoints", "awards", "subaward", "cycleaction", 
		"setaction", "incaction", "decaction", "moveaction", "copyaction", "removeaction", 
		"shuffleaction", "turnaction", "repeat", "card", "actual", "rawstorage", 
		"cstorage", "memstorage", "memset", "tuple", "var", "locpre", "locdesc", 
		"who", "whop", "whot", "whodesc", "owner", "teamp", "other", "typed", 
		"collection", "strcollection", "cstoragecollection", "range", "trueany", 
		"filter", "attrcomp", "cardatt", "boolean", "intop", "add", "mult", "subtract", 
		"mod", "divide", "sizeof", "maxof", "minof", "unionof", "sum", "score", 
		"int", "namegr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'game'", "'setup'", "'stage'", "'player'", "'team'", "'scoring'", 
		"'min'", "'max'", "'end'", "'choice'", "'do'", "'any'", "'all'", "'let'", 
		"'declare'", "'create'", "'players'", "'teams'", "'deck'", "','", "'put'", 
		"'points'", "'cycle'", "'next'", "'current'", "'previous'", "'set'", "'inc'", 
		"'dec'", "'move'", "'remember'", "'forget'", "'shuffle'", "'turn'", "'pass'", 
		"'repeat'", "'top'", "'bottom'", "'actual'", "'sto'", "'tuples'", "'using'", 
		"'''", "'vloc'", "'iloc'", "'hloc'", "'mem'", "'owner'", "'other'", "'range'", 
		"'..'", "'filter'", "'cardatt'", "'+'", "'*'", "'-'", "'%'", "'//'", "'size'", 
		"'union'", "'sum'", "'score'", null, null, null, "'not'", null, null, 
		"'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "BOOLOP", "COMPOP", "EQOP", "UNOP", "INTNUM", "LETT", 
		"OPEN", "CLOSE", "WS", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Recycle.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public RecycleParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class GameContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public SetupContext setup() {
			return GetRuleContext<SetupContext>(0);
		}
		public ScoringContext scoring() {
			return GetRuleContext<ScoringContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DeclareContext[] declare() {
			return GetRuleContexts<DeclareContext>();
		}
		public DeclareContext declare(int i) {
			return GetRuleContext<DeclareContext>(i);
		}
		public MultiactionContext[] multiaction() {
			return GetRuleContexts<MultiactionContext>();
		}
		public MultiactionContext multiaction(int i) {
			return GetRuleContext<MultiactionContext>(i);
		}
		public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public GameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_game; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterGame(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitGame(this);
		}
	}

	[RuleVersion(0)]
	public GameContext game() {
		GameContext _localctx = new GameContext(Context, State);
		EnterRule(_localctx, 0, RULE_game);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; Match(OPEN);
			State = 143; Match(T__0);
			State = 147;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 144; declare();
					}
					} 
				}
				State = 149;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 150; setup();
			State = 153;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 153;
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						State = 151; multiaction();
						}
						break;
					case 2:
						{
						State = 152; stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 155;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 157; scoring();
			State = 158; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetupContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public PlayercreateContext playercreate() {
			return GetRuleContext<PlayercreateContext>(0);
		}
		public TeamcreateContext teamcreate() {
			return GetRuleContext<TeamcreateContext>(0);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public DeckcreateContext[] deckcreate() {
			return GetRuleContexts<DeckcreateContext>();
		}
		public DeckcreateContext deckcreate(int i) {
			return GetRuleContext<DeckcreateContext>(i);
		}
		public SetupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSetup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSetup(this);
		}
	}

	[RuleVersion(0)]
	public SetupContext setup() {
		SetupContext _localctx = new SetupContext(Context, State);
		EnterRule(_localctx, 2, RULE_setup);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; Match(OPEN);
			State = 161; Match(T__1);
			State = 162; playercreate();
			State = 163; Match(OPEN);
			State = 164; teamcreate();
			State = 165; Match(CLOSE);
			State = 170;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 166; Match(OPEN);
					State = 167; deckcreate();
					State = 168; Match(CLOSE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 172;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 174; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public EndconditionContext endcondition() {
			return GetRuleContext<EndconditionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultiactionContext[] multiaction() {
			return GetRuleContexts<MultiactionContext>();
		}
		public MultiactionContext multiaction(int i) {
			return GetRuleContext<MultiactionContext>(i);
		}
		public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public StageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterStage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitStage(this);
		}
	}

	[RuleVersion(0)]
	public StageContext stage() {
		StageContext _localctx = new StageContext(Context, State);
		EnterRule(_localctx, 4, RULE_stage);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 176; Match(OPEN);
			State = 177; Match(T__2);
			State = 178;
			_la = TokenStream.La(1);
			if ( !(_la==T__3 || _la==T__4) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 179; endcondition();
			State = 182;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 182;
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						State = 180; multiaction();
						}
						break;
					case 2:
						{
						State = 181; stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 184;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 186; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoringContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ScoringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scoring; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterScoring(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitScoring(this);
		}
	}

	[RuleVersion(0)]
	public ScoringContext scoring() {
		ScoringContext _localctx = new ScoringContext(Context, State);
		EnterRule(_localctx, 6, RULE_scoring);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188; Match(OPEN);
			State = 189; Match(T__5);
			State = 190;
			_la = TokenStream.La(1);
			if ( !(_la==T__6 || _la==T__7) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 191; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndconditionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public EndconditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endcondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterEndcondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitEndcondition(this);
		}
	}

	[RuleVersion(0)]
	public EndconditionContext endcondition() {
		EndconditionContext _localctx = new EndconditionContext(Context, State);
		EnterRule(_localctx, 8, RULE_endcondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; Match(OPEN);
			State = 194; Match(T__8);
			State = 195; boolean();
			State = 196; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public InitpointsContext initpoints() {
			return GetRuleContext<InitpointsContext>(0);
		}
		public TeamcreateContext teamcreate() {
			return GetRuleContext<TeamcreateContext>(0);
		}
		public DeckcreateContext deckcreate() {
			return GetRuleContext<DeckcreateContext>(0);
		}
		public CycleactionContext cycleaction() {
			return GetRuleContext<CycleactionContext>(0);
		}
		public SetactionContext setaction() {
			return GetRuleContext<SetactionContext>(0);
		}
		public MoveactionContext moveaction() {
			return GetRuleContext<MoveactionContext>(0);
		}
		public CopyactionContext copyaction() {
			return GetRuleContext<CopyactionContext>(0);
		}
		public IncactionContext incaction() {
			return GetRuleContext<IncactionContext>(0);
		}
		public DecactionContext decaction() {
			return GetRuleContext<DecactionContext>(0);
		}
		public RemoveactionContext removeaction() {
			return GetRuleContext<RemoveactionContext>(0);
		}
		public TurnactionContext turnaction() {
			return GetRuleContext<TurnactionContext>(0);
		}
		public ShuffleactionContext shuffleaction() {
			return GetRuleContext<ShuffleactionContext>(0);
		}
		public RepeatContext repeat() {
			return GetRuleContext<RepeatContext>(0);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 10, RULE_action);
		try {
			State = 217;
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 198; Match(OPEN);
				State = 212;
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 199; initpoints();
					}
					break;
				case 2:
					{
					State = 200; teamcreate();
					}
					break;
				case 3:
					{
					State = 201; deckcreate();
					}
					break;
				case 4:
					{
					State = 202; cycleaction();
					}
					break;
				case 5:
					{
					State = 203; setaction();
					}
					break;
				case 6:
					{
					State = 204; moveaction();
					}
					break;
				case 7:
					{
					State = 205; copyaction();
					}
					break;
				case 8:
					{
					State = 206; incaction();
					}
					break;
				case 9:
					{
					State = 207; decaction();
					}
					break;
				case 10:
					{
					State = 208; removeaction();
					}
					break;
				case 11:
					{
					State = 209; turnaction();
					}
					break;
				case 12:
					{
					State = 210; shuffleaction();
					}
					break;
				case 13:
					{
					State = 211; repeat();
					}
					break;
				}
				State = 214; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 216; agg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiactionContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public CondactContext[] condact() {
			return GetRuleContexts<CondactContext>();
		}
		public CondactContext condact(int i) {
			return GetRuleContext<CondactContext>(i);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public MultiactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMultiaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMultiaction(this);
		}
	}

	[RuleVersion(0)]
	public MultiactionContext multiaction() {
		MultiactionContext _localctx = new MultiactionContext(Context, State);
		EnterRule(_localctx, 12, RULE_multiaction);
		try {
			int _alt;
			State = 243;
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 219; Match(OPEN);
				State = 220; Match(T__9);
				State = 221; Match(OPEN);
				State = 223;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 222; condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 225;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 227; Match(CLOSE);
				State = 228; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 230; Match(OPEN);
				State = 231; Match(T__10);
				State = 232; Match(OPEN);
				State = 234;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 233; condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 236;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 238; Match(CLOSE);
				State = 239; Match(CLOSE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 241; agg();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 242; let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondactContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public MultiactionContext multiaction() {
			return GetRuleContext<MultiactionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public CondactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condact; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCondact(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCondact(this);
		}
	}

	[RuleVersion(0)]
	public CondactContext condact() {
		CondactContext _localctx = new CondactContext(Context, State);
		EnterRule(_localctx, 14, RULE_condact);
		try {
			State = 257;
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 245; Match(OPEN);
				State = 246; boolean();
				State = 247; multiaction();
				State = 248; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 250; multiaction();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 251; Match(OPEN);
				State = 252; boolean();
				State = 253; action();
				State = 254; Match(CLOSE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 256; action();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultiactionContext multiaction() {
			return GetRuleContext<MultiactionContext>(0);
		}
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public CondactContext condact() {
			return GetRuleContext<CondactContext>(0);
		}
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public AggContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAgg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAgg(this);
		}
	}

	[RuleVersion(0)]
	public AggContext agg() {
		AggContext _localctx = new AggContext(Context, State);
		EnterRule(_localctx, 16, RULE_agg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259; Match(OPEN);
			State = 260;
			_la = TokenStream.La(1);
			if ( !(_la==T__11 || _la==T__12) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 261; collection();
			State = 262; var();
			State = 269;
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 263; multiaction();
				}
				break;
			case 2:
				{
				State = 264; action();
				}
				break;
			case 3:
				{
				State = 265; boolean();
				}
				break;
			case 4:
				{
				State = 266; cstorage();
				}
				break;
			case 5:
				{
				State = 267; condact();
				}
				break;
			case 6:
				{
				State = 268; rawstorage();
				}
				break;
			}
			State = 271; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public TypedContext typed() {
			return GetRuleContext<TypedContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultiactionContext multiaction() {
			return GetRuleContext<MultiactionContext>(0);
		}
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public CondactContext condact() {
			return GetRuleContext<CondactContext>(0);
		}
		public LetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLet(this);
		}
	}

	[RuleVersion(0)]
	public LetContext let() {
		LetContext _localctx = new LetContext(Context, State);
		EnterRule(_localctx, 18, RULE_let);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273; Match(OPEN);
			State = 274; Match(T__13);
			State = 275; typed();
			State = 276; var();
			State = 280;
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 277; multiaction();
				}
				break;
			case 2:
				{
				State = 278; action();
				}
				break;
			case 3:
				{
				State = 279; condact();
				}
				break;
			}
			State = 282; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public TypedContext typed() {
			return GetRuleContext<TypedContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeclare(this);
		}
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(Context, State);
		EnterRule(_localctx, 20, RULE_declare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284; Match(OPEN);
			State = 285; Match(T__14);
			State = 286; typed();
			State = 287; var();
			State = 288; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayercreateContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public PlayercreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playercreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterPlayercreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitPlayercreate(this);
		}
	}

	[RuleVersion(0)]
	public PlayercreateContext playercreate() {
		PlayercreateContext _localctx = new PlayercreateContext(Context, State);
		EnterRule(_localctx, 22, RULE_playercreate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290; Match(OPEN);
			State = 291; Match(T__15);
			State = 292; Match(T__16);
			State = 295;
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 293; @int();
				}
				break;
			case 2:
				{
				State = 294; var();
				}
				break;
			}
			State = 297; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamcreateContext : ParserRuleContext {
		public TeamsContext[] teams() {
			return GetRuleContexts<TeamsContext>();
		}
		public TeamsContext teams(int i) {
			return GetRuleContext<TeamsContext>(i);
		}
		public TeamcreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamcreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeamcreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeamcreate(this);
		}
	}

	[RuleVersion(0)]
	public TeamcreateContext teamcreate() {
		TeamcreateContext _localctx = new TeamcreateContext(Context, State);
		EnterRule(_localctx, 24, RULE_teamcreate);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 299; Match(T__15);
			State = 300; Match(T__17);
			State = 302;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 301; teams();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 304;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckcreateContext : ParserRuleContext {
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public DeckContext deck() {
			return GetRuleContext<DeckContext>(0);
		}
		public RepeatContext repeat() {
			return GetRuleContext<RepeatContext>(0);
		}
		public DeckcreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deckcreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeckcreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeckcreate(this);
		}
	}

	[RuleVersion(0)]
	public DeckcreateContext deckcreate() {
		DeckcreateContext _localctx = new DeckcreateContext(Context, State);
		EnterRule(_localctx, 26, RULE_deckcreate);
		try {
			State = 312;
			switch (TokenStream.La(1)) {
			case T__15:
				EnterOuterAlt(_localctx, 1);
				{
				State = 306; Match(T__15);
				State = 307; Match(T__18);
				State = 308; cstorage();
				State = 309; deck();
				}
				break;
			case T__35:
				EnterOuterAlt(_localctx, 2);
				{
				State = 311; repeat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public DeckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deck; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeck(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeck(this);
		}
	}

	[RuleVersion(0)]
	public DeckContext deck() {
		DeckContext _localctx = new DeckContext(Context, State);
		EnterRule(_localctx, 28, RULE_deck);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 314; Match(OPEN);
			State = 315; Match(T__18);
			State = 317;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 316; attribute();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 319;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 321; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamsContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode[] INTNUM() { return GetTokens(RecycleParser.INTNUM); }
		public ITerminalNode INTNUM(int i) {
			return GetToken(RecycleParser.INTNUM, i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TeamsContext[] teams() {
			return GetRuleContexts<TeamsContext>();
		}
		public TeamsContext teams(int i) {
			return GetRuleContext<TeamsContext>(i);
		}
		public TeamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teams; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeams(this);
		}
	}

	[RuleVersion(0)]
	public TeamsContext teams() {
		TeamsContext _localctx = new TeamsContext(Context, State);
		EnterRule(_localctx, 30, RULE_teams);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 323; Match(OPEN);
			State = 328;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 324; Match(INTNUM);
					State = 325; Match(T__19);
					}
					} 
				}
				State = 330;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			State = 331; Match(INTNUM);
			State = 335;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 332; teams();
					}
					} 
				}
				State = 337;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			State = 338; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 32, RULE_attribute);
		try {
			int _alt;
			State = 359;
			switch (TokenStream.La(1)) {
			case T__42:
				EnterOuterAlt(_localctx, 1);
				{
				State = 340; var();
				}
				break;
			case OPEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 341; Match(OPEN);
				State = 347;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 342; namegr();
						State = 343; Match(T__19);
						}
						} 
					}
					State = 349;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
				}
				State = 350; namegr();
				State = 354;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 351; attribute();
						}
						} 
					}
					State = 356;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
				}
				State = 357; Match(CLOSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitpointsContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AwardsContext[] awards() {
			return GetRuleContexts<AwardsContext>();
		}
		public AwardsContext awards(int i) {
			return GetRuleContext<AwardsContext>(i);
		}
		public InitpointsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initpoints; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterInitpoints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitInitpoints(this);
		}
	}

	[RuleVersion(0)]
	public InitpointsContext initpoints() {
		InitpointsContext _localctx = new InitpointsContext(Context, State);
		EnterRule(_localctx, 34, RULE_initpoints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 361; Match(T__20);
			State = 362; Match(T__21);
			State = 363; var();
			State = 364; Match(OPEN);
			State = 366;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 365; awards();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 368;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 370; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwardsContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubawardContext[] subaward() {
			return GetRuleContexts<SubawardContext>();
		}
		public SubawardContext subaward(int i) {
			return GetRuleContext<SubawardContext>(i);
		}
		public AwardsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awards; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAwards(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAwards(this);
		}
	}

	[RuleVersion(0)]
	public AwardsContext awards() {
		AwardsContext _localctx = new AwardsContext(Context, State);
		EnterRule(_localctx, 36, RULE_awards);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 372; Match(OPEN);
			State = 374;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 373; subaward();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 376;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 378; @int();
			State = 379; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubawardContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public TrueanyContext trueany() {
			return GetRuleContext<TrueanyContext>(0);
		}
		public CardattContext cardatt() {
			return GetRuleContext<CardattContext>(0);
		}
		public SubawardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subaward; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSubaward(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSubaward(this);
		}
	}

	[RuleVersion(0)]
	public SubawardContext subaward() {
		SubawardContext _localctx = new SubawardContext(Context, State);
		EnterRule(_localctx, 38, RULE_subaward);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381; Match(OPEN);
			State = 382; namegr();
			State = 388;
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				{
				State = 383; Match(OPEN);
				State = 384; trueany();
				State = 385; Match(CLOSE);
				}
				}
				break;
			case 2:
				{
				{
				State = 387; cardatt();
				}
				}
				break;
			}
			State = 390; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CycleactionContext : ParserRuleContext {
		public OwnerContext owner() {
			return GetRuleContext<OwnerContext>(0);
		}
		public CycleactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cycleaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCycleaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCycleaction(this);
		}
	}

	[RuleVersion(0)]
	public CycleactionContext cycleaction() {
		CycleactionContext _localctx = new CycleactionContext(Context, State);
		EnterRule(_localctx, 40, RULE_cycleaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392; Match(T__22);
			State = 393;
			_la = TokenStream.La(1);
			if ( !(_la==T__23 || _la==T__24) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 398;
			switch (TokenStream.La(1)) {
			case OPEN:
				{
				State = 394; owner();
				}
				break;
			case T__24:
				{
				State = 395; Match(T__24);
				}
				break;
			case T__23:
				{
				State = 396; Match(T__23);
				}
				break;
			case T__25:
				{
				State = 397; Match(T__25);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public SetactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSetaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSetaction(this);
		}
	}

	[RuleVersion(0)]
	public SetactionContext setaction() {
		SetactionContext _localctx = new SetactionContext(Context, State);
		EnterRule(_localctx, 42, RULE_setaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400; Match(T__26);
			State = 401; rawstorage();
			State = 402; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public IncactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterIncaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitIncaction(this);
		}
	}

	[RuleVersion(0)]
	public IncactionContext incaction() {
		IncactionContext _localctx = new IncactionContext(Context, State);
		EnterRule(_localctx, 44, RULE_incaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404; Match(T__27);
			State = 405; rawstorage();
			State = 406; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public DecactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDecaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDecaction(this);
		}
	}

	[RuleVersion(0)]
	public DecactionContext decaction() {
		DecactionContext _localctx = new DecactionContext(Context, State);
		EnterRule(_localctx, 46, RULE_decaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408; Match(T__28);
			State = 409; rawstorage();
			State = 410; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveactionContext : ParserRuleContext {
		public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public MoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMoveaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMoveaction(this);
		}
	}

	[RuleVersion(0)]
	public MoveactionContext moveaction() {
		MoveactionContext _localctx = new MoveactionContext(Context, State);
		EnterRule(_localctx, 48, RULE_moveaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412; Match(T__29);
			State = 413; card();
			State = 414; card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyactionContext : ParserRuleContext {
		public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public CopyactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCopyaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCopyaction(this);
		}
	}

	[RuleVersion(0)]
	public CopyactionContext copyaction() {
		CopyactionContext _localctx = new CopyactionContext(Context, State);
		EnterRule(_localctx, 50, RULE_copyaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416; Match(T__30);
			State = 417; card();
			State = 418; card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveactionContext : ParserRuleContext {
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public RemoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRemoveaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRemoveaction(this);
		}
	}

	[RuleVersion(0)]
	public RemoveactionContext removeaction() {
		RemoveactionContext _localctx = new RemoveactionContext(Context, State);
		EnterRule(_localctx, 52, RULE_removeaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420; Match(T__31);
			State = 421; card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShuffleactionContext : ParserRuleContext {
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public ShuffleactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shuffleaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterShuffleaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitShuffleaction(this);
		}
	}

	[RuleVersion(0)]
	public ShuffleactionContext shuffleaction() {
		ShuffleactionContext _localctx = new ShuffleactionContext(Context, State);
		EnterRule(_localctx, 54, RULE_shuffleaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423; Match(T__32);
			State = 424; cstorage();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TurnactionContext : ParserRuleContext {
		public TurnactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_turnaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTurnaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTurnaction(this);
		}
	}

	[RuleVersion(0)]
	public TurnactionContext turnaction() {
		TurnactionContext _localctx = new TurnactionContext(Context, State);
		EnterRule(_localctx, 56, RULE_turnaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426; Match(T__33);
			State = 427; Match(T__34);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatContext : ParserRuleContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public RepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRepeat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRepeat(this);
		}
	}

	[RuleVersion(0)]
	public RepeatContext repeat() {
		RepeatContext _localctx = new RepeatContext(Context, State);
		EnterRule(_localctx, 58, RULE_repeat);
		try {
			State = 436;
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 429; Match(T__35);
				State = 430; @int();
				State = 431; action();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 433; Match(T__35);
				State = 434; Match(T__12);
				State = 435; action();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardContext : ParserRuleContext {
		public MaxofContext maxof() {
			return GetRuleContext<MaxofContext>(0);
		}
		public MinofContext minof() {
			return GetRuleContext<MinofContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ActualContext actual() {
			return GetRuleContext<ActualContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_card; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCard(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCard(this);
		}
	}

	[RuleVersion(0)]
	public CardContext card() {
		CardContext _localctx = new CardContext(Context, State);
		EnterRule(_localctx, 60, RULE_card);
		try {
			State = 451;
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 438; maxof();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 439; minof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 440; var();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 441; actual();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				{
				State = 442; Match(OPEN);
				State = 446;
				switch (TokenStream.La(1)) {
				case T__36:
					{
					State = 443; Match(T__36);
					}
					break;
				case T__37:
					{
					State = 444; Match(T__37);
					}
					break;
				case T__42:
				case INTNUM:
				case OPEN:
					{
					State = 445; @int();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 448; cstorage();
				State = 449; Match(CLOSE);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ActualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actual; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterActual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitActual(this);
		}
	}

	[RuleVersion(0)]
	public ActualContext actual() {
		ActualContext _localctx = new ActualContext(Context, State);
		EnterRule(_localctx, 62, RULE_actual);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453; Match(OPEN);
			State = 454; Match(T__38);
			State = 455; card();
			State = 456; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RawstorageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public VarContext[] var() {
			return GetRuleContexts<VarContext>();
		}
		public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public RawstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rawstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRawstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRawstorage(this);
		}
	}

	[RuleVersion(0)]
	public RawstorageContext rawstorage() {
		RawstorageContext _localctx = new RawstorageContext(Context, State);
		EnterRule(_localctx, 64, RULE_rawstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458; Match(OPEN);
			State = 462;
			switch (TokenStream.La(1)) {
			case T__0:
				{
				State = 459; Match(T__0);
				}
				break;
			case OPEN:
				{
				State = 460; who();
				}
				break;
			case T__42:
				{
				State = 461; var();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 464; Match(T__39);
			State = 467;
			switch (TokenStream.La(1)) {
			case LETT:
				{
				State = 465; namegr();
				}
				break;
			case T__42:
				{
				State = 466; var();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 469; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CstorageContext : ParserRuleContext {
		public UnionofContext unionof() {
			return GetRuleContext<UnionofContext>(0);
		}
		public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public LocpreContext locpre() {
			return GetRuleContext<LocpreContext>(0);
		}
		public LocdescContext locdesc() {
			return GetRuleContext<LocdescContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public MemstorageContext memstorage() {
			return GetRuleContext<MemstorageContext>(0);
		}
		public CstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCstorage(this);
		}
	}

	[RuleVersion(0)]
	public CstorageContext cstorage() {
		CstorageContext _localctx = new CstorageContext(Context, State);
		EnterRule(_localctx, 66, RULE_cstorage);
		try {
			State = 484;
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 471; unionof();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 472; filter();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 473; Match(OPEN);
				State = 474; locpre();
				State = 475; locdesc();
				State = 478;
				switch (TokenStream.La(1)) {
				case LETT:
					{
					State = 476; namegr();
					}
					break;
				case T__42:
					{
					State = 477; var();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 480; Match(CLOSE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 482; memstorage();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 483; var();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemstorageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public MemstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMemstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMemstorage(this);
		}
	}

	[RuleVersion(0)]
	public MemstorageContext memstorage() {
		MemstorageContext _localctx = new MemstorageContext(Context, State);
		EnterRule(_localctx, 68, RULE_memstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486; Match(OPEN);
			State = 490;
			switch (TokenStream.La(1)) {
			case T__36:
				{
				State = 487; Match(T__36);
				}
				break;
			case T__37:
				{
				State = 488; Match(T__37);
				}
				break;
			case T__42:
			case INTNUM:
			case OPEN:
				{
				State = 489; @int();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 492; memset();
			State = 493; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemsetContext : ParserRuleContext {
		public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		public MemsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memset; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMemset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMemset(this);
		}
	}

	[RuleVersion(0)]
	public MemsetContext memset() {
		MemsetContext _localctx = new MemsetContext(Context, State);
		EnterRule(_localctx, 70, RULE_memset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495; tuple();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 72, RULE_tuple);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497; Match(OPEN);
			State = 498; Match(T__40);
			State = 499; @int();
			State = 500; cstorage();
			State = 501; Match(T__41);
			State = 502; var();
			State = 503; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 74, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505; Match(T__42);
			State = 506; namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocpreContext : ParserRuleContext {
		public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public LocpreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locpre; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLocpre(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLocpre(this);
		}
	}

	[RuleVersion(0)]
	public LocpreContext locpre() {
		LocpreContext _localctx = new LocpreContext(Context, State);
		EnterRule(_localctx, 76, RULE_locpre);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			switch (TokenStream.La(1)) {
			case T__0:
				{
				State = 508; Match(T__0);
				}
				break;
			case OPEN:
				{
				State = 509; whop();
				}
				break;
			case T__42:
				{
				State = 510; var();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocdescContext : ParserRuleContext {
		public LocdescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locdesc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLocdesc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLocdesc(this);
		}
	}

	[RuleVersion(0)]
	public LocdescContext locdesc() {
		LocdescContext _localctx = new LocdescContext(Context, State);
		EnterRule(_localctx, 78, RULE_locdesc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhoContext : ParserRuleContext {
		public WhotContext whot() {
			return GetRuleContext<WhotContext>(0);
		}
		public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public WhoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_who; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWho(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWho(this);
		}
	}

	[RuleVersion(0)]
	public WhoContext who() {
		WhoContext _localctx = new WhoContext(Context, State);
		EnterRule(_localctx, 80, RULE_who);
		try {
			State = 517;
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 515; whot();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 516; whop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhopContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public WhodescContext whodesc() {
			return GetRuleContext<WhodescContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OwnerContext owner() {
			return GetRuleContext<OwnerContext>(0);
		}
		public WhopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhop(this);
		}
	}

	[RuleVersion(0)]
	public WhopContext whop() {
		WhopContext _localctx = new WhopContext(Context, State);
		EnterRule(_localctx, 82, RULE_whop);
		try {
			State = 525;
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 519; Match(OPEN);
				State = 520; whodesc();
				State = 521; Match(T__3);
				State = 522; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 524; owner();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhotContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public WhodescContext whodesc() {
			return GetRuleContext<WhodescContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TeampContext teamp() {
			return GetRuleContext<TeampContext>(0);
		}
		public WhotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whot; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhot(this);
		}
	}

	[RuleVersion(0)]
	public WhotContext whot() {
		WhotContext _localctx = new WhotContext(Context, State);
		EnterRule(_localctx, 84, RULE_whot);
		try {
			State = 533;
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 527; Match(OPEN);
				State = 528; whodesc();
				State = 529; Match(T__4);
				State = 530; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 532; teamp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhodescContext : ParserRuleContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public WhodescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whodesc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhodesc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhodesc(this);
		}
	}

	[RuleVersion(0)]
	public WhodescContext whodesc() {
		WhodescContext _localctx = new WhodescContext(Context, State);
		EnterRule(_localctx, 86, RULE_whodesc);
		try {
			State = 539;
			switch (TokenStream.La(1)) {
			case T__42:
			case INTNUM:
			case OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 535; @int();
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 2);
				{
				State = 536; Match(T__25);
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 3);
				{
				State = 537; Match(T__23);
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 4);
				{
				State = 538; Match(T__24);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OwnerContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OwnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_owner; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterOwner(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitOwner(this);
		}
	}

	[RuleVersion(0)]
	public OwnerContext owner() {
		OwnerContext _localctx = new OwnerContext(Context, State);
		EnterRule(_localctx, 88, RULE_owner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 541; Match(OPEN);
			State = 542; Match(T__47);
			State = 543; card();
			State = 544; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeampContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TeampContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeamp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeamp(this);
		}
	}

	[RuleVersion(0)]
	public TeampContext teamp() {
		TeampContext _localctx = new TeampContext(Context, State);
		EnterRule(_localctx, 90, RULE_teamp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 546; Match(OPEN);
			State = 547; Match(T__4);
			State = 548; whop();
			State = 549; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OtherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterOther(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitOther(this);
		}
	}

	[RuleVersion(0)]
	public OtherContext other() {
		OtherContext _localctx = new OtherContext(Context, State);
		EnterRule(_localctx, 92, RULE_other);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551; Match(OPEN);
			State = 552; Match(T__48);
			State = 553;
			_la = TokenStream.La(1);
			if ( !(_la==T__3 || _la==T__4) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 554; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedContext : ParserRuleContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public TypedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTyped(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTyped(this);
		}
	}

	[RuleVersion(0)]
	public TypedContext typed() {
		TypedContext _localctx = new TypedContext(Context, State);
		EnterRule(_localctx, 94, RULE_typed);
		try {
			State = 561;
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 556; @int();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 557; boolean();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 558; namegr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 559; var();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 560; collection();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionContext : ParserRuleContext {
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public StrcollectionContext strcollection() {
			return GetRuleContext<StrcollectionContext>(0);
		}
		public CstoragecollectionContext cstoragecollection() {
			return GetRuleContext<CstoragecollectionContext>(0);
		}
		public WhotContext whot() {
			return GetRuleContext<WhotContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public OtherContext other() {
			return GetRuleContext<OtherContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		public CollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCollection(this);
		}
	}

	[RuleVersion(0)]
	public CollectionContext collection() {
		CollectionContext _localctx = new CollectionContext(Context, State);
		EnterRule(_localctx, 96, RULE_collection);
		try {
			State = 573;
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 563; cstorage();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 564; strcollection();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 565; cstoragecollection();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 566; Match(T__3);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 567; Match(T__4);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 568; whot();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 569; var();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 570; other();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 571; range();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 572; filter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrcollectionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public StrcollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strcollection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterStrcollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitStrcollection(this);
		}
	}

	[RuleVersion(0)]
	public StrcollectionContext strcollection() {
		StrcollectionContext _localctx = new StrcollectionContext(Context, State);
		EnterRule(_localctx, 98, RULE_strcollection);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 575; Match(OPEN);
			State = 581;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 576; namegr();
					State = 577; Match(T__19);
					}
					} 
				}
				State = 583;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			State = 584; namegr();
			State = 585; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CstoragecollectionContext : ParserRuleContext {
		public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public CstoragecollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cstoragecollection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCstoragecollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCstoragecollection(this);
		}
	}

	[RuleVersion(0)]
	public CstoragecollectionContext cstoragecollection() {
		CstoragecollectionContext _localctx = new CstoragecollectionContext(Context, State);
		EnterRule(_localctx, 100, RULE_cstoragecollection);
		try {
			State = 590;
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 587; memset();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 588; agg();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 589; let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 102, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 592; Match(OPEN);
			State = 593; Match(T__49);
			State = 594; @int();
			State = 595; Match(T__50);
			State = 596; @int();
			State = 597; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrueanyContext : ParserRuleContext {
		public ITerminalNode[] ANY() { return GetTokens(RecycleParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(RecycleParser.ANY, i);
		}
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode[] BOOLOP() { return GetTokens(RecycleParser.BOOLOP); }
		public ITerminalNode BOOLOP(int i) {
			return GetToken(RecycleParser.BOOLOP, i);
		}
		public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		public TrueanyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trueany; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTrueany(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTrueany(this);
		}
	}

	[RuleVersion(0)]
	public TrueanyContext trueany() {
		TrueanyContext _localctx = new TrueanyContext(Context, State);
		EnterRule(_localctx, 104, RULE_trueany);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 603;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 603;
					switch (TokenStream.La(1)) {
					case ANY:
						{
						State = 599; Match(ANY);
						}
						break;
					case T__42:
					case INTNUM:
					case OPEN:
						{
						State = 600; @int();
						}
						break;
					case BOOLOP:
						{
						State = 601; Match(BOOLOP);
						}
						break;
					case LETT:
						{
						State = 602; namegr();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 605;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterFilter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitFilter(this);
		}
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(Context, State);
		EnterRule(_localctx, 106, RULE_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 607; Match(OPEN);
			State = 608; Match(T__51);
			State = 609; collection();
			State = 610; var();
			State = 611; boolean();
			State = 612; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrcompContext : ParserRuleContext {
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public CardattContext[] cardatt() {
			return GetRuleContexts<CardattContext>();
		}
		public CardattContext cardatt(int i) {
			return GetRuleContext<CardattContext>(i);
		}
		public AttrcompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrcomp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAttrcomp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAttrcomp(this);
		}
	}

	[RuleVersion(0)]
	public AttrcompContext attrcomp() {
		AttrcompContext _localctx = new AttrcompContext(Context, State);
		EnterRule(_localctx, 108, RULE_attrcomp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 614; Match(EQOP);
			State = 615; cardatt();
			State = 616; cardatt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardattContext : ParserRuleContext {
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public CardattContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cardatt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCardatt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCardatt(this);
		}
	}

	[RuleVersion(0)]
	public CardattContext cardatt() {
		CardattContext _localctx = new CardattContext(Context, State);
		EnterRule(_localctx, 110, RULE_cardatt);
		try {
			State = 629;
			switch (TokenStream.La(1)) {
			case LETT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 618; namegr();
				}
				break;
			case T__42:
				EnterOuterAlt(_localctx, 2);
				{
				State = 619; var();
				}
				break;
			case OPEN:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 620; Match(OPEN);
				State = 621; Match(T__52);
				State = 624;
				switch (TokenStream.La(1)) {
				case T__42:
					{
					State = 622; var();
					}
					break;
				case LETT:
					{
					State = 623; namegr();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 626; card();
				State = 627; Match(CLOSE);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AttrcompContext attrcomp() {
			return GetRuleContext<AttrcompContext>(0);
		}
		public ITerminalNode BOOLOP() { return GetToken(RecycleParser.BOOLOP, 0); }
		public BooleanContext[] boolean() {
			return GetRuleContexts<BooleanContext>();
		}
		public BooleanContext boolean(int i) {
			return GetRuleContext<BooleanContext>(i);
		}
		public IntopContext intop() {
			return GetRuleContext<IntopContext>(0);
		}
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public ITerminalNode UNOP() { return GetToken(RecycleParser.UNOP, 0); }
		public WhopContext[] whop() {
			return GetRuleContexts<WhopContext>();
		}
		public WhopContext whop(int i) {
			return GetRuleContext<WhopContext>(i);
		}
		public WhotContext[] whot() {
			return GetRuleContexts<WhotContext>();
		}
		public WhotContext whot(int i) {
			return GetRuleContext<WhotContext>(i);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 112, RULE_boolean);
		try {
			int _alt;
			State = 663;
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 631; Match(OPEN);
				State = 658;
				switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
				case 1:
					{
					{
					State = 632; Match(BOOLOP);
					State = 633; boolean();
					State = 635;
					ErrorHandler.Sync(this);
					_alt = 1+1;
					do {
						switch (_alt) {
						case 1+1:
							{
							{
							State = 634; boolean();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 637;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
					} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					}
					break;
				case 2:
					{
					{
					State = 639; intop();
					State = 640; @int();
					State = 641; @int();
					}
					}
					break;
				case 3:
					{
					State = 643; attrcomp();
					}
					break;
				case 4:
					{
					{
					State = 644; Match(EQOP);
					State = 645; card();
					State = 646; card();
					}
					}
					break;
				case 5:
					{
					{
					State = 648; Match(UNOP);
					State = 649; boolean();
					}
					}
					break;
				case 6:
					{
					{
					State = 650; Match(EQOP);
					State = 651; whop();
					State = 652; whop();
					}
					}
					break;
				case 7:
					{
					{
					State = 654; Match(EQOP);
					State = 655; whot();
					State = 656; whot();
					}
					}
					break;
				}
				State = 660; Match(CLOSE);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 662; agg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntopContext : ParserRuleContext {
		public ITerminalNode COMPOP() { return GetToken(RecycleParser.COMPOP, 0); }
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public IntopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterIntop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitIntop(this);
		}
	}

	[RuleVersion(0)]
	public IntopContext intop() {
		IntopContext _localctx = new IntopContext(Context, State);
		EnterRule(_localctx, 114, RULE_intop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 665;
			_la = TokenStream.La(1);
			if ( !(_la==COMPOP || _la==EQOP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
	}

	[RuleVersion(0)]
	public AddContext add() {
		AddContext _localctx = new AddContext(Context, State);
		EnterRule(_localctx, 116, RULE_add);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 667; Match(OPEN);
			State = 668; Match(T__53);
			State = 669; @int();
			State = 670; @int();
			State = 671; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMult(this);
		}
	}

	[RuleVersion(0)]
	public MultContext mult() {
		MultContext _localctx = new MultContext(Context, State);
		EnterRule(_localctx, 118, RULE_mult);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 673; Match(OPEN);
			State = 674; Match(T__54);
			State = 675; @int();
			State = 676; @int();
			State = 677; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtractContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubtractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtract; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSubtract(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSubtract(this);
		}
	}

	[RuleVersion(0)]
	public SubtractContext subtract() {
		SubtractContext _localctx = new SubtractContext(Context, State);
		EnterRule(_localctx, 120, RULE_subtract);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 679; Match(OPEN);
			State = 680; Match(T__55);
			State = 681; @int();
			State = 682; @int();
			State = 683; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMod(this);
		}
	}

	[RuleVersion(0)]
	public ModContext mod() {
		ModContext _localctx = new ModContext(Context, State);
		EnterRule(_localctx, 122, RULE_mod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 685; Match(OPEN);
			State = 686; Match(T__56);
			State = 687; @int();
			State = 688; @int();
			State = 689; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivideContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divide; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDivide(this);
		}
	}

	[RuleVersion(0)]
	public DivideContext divide() {
		DivideContext _localctx = new DivideContext(Context, State);
		EnterRule(_localctx, 124, RULE_divide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 691; Match(OPEN);
			State = 692; Match(T__57);
			State = 693; @int();
			State = 694; @int();
			State = 695; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public SizeofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSizeof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSizeof(this);
		}
	}

	[RuleVersion(0)]
	public SizeofContext @sizeof() {
		SizeofContext _localctx = new SizeofContext(Context, State);
		EnterRule(_localctx, 126, RULE_sizeof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 697; Match(OPEN);
			State = 698; Match(T__58);
			State = 702;
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 699; cstorage();
				}
				break;
			case 2:
				{
				State = 700; memset();
				}
				break;
			case 3:
				{
				State = 701; var();
				}
				break;
			}
			State = 704; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaxofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MaxofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMaxof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMaxof(this);
		}
	}

	[RuleVersion(0)]
	public MaxofContext maxof() {
		MaxofContext _localctx = new MaxofContext(Context, State);
		EnterRule(_localctx, 128, RULE_maxof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 706; Match(OPEN);
			State = 707; Match(T__7);
			State = 708; cstorage();
			State = 709; Match(T__41);
			State = 710; var();
			State = 711; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MinofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMinof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMinof(this);
		}
	}

	[RuleVersion(0)]
	public MinofContext minof() {
		MinofContext _localctx = new MinofContext(Context, State);
		EnterRule(_localctx, 130, RULE_minof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 713; Match(OPEN);
			State = 714; Match(T__6);
			State = 715; cstorage();
			State = 716; Match(T__41);
			State = 717; var();
			State = 718; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public CstorageContext[] cstorage() {
			return GetRuleContexts<CstorageContext>();
		}
		public CstorageContext cstorage(int i) {
			return GetRuleContext<CstorageContext>(i);
		}
		public UnionofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterUnionof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitUnionof(this);
		}
	}

	[RuleVersion(0)]
	public UnionofContext unionof() {
		UnionofContext _localctx = new UnionofContext(Context, State);
		EnterRule(_localctx, 132, RULE_unionof);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 720; Match(OPEN);
			State = 721; Match(T__59);
			State = 728;
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 723;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 722; cstorage();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 725;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			case 2:
				{
				State = 727; agg();
				}
				break;
			}
			State = 730; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSum(this);
		}
	}

	[RuleVersion(0)]
	public SumContext sum() {
		SumContext _localctx = new SumContext(Context, State);
		EnterRule(_localctx, 134, RULE_sum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 732; Match(OPEN);
			State = 733; Match(T__60);
			State = 734; cstorage();
			State = 735; Match(T__41);
			State = 736; var();
			State = 737; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoreContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ScoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_score; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterScore(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitScore(this);
		}
	}

	[RuleVersion(0)]
	public ScoreContext score() {
		ScoreContext _localctx = new ScoreContext(Context, State);
		EnterRule(_localctx, 136, RULE_score);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 739; Match(OPEN);
			State = 740; Match(T__61);
			State = 741; card();
			State = 742; Match(T__41);
			State = 743; var();
			State = 744; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		public SizeofContext @sizeof() {
			return GetRuleContext<SizeofContext>(0);
		}
		public MultContext mult() {
			return GetRuleContext<MultContext>(0);
		}
		public SubtractContext subtract() {
			return GetRuleContext<SubtractContext>(0);
		}
		public ModContext mod() {
			return GetRuleContext<ModContext>(0);
		}
		public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public ScoreContext score() {
			return GetRuleContext<ScoreContext>(0);
		}
		public ITerminalNode[] INTNUM() { return GetTokens(RecycleParser.INTNUM); }
		public ITerminalNode INTNUM(int i) {
			return GetToken(RecycleParser.INTNUM, i);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 138, RULE_int);
		try {
			int _alt;
			State = 761;
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 746; @sizeof();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 747; mult();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 748; subtract();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 749; mod();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 750; add();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 751; divide();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 752; sum();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 753; rawstorage();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 754; score();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 756;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 755; Match(INTNUM);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 758;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 760; var();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamegrContext : ParserRuleContext {
		public ITerminalNode[] LETT() { return GetTokens(RecycleParser.LETT); }
		public ITerminalNode LETT(int i) {
			return GetToken(RecycleParser.LETT, i);
		}
		public NamegrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namegr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterNamegr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitNamegr(this);
		}
	}

	[RuleVersion(0)]
	public NamegrContext namegr() {
		NamegrContext _localctx = new NamegrContext(Context, State);
		EnterRule(_localctx, 140, RULE_namegr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 764;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 763; Match(LETT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 766;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3J\x303\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x3\x2\x3\x2\x3\x2\a\x2\x94\n\x2\f\x2\xE\x2"+
		"\x97\v\x2\x3\x2\x3\x2\x3\x2\x6\x2\x9C\n\x2\r\x2\xE\x2\x9D\x3\x2\x3\x2"+
		"\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x6"+
		"\x3\xAD\n\x3\r\x3\xE\x3\xAE\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x6\x4\xB9\n\x4\r\x4\xE\x4\xBA\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\xD7\n\a\x3\a\x3\a\x3\a\x5"+
		"\a\xDC\n\a\x3\b\x3\b\x3\b\x3\b\x6\b\xE2\n\b\r\b\xE\b\xE3\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x6\b\xED\n\b\r\b\xE\b\xEE\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x5\b\xF6\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x5\t\x104\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n"+
		"\x5\n\x110\n\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\x11B"+
		"\n\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r"+
		"\x5\r\x12A\n\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x6\xE\x131\n\xE\r\xE\xE\xE"+
		"\x132\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x13B\n\xF\x3\x10\x3\x10"+
		"\x3\x10\x6\x10\x140\n\x10\r\x10\xE\x10\x141\x3\x10\x3\x10\x3\x11\x3\x11"+
		"\x3\x11\a\x11\x149\n\x11\f\x11\xE\x11\x14C\v\x11\x3\x11\x3\x11\a\x11\x150"+
		"\n\x11\f\x11\xE\x11\x153\v\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\a\x12\x15C\n\x12\f\x12\xE\x12\x15F\v\x12\x3\x12\x3\x12\a\x12\x163"+
		"\n\x12\f\x12\xE\x12\x166\v\x12\x3\x12\x3\x12\x5\x12\x16A\n\x12\x3\x13"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x6\x13\x171\n\x13\r\x13\xE\x13\x172\x3\x13"+
		"\x3\x13\x3\x14\x3\x14\x6\x14\x179\n\x14\r\x14\xE\x14\x17A\x3\x14\x3\x14"+
		"\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x187\n"+
		"\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x191"+
		"\n\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19"+
		"\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x1B7\n\x1F\x3"+
		" \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x5 \x1C1\n \x3 \x3 \x3 \x5 \x1C6\n \x3!"+
		"\x3!\x3!\x3!\x3!\x3\"\x3\"\x3\"\x3\"\x5\"\x1D1\n\"\x3\"\x3\"\x3\"\x5\""+
		"\x1D6\n\"\x3\"\x3\"\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x5#\x1E1\n#\x3#\x3#\x3"+
		"#\x3#\x5#\x1E7\n#\x3$\x3$\x3$\x3$\x5$\x1ED\n$\x3$\x3$\x3$\x3%\x3%\x3&"+
		"\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3\'\x3\'\x3\'\x3(\x3(\x3(\x5(\x202\n(\x3"+
		")\x3)\x3*\x3*\x5*\x208\n*\x3+\x3+\x3+\x3+\x3+\x3+\x5+\x210\n+\x3,\x3,"+
		"\x3,\x3,\x3,\x3,\x5,\x218\n,\x3-\x3-\x3-\x3-\x5-\x21E\n-\x3.\x3.\x3.\x3"+
		".\x3.\x3/\x3/\x3/\x3/\x3/\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x31\x3"+
		"\x31\x3\x31\x3\x31\x3\x31\x5\x31\x234\n\x31\x3\x32\x3\x32\x3\x32\x3\x32"+
		"\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32\x240\n\x32\x3\x33\x3"+
		"\x33\x3\x33\x3\x33\a\x33\x246\n\x33\f\x33\xE\x33\x249\v\x33\x3\x33\x3"+
		"\x33\x3\x33\x3\x34\x3\x34\x3\x34\x5\x34\x251\n\x34\x3\x35\x3\x35\x3\x35"+
		"\x3\x35\x3\x35\x3\x35\x3\x35\x3\x36\x3\x36\x3\x36\x3\x36\x6\x36\x25E\n"+
		"\x36\r\x36\xE\x36\x25F\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37"+
		"\x3\x38\x3\x38\x3\x38\x3\x38\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39"+
		"\x5\x39\x273\n\x39\x3\x39\x3\x39\x3\x39\x5\x39\x278\n\x39\x3:\x3:\x3:"+
		"\x3:\x6:\x27E\n:\r:\xE:\x27F\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3"+
		":\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x5:\x295\n:\x3:\x3:\x3:\x5:\x29A\n:"+
		"\x3;\x3;\x3<\x3<\x3<\x3<\x3<\x3<\x3=\x3=\x3=\x3=\x3=\x3=\x3>\x3>\x3>\x3"+
		">\x3>\x3>\x3?\x3?\x3?\x3?\x3?\x3?\x3@\x3@\x3@\x3@\x3@\x3@\x3\x41\x3\x41"+
		"\x3\x41\x3\x41\x3\x41\x5\x41\x2C1\n\x41\x3\x41\x3\x41\x3\x42\x3\x42\x3"+
		"\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3"+
		"\x43\x3\x43\x3\x44\x3\x44\x3\x44\x6\x44\x2D6\n\x44\r\x44\xE\x44\x2D7\x3"+
		"\x44\x5\x44\x2DB\n\x44\x3\x44\x3\x44\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45"+
		"\x3\x45\x3\x45\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3G\x3"+
		"G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x6G\x2F7\nG\rG\xEG\x2F8\x3G\x5G\x2FC"+
		"\nG\x3H\x6H\x2FF\nH\rH\xEH\x300\x3H\x14\x95\x9D\xAE\xBA\xE3\xEE\x132\x141"+
		"\x14A\x151\x15D\x164\x172\x17A\x247\x25F\x27F\x2D7\x2I\x2\x4\x6\b\n\f"+
		"\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42"+
		"\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66hjlnprtvxz|~\x80\x82\x84\x86\x88\x8A"+
		"\x8C\x8E\x2\b\x3\x2\x6\a\x3\x2\t\n\x3\x2\xE\xF\x3\x2\x1A\x1B\x3\x2.\x31"+
		"\x3\x2\x42\x43\x334\x2\x90\x3\x2\x2\x2\x4\xA2\x3\x2\x2\x2\x6\xB2\x3\x2"+
		"\x2\x2\b\xBE\x3\x2\x2\x2\n\xC3\x3\x2\x2\x2\f\xDB\x3\x2\x2\x2\xE\xF5\x3"+
		"\x2\x2\x2\x10\x103\x3\x2\x2\x2\x12\x105\x3\x2\x2\x2\x14\x113\x3\x2\x2"+
		"\x2\x16\x11E\x3\x2\x2\x2\x18\x124\x3\x2\x2\x2\x1A\x12D\x3\x2\x2\x2\x1C"+
		"\x13A\x3\x2\x2\x2\x1E\x13C\x3\x2\x2\x2 \x145\x3\x2\x2\x2\"\x169\x3\x2"+
		"\x2\x2$\x16B\x3\x2\x2\x2&\x176\x3\x2\x2\x2(\x17F\x3\x2\x2\x2*\x18A\x3"+
		"\x2\x2\x2,\x192\x3\x2\x2\x2.\x196\x3\x2\x2\x2\x30\x19A\x3\x2\x2\x2\x32"+
		"\x19E\x3\x2\x2\x2\x34\x1A2\x3\x2\x2\x2\x36\x1A6\x3\x2\x2\x2\x38\x1A9\x3"+
		"\x2\x2\x2:\x1AC\x3\x2\x2\x2<\x1B6\x3\x2\x2\x2>\x1C5\x3\x2\x2\x2@\x1C7"+
		"\x3\x2\x2\x2\x42\x1CC\x3\x2\x2\x2\x44\x1E6\x3\x2\x2\x2\x46\x1E8\x3\x2"+
		"\x2\x2H\x1F1\x3\x2\x2\x2J\x1F3\x3\x2\x2\x2L\x1FB\x3\x2\x2\x2N\x201\x3"+
		"\x2\x2\x2P\x203\x3\x2\x2\x2R\x207\x3\x2\x2\x2T\x20F\x3\x2\x2\x2V\x217"+
		"\x3\x2\x2\x2X\x21D\x3\x2\x2\x2Z\x21F\x3\x2\x2\x2\\\x224\x3\x2\x2\x2^\x229"+
		"\x3\x2\x2\x2`\x233\x3\x2\x2\x2\x62\x23F\x3\x2\x2\x2\x64\x241\x3\x2\x2"+
		"\x2\x66\x250\x3\x2\x2\x2h\x252\x3\x2\x2\x2j\x25D\x3\x2\x2\x2l\x261\x3"+
		"\x2\x2\x2n\x268\x3\x2\x2\x2p\x277\x3\x2\x2\x2r\x299\x3\x2\x2\x2t\x29B"+
		"\x3\x2\x2\x2v\x29D\x3\x2\x2\x2x\x2A3\x3\x2\x2\x2z\x2A9\x3\x2\x2\x2|\x2AF"+
		"\x3\x2\x2\x2~\x2B5\x3\x2\x2\x2\x80\x2BB\x3\x2\x2\x2\x82\x2C4\x3\x2\x2"+
		"\x2\x84\x2CB\x3\x2\x2\x2\x86\x2D2\x3\x2\x2\x2\x88\x2DE\x3\x2\x2\x2\x8A"+
		"\x2E5\x3\x2\x2\x2\x8C\x2FB\x3\x2\x2\x2\x8E\x2FE\x3\x2\x2\x2\x90\x91\a"+
		"G\x2\x2\x91\x95\a\x3\x2\x2\x92\x94\x5\x16\f\x2\x93\x92\x3\x2\x2\x2\x94"+
		"\x97\x3\x2\x2\x2\x95\x96\x3\x2\x2\x2\x95\x93\x3\x2\x2\x2\x96\x98\x3\x2"+
		"\x2\x2\x97\x95\x3\x2\x2\x2\x98\x9B\x5\x4\x3\x2\x99\x9C\x5\xE\b\x2\x9A"+
		"\x9C\x5\x6\x4\x2\x9B\x99\x3\x2\x2\x2\x9B\x9A\x3\x2\x2\x2\x9C\x9D\x3\x2"+
		"\x2\x2\x9D\x9E\x3\x2\x2\x2\x9D\x9B\x3\x2\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F"+
		"\xA0\x5\b\x5\x2\xA0\xA1\aH\x2\x2\xA1\x3\x3\x2\x2\x2\xA2\xA3\aG\x2\x2\xA3"+
		"\xA4\a\x4\x2\x2\xA4\xA5\x5\x18\r\x2\xA5\xA6\aG\x2\x2\xA6\xA7\x5\x1A\xE"+
		"\x2\xA7\xAC\aH\x2\x2\xA8\xA9\aG\x2\x2\xA9\xAA\x5\x1C\xF\x2\xAA\xAB\aH"+
		"\x2\x2\xAB\xAD\x3\x2\x2\x2\xAC\xA8\x3\x2\x2\x2\xAD\xAE\x3\x2\x2\x2\xAE"+
		"\xAF\x3\x2\x2\x2\xAE\xAC\x3\x2\x2\x2\xAF\xB0\x3\x2\x2\x2\xB0\xB1\aH\x2"+
		"\x2\xB1\x5\x3\x2\x2\x2\xB2\xB3\aG\x2\x2\xB3\xB4\a\x5\x2\x2\xB4\xB5\t\x2"+
		"\x2\x2\xB5\xB8\x5\n\x6\x2\xB6\xB9\x5\xE\b\x2\xB7\xB9\x5\x6\x4\x2\xB8\xB6"+
		"\x3\x2\x2\x2\xB8\xB7\x3\x2\x2\x2\xB9\xBA\x3\x2\x2\x2\xBA\xBB\x3\x2\x2"+
		"\x2\xBA\xB8\x3\x2\x2\x2\xBB\xBC\x3\x2\x2\x2\xBC\xBD\aH\x2\x2\xBD\a\x3"+
		"\x2\x2\x2\xBE\xBF\aG\x2\x2\xBF\xC0\a\b\x2\x2\xC0\xC1\t\x3\x2\x2\xC1\xC2"+
		"\x5\x8CG\x2\xC2\t\x3\x2\x2\x2\xC3\xC4\aG\x2\x2\xC4\xC5\a\v\x2\x2\xC5\xC6"+
		"\x5r:\x2\xC6\xC7\aH\x2\x2\xC7\v\x3\x2\x2\x2\xC8\xD6\aG\x2\x2\xC9\xD7\x5"+
		"$\x13\x2\xCA\xD7\x5\x1A\xE\x2\xCB\xD7\x5\x1C\xF\x2\xCC\xD7\x5*\x16\x2"+
		"\xCD\xD7\x5,\x17\x2\xCE\xD7\x5\x32\x1A\x2\xCF\xD7\x5\x34\x1B\x2\xD0\xD7"+
		"\x5.\x18\x2\xD1\xD7\x5\x30\x19\x2\xD2\xD7\x5\x36\x1C\x2\xD3\xD7\x5:\x1E"+
		"\x2\xD4\xD7\x5\x38\x1D\x2\xD5\xD7\x5<\x1F\x2\xD6\xC9\x3\x2\x2\x2\xD6\xCA"+
		"\x3\x2\x2\x2\xD6\xCB\x3\x2\x2\x2\xD6\xCC\x3\x2\x2\x2\xD6\xCD\x3\x2\x2"+
		"\x2\xD6\xCE\x3\x2\x2\x2\xD6\xCF\x3\x2\x2\x2\xD6\xD0\x3\x2\x2\x2\xD6\xD1"+
		"\x3\x2\x2\x2\xD6\xD2\x3\x2\x2\x2\xD6\xD3\x3\x2\x2\x2\xD6\xD4\x3\x2\x2"+
		"\x2\xD6\xD5\x3\x2\x2\x2\xD7\xD8\x3\x2\x2\x2\xD8\xD9\aH\x2\x2\xD9\xDC\x3"+
		"\x2\x2\x2\xDA\xDC\x5\x12\n\x2\xDB\xC8\x3\x2\x2\x2\xDB\xDA\x3\x2\x2\x2"+
		"\xDC\r\x3\x2\x2\x2\xDD\xDE\aG\x2\x2\xDE\xDF\a\f\x2\x2\xDF\xE1\aG\x2\x2"+
		"\xE0\xE2\x5\x10\t\x2\xE1\xE0\x3\x2\x2\x2\xE2\xE3\x3\x2\x2\x2\xE3\xE4\x3"+
		"\x2\x2\x2\xE3\xE1\x3\x2\x2\x2\xE4\xE5\x3\x2\x2\x2\xE5\xE6\aH\x2\x2\xE6"+
		"\xE7\aH\x2\x2\xE7\xF6\x3\x2\x2\x2\xE8\xE9\aG\x2\x2\xE9\xEA\a\r\x2\x2\xEA"+
		"\xEC\aG\x2\x2\xEB\xED\x5\x10\t\x2\xEC\xEB\x3\x2\x2\x2\xED\xEE\x3\x2\x2"+
		"\x2\xEE\xEF\x3\x2\x2\x2\xEE\xEC\x3\x2\x2\x2\xEF\xF0\x3\x2\x2\x2\xF0\xF1"+
		"\aH\x2\x2\xF1\xF2\aH\x2\x2\xF2\xF6\x3\x2\x2\x2\xF3\xF6\x5\x12\n\x2\xF4"+
		"\xF6\x5\x14\v\x2\xF5\xDD\x3\x2\x2\x2\xF5\xE8\x3\x2\x2\x2\xF5\xF3\x3\x2"+
		"\x2\x2\xF5\xF4\x3\x2\x2\x2\xF6\xF\x3\x2\x2\x2\xF7\xF8\aG\x2\x2\xF8\xF9"+
		"\x5r:\x2\xF9\xFA\x5\xE\b\x2\xFA\xFB\aH\x2\x2\xFB\x104\x3\x2\x2\x2\xFC"+
		"\x104\x5\xE\b\x2\xFD\xFE\aG\x2\x2\xFE\xFF\x5r:\x2\xFF\x100\x5\f\a\x2\x100"+
		"\x101\aH\x2\x2\x101\x104\x3\x2\x2\x2\x102\x104\x5\f\a\x2\x103\xF7\x3\x2"+
		"\x2\x2\x103\xFC\x3\x2\x2\x2\x103\xFD\x3\x2\x2\x2\x103\x102\x3\x2\x2\x2"+
		"\x104\x11\x3\x2\x2\x2\x105\x106\aG\x2\x2\x106\x107\t\x4\x2\x2\x107\x108"+
		"\x5\x62\x32\x2\x108\x10F\x5L\'\x2\x109\x110\x5\xE\b\x2\x10A\x110\x5\f"+
		"\a\x2\x10B\x110\x5r:\x2\x10C\x110\x5\x44#\x2\x10D\x110\x5\x10\t\x2\x10E"+
		"\x110\x5\x42\"\x2\x10F\x109\x3\x2\x2\x2\x10F\x10A\x3\x2\x2\x2\x10F\x10B"+
		"\x3\x2\x2\x2\x10F\x10C\x3\x2\x2\x2\x10F\x10D\x3\x2\x2\x2\x10F\x10E\x3"+
		"\x2\x2\x2\x110\x111\x3\x2\x2\x2\x111\x112\aH\x2\x2\x112\x13\x3\x2\x2\x2"+
		"\x113\x114\aG\x2\x2\x114\x115\a\x10\x2\x2\x115\x116\x5`\x31\x2\x116\x11A"+
		"\x5L\'\x2\x117\x11B\x5\xE\b\x2\x118\x11B\x5\f\a\x2\x119\x11B\x5\x10\t"+
		"\x2\x11A\x117\x3\x2\x2\x2\x11A\x118\x3\x2\x2\x2\x11A\x119\x3\x2\x2\x2"+
		"\x11B\x11C\x3\x2\x2\x2\x11C\x11D\aH\x2\x2\x11D\x15\x3\x2\x2\x2\x11E\x11F"+
		"\aG\x2\x2\x11F\x120\a\x11\x2\x2\x120\x121\x5`\x31\x2\x121\x122\x5L\'\x2"+
		"\x122\x123\aH\x2\x2\x123\x17\x3\x2\x2\x2\x124\x125\aG\x2\x2\x125\x126"+
		"\a\x12\x2\x2\x126\x129\a\x13\x2\x2\x127\x12A\x5\x8CG\x2\x128\x12A\x5L"+
		"\'\x2\x129\x127\x3\x2\x2\x2\x129\x128\x3\x2\x2\x2\x12A\x12B\x3\x2\x2\x2"+
		"\x12B\x12C\aH\x2\x2\x12C\x19\x3\x2\x2\x2\x12D\x12E\a\x12\x2\x2\x12E\x130"+
		"\a\x14\x2\x2\x12F\x131\x5 \x11\x2\x130\x12F\x3\x2\x2\x2\x131\x132\x3\x2"+
		"\x2\x2\x132\x133\x3\x2\x2\x2\x132\x130\x3\x2\x2\x2\x133\x1B\x3\x2\x2\x2"+
		"\x134\x135\a\x12\x2\x2\x135\x136\a\x15\x2\x2\x136\x137\x5\x44#\x2\x137"+
		"\x138\x5\x1E\x10\x2\x138\x13B\x3\x2\x2\x2\x139\x13B\x5<\x1F\x2\x13A\x134"+
		"\x3\x2\x2\x2\x13A\x139\x3\x2\x2\x2\x13B\x1D\x3\x2\x2\x2\x13C\x13D\aG\x2"+
		"\x2\x13D\x13F\a\x15\x2\x2\x13E\x140\x5\"\x12\x2\x13F\x13E\x3\x2\x2\x2"+
		"\x140\x141\x3\x2\x2\x2\x141\x142\x3\x2\x2\x2\x141\x13F\x3\x2\x2\x2\x142"+
		"\x143\x3\x2\x2\x2\x143\x144\aH\x2\x2\x144\x1F\x3\x2\x2\x2\x145\x14A\a"+
		"G\x2\x2\x146\x147\a\x45\x2\x2\x147\x149\a\x16\x2\x2\x148\x146\x3\x2\x2"+
		"\x2\x149\x14C\x3\x2\x2\x2\x14A\x14B\x3\x2\x2\x2\x14A\x148\x3\x2\x2\x2"+
		"\x14B\x14D\x3\x2\x2\x2\x14C\x14A\x3\x2\x2\x2\x14D\x151\a\x45\x2\x2\x14E"+
		"\x150\x5 \x11\x2\x14F\x14E\x3\x2\x2\x2\x150\x153\x3\x2\x2\x2\x151\x152"+
		"\x3\x2\x2\x2\x151\x14F\x3\x2\x2\x2\x152\x154\x3\x2\x2\x2\x153\x151\x3"+
		"\x2\x2\x2\x154\x155\aH\x2\x2\x155!\x3\x2\x2\x2\x156\x16A\x5L\'\x2\x157"+
		"\x15D\aG\x2\x2\x158\x159\x5\x8EH\x2\x159\x15A\a\x16\x2\x2\x15A\x15C\x3"+
		"\x2\x2\x2\x15B\x158\x3\x2\x2\x2\x15C\x15F\x3\x2\x2\x2\x15D\x15E\x3\x2"+
		"\x2\x2\x15D\x15B\x3\x2\x2\x2\x15E\x160\x3\x2\x2\x2\x15F\x15D\x3\x2\x2"+
		"\x2\x160\x164\x5\x8EH\x2\x161\x163\x5\"\x12\x2\x162\x161\x3\x2\x2\x2\x163"+
		"\x166\x3\x2\x2\x2\x164\x165\x3\x2\x2\x2\x164\x162\x3\x2\x2\x2\x165\x167"+
		"\x3\x2\x2\x2\x166\x164\x3\x2\x2\x2\x167\x168\aH\x2\x2\x168\x16A\x3\x2"+
		"\x2\x2\x169\x156\x3\x2\x2\x2\x169\x157\x3\x2\x2\x2\x16A#\x3\x2\x2\x2\x16B"+
		"\x16C\a\x17\x2\x2\x16C\x16D\a\x18\x2\x2\x16D\x16E\x5L\'\x2\x16E\x170\a"+
		"G\x2\x2\x16F\x171\x5&\x14\x2\x170\x16F\x3\x2\x2\x2\x171\x172\x3\x2\x2"+
		"\x2\x172\x173\x3\x2\x2\x2\x172\x170\x3\x2\x2\x2\x173\x174\x3\x2\x2\x2"+
		"\x174\x175\aH\x2\x2\x175%\x3\x2\x2\x2\x176\x178\aG\x2\x2\x177\x179\x5"+
		"(\x15\x2\x178\x177\x3\x2\x2\x2\x179\x17A\x3\x2\x2\x2\x17A\x17B\x3\x2\x2"+
		"\x2\x17A\x178\x3\x2\x2\x2\x17B\x17C\x3\x2\x2\x2\x17C\x17D\x5\x8CG\x2\x17D"+
		"\x17E\aH\x2\x2\x17E\'\x3\x2\x2\x2\x17F\x180\aG\x2\x2\x180\x186\x5\x8E"+
		"H\x2\x181\x182\aG\x2\x2\x182\x183\x5j\x36\x2\x183\x184\aH\x2\x2\x184\x187"+
		"\x3\x2\x2\x2\x185\x187\x5p\x39\x2\x186\x181\x3\x2\x2\x2\x186\x185\x3\x2"+
		"\x2\x2\x187\x188\x3\x2\x2\x2\x188\x189\aH\x2\x2\x189)\x3\x2\x2\x2\x18A"+
		"\x18B\a\x19\x2\x2\x18B\x190\t\x5\x2\x2\x18C\x191\x5Z.\x2\x18D\x191\a\x1B"+
		"\x2\x2\x18E\x191\a\x1A\x2\x2\x18F\x191\a\x1C\x2\x2\x190\x18C\x3\x2\x2"+
		"\x2\x190\x18D\x3\x2\x2\x2\x190\x18E\x3\x2\x2\x2\x190\x18F\x3\x2\x2\x2"+
		"\x191+\x3\x2\x2\x2\x192\x193\a\x1D\x2\x2\x193\x194\x5\x42\"\x2\x194\x195"+
		"\x5\x8CG\x2\x195-\x3\x2\x2\x2\x196\x197\a\x1E\x2\x2\x197\x198\x5\x42\""+
		"\x2\x198\x199\x5\x8CG\x2\x199/\x3\x2\x2\x2\x19A\x19B\a\x1F\x2\x2\x19B"+
		"\x19C\x5\x42\"\x2\x19C\x19D\x5\x8CG\x2\x19D\x31\x3\x2\x2\x2\x19E\x19F"+
		"\a \x2\x2\x19F\x1A0\x5> \x2\x1A0\x1A1\x5> \x2\x1A1\x33\x3\x2\x2\x2\x1A2"+
		"\x1A3\a!\x2\x2\x1A3\x1A4\x5> \x2\x1A4\x1A5\x5> \x2\x1A5\x35\x3\x2\x2\x2"+
		"\x1A6\x1A7\a\"\x2\x2\x1A7\x1A8\x5> \x2\x1A8\x37\x3\x2\x2\x2\x1A9\x1AA"+
		"\a#\x2\x2\x1AA\x1AB\x5\x44#\x2\x1AB\x39\x3\x2\x2\x2\x1AC\x1AD\a$\x2\x2"+
		"\x1AD\x1AE\a%\x2\x2\x1AE;\x3\x2\x2\x2\x1AF\x1B0\a&\x2\x2\x1B0\x1B1\x5"+
		"\x8CG\x2\x1B1\x1B2\x5\f\a\x2\x1B2\x1B7\x3\x2\x2\x2\x1B3\x1B4\a&\x2\x2"+
		"\x1B4\x1B5\a\xF\x2\x2\x1B5\x1B7\x5\f\a\x2\x1B6\x1AF\x3\x2\x2\x2\x1B6\x1B3"+
		"\x3\x2\x2\x2\x1B7=\x3\x2\x2\x2\x1B8\x1C6\x5\x82\x42\x2\x1B9\x1C6\x5\x84"+
		"\x43\x2\x1BA\x1C6\x5L\'\x2\x1BB\x1C6\x5@!\x2\x1BC\x1C0\aG\x2\x2\x1BD\x1C1"+
		"\a\'\x2\x2\x1BE\x1C1\a(\x2\x2\x1BF\x1C1\x5\x8CG\x2\x1C0\x1BD\x3\x2\x2"+
		"\x2\x1C0\x1BE\x3\x2\x2\x2\x1C0\x1BF\x3\x2\x2\x2\x1C1\x1C2\x3\x2\x2\x2"+
		"\x1C2\x1C3\x5\x44#\x2\x1C3\x1C4\aH\x2\x2\x1C4\x1C6\x3\x2\x2\x2\x1C5\x1B8"+
		"\x3\x2\x2\x2\x1C5\x1B9\x3\x2\x2\x2\x1C5\x1BA\x3\x2\x2\x2\x1C5\x1BB\x3"+
		"\x2\x2\x2\x1C5\x1BC\x3\x2\x2\x2\x1C6?\x3\x2\x2\x2\x1C7\x1C8\aG\x2\x2\x1C8"+
		"\x1C9\a)\x2\x2\x1C9\x1CA\x5> \x2\x1CA\x1CB\aH\x2\x2\x1CB\x41\x3\x2\x2"+
		"\x2\x1CC\x1D0\aG\x2\x2\x1CD\x1D1\a\x3\x2\x2\x1CE\x1D1\x5R*\x2\x1CF\x1D1"+
		"\x5L\'\x2\x1D0\x1CD\x3\x2\x2\x2\x1D0\x1CE\x3\x2\x2\x2\x1D0\x1CF\x3\x2"+
		"\x2\x2\x1D1\x1D2\x3\x2\x2\x2\x1D2\x1D5\a*\x2\x2\x1D3\x1D6\x5\x8EH\x2\x1D4"+
		"\x1D6\x5L\'\x2\x1D5\x1D3\x3\x2\x2\x2\x1D5\x1D4\x3\x2\x2\x2\x1D6\x1D7\x3"+
		"\x2\x2\x2\x1D7\x1D8\aH\x2\x2\x1D8\x43\x3\x2\x2\x2\x1D9\x1E7\x5\x86\x44"+
		"\x2\x1DA\x1E7\x5l\x37\x2\x1DB\x1DC\aG\x2\x2\x1DC\x1DD\x5N(\x2\x1DD\x1E0"+
		"\x5P)\x2\x1DE\x1E1\x5\x8EH\x2\x1DF\x1E1\x5L\'\x2\x1E0\x1DE\x3\x2\x2\x2"+
		"\x1E0\x1DF\x3\x2\x2\x2\x1E1\x1E2\x3\x2\x2\x2\x1E2\x1E3\aH\x2\x2\x1E3\x1E7"+
		"\x3\x2\x2\x2\x1E4\x1E7\x5\x46$\x2\x1E5\x1E7\x5L\'\x2\x1E6\x1D9\x3\x2\x2"+
		"\x2\x1E6\x1DA\x3\x2\x2\x2\x1E6\x1DB\x3\x2\x2\x2\x1E6\x1E4\x3\x2\x2\x2"+
		"\x1E6\x1E5\x3\x2\x2\x2\x1E7\x45\x3\x2\x2\x2\x1E8\x1EC\aG\x2\x2\x1E9\x1ED"+
		"\a\'\x2\x2\x1EA\x1ED\a(\x2\x2\x1EB\x1ED\x5\x8CG\x2\x1EC\x1E9\x3\x2\x2"+
		"\x2\x1EC\x1EA\x3\x2\x2\x2\x1EC\x1EB\x3\x2\x2\x2\x1ED\x1EE\x3\x2\x2\x2"+
		"\x1EE\x1EF\x5H%\x2\x1EF\x1F0\aH\x2\x2\x1F0G\x3\x2\x2\x2\x1F1\x1F2\x5J"+
		"&\x2\x1F2I\x3\x2\x2\x2\x1F3\x1F4\aG\x2\x2\x1F4\x1F5\a+\x2\x2\x1F5\x1F6"+
		"\x5\x8CG\x2\x1F6\x1F7\x5\x44#\x2\x1F7\x1F8\a,\x2\x2\x1F8\x1F9\x5L\'\x2"+
		"\x1F9\x1FA\aH\x2\x2\x1FAK\x3\x2\x2\x2\x1FB\x1FC\a-\x2\x2\x1FC\x1FD\x5"+
		"\x8EH\x2\x1FDM\x3\x2\x2\x2\x1FE\x202\a\x3\x2\x2\x1FF\x202\x5T+\x2\x200"+
		"\x202\x5L\'\x2\x201\x1FE\x3\x2\x2\x2\x201\x1FF\x3\x2\x2\x2\x201\x200\x3"+
		"\x2\x2\x2\x202O\x3\x2\x2\x2\x203\x204\t\x6\x2\x2\x204Q\x3\x2\x2\x2\x205"+
		"\x208\x5V,\x2\x206\x208\x5T+\x2\x207\x205\x3\x2\x2\x2\x207\x206\x3\x2"+
		"\x2\x2\x208S\x3\x2\x2\x2\x209\x20A\aG\x2\x2\x20A\x20B\x5X-\x2\x20B\x20C"+
		"\a\x6\x2\x2\x20C\x20D\aH\x2\x2\x20D\x210\x3\x2\x2\x2\x20E\x210\x5Z.\x2"+
		"\x20F\x209\x3\x2\x2\x2\x20F\x20E\x3\x2\x2\x2\x210U\x3\x2\x2\x2\x211\x212"+
		"\aG\x2\x2\x212\x213\x5X-\x2\x213\x214\a\a\x2\x2\x214\x215\aH\x2\x2\x215"+
		"\x218\x3\x2\x2\x2\x216\x218\x5\\/\x2\x217\x211\x3\x2\x2\x2\x217\x216\x3"+
		"\x2\x2\x2\x218W\x3\x2\x2\x2\x219\x21E\x5\x8CG\x2\x21A\x21E\a\x1C\x2\x2"+
		"\x21B\x21E\a\x1A\x2\x2\x21C\x21E\a\x1B\x2\x2\x21D\x219\x3\x2\x2\x2\x21D"+
		"\x21A\x3\x2\x2\x2\x21D\x21B\x3\x2\x2\x2\x21D\x21C\x3\x2\x2\x2\x21EY\x3"+
		"\x2\x2\x2\x21F\x220\aG\x2\x2\x220\x221\a\x32\x2\x2\x221\x222\x5> \x2\x222"+
		"\x223\aH\x2\x2\x223[\x3\x2\x2\x2\x224\x225\aG\x2\x2\x225\x226\a\a\x2\x2"+
		"\x226\x227\x5T+\x2\x227\x228\aH\x2\x2\x228]\x3\x2\x2\x2\x229\x22A\aG\x2"+
		"\x2\x22A\x22B\a\x33\x2\x2\x22B\x22C\t\x2\x2\x2\x22C\x22D\aH\x2\x2\x22D"+
		"_\x3\x2\x2\x2\x22E\x234\x5\x8CG\x2\x22F\x234\x5r:\x2\x230\x234\x5\x8E"+
		"H\x2\x231\x234\x5L\'\x2\x232\x234\x5\x62\x32\x2\x233\x22E\x3\x2\x2\x2"+
		"\x233\x22F\x3\x2\x2\x2\x233\x230\x3\x2\x2\x2\x233\x231\x3\x2\x2\x2\x233"+
		"\x232\x3\x2\x2\x2\x234\x61\x3\x2\x2\x2\x235\x240\x5\x44#\x2\x236\x240"+
		"\x5\x64\x33\x2\x237\x240\x5\x66\x34\x2\x238\x240\a\x6\x2\x2\x239\x240"+
		"\a\a\x2\x2\x23A\x240\x5V,\x2\x23B\x240\x5L\'\x2\x23C\x240\x5^\x30\x2\x23D"+
		"\x240\x5h\x35\x2\x23E\x240\x5l\x37\x2\x23F\x235\x3\x2\x2\x2\x23F\x236"+
		"\x3\x2\x2\x2\x23F\x237\x3\x2\x2\x2\x23F\x238\x3\x2\x2\x2\x23F\x239\x3"+
		"\x2\x2\x2\x23F\x23A\x3\x2\x2\x2\x23F\x23B\x3\x2\x2\x2\x23F\x23C\x3\x2"+
		"\x2\x2\x23F\x23D\x3\x2\x2\x2\x23F\x23E\x3\x2\x2\x2\x240\x63\x3\x2\x2\x2"+
		"\x241\x247\aG\x2\x2\x242\x243\x5\x8EH\x2\x243\x244\a\x16\x2\x2\x244\x246"+
		"\x3\x2\x2\x2\x245\x242\x3\x2\x2\x2\x246\x249\x3\x2\x2\x2\x247\x248\x3"+
		"\x2\x2\x2\x247\x245\x3\x2\x2\x2\x248\x24A\x3\x2\x2\x2\x249\x247\x3\x2"+
		"\x2\x2\x24A\x24B\x5\x8EH\x2\x24B\x24C\aH\x2\x2\x24C\x65\x3\x2\x2\x2\x24D"+
		"\x251\x5H%\x2\x24E\x251\x5\x12\n\x2\x24F\x251\x5\x14\v\x2\x250\x24D\x3"+
		"\x2\x2\x2\x250\x24E\x3\x2\x2\x2\x250\x24F\x3\x2\x2\x2\x251g\x3\x2\x2\x2"+
		"\x252\x253\aG\x2\x2\x253\x254\a\x34\x2\x2\x254\x255\x5\x8CG\x2\x255\x256"+
		"\a\x35\x2\x2\x256\x257\x5\x8CG\x2\x257\x258\aH\x2\x2\x258i\x3\x2\x2\x2"+
		"\x259\x25E\aJ\x2\x2\x25A\x25E\x5\x8CG\x2\x25B\x25E\a\x41\x2\x2\x25C\x25E"+
		"\x5\x8EH\x2\x25D\x259\x3\x2\x2\x2\x25D\x25A\x3\x2\x2\x2\x25D\x25B\x3\x2"+
		"\x2\x2\x25D\x25C\x3\x2\x2\x2\x25E\x25F\x3\x2\x2\x2\x25F\x260\x3\x2\x2"+
		"\x2\x25F\x25D\x3\x2\x2\x2\x260k\x3\x2\x2\x2\x261\x262\aG\x2\x2\x262\x263"+
		"\a\x36\x2\x2\x263\x264\x5\x62\x32\x2\x264\x265\x5L\'\x2\x265\x266\x5r"+
		":\x2\x266\x267\aH\x2\x2\x267m\x3\x2\x2\x2\x268\x269\a\x43\x2\x2\x269\x26A"+
		"\x5p\x39\x2\x26A\x26B\x5p\x39\x2\x26Bo\x3\x2\x2\x2\x26C\x278\x5\x8EH\x2"+
		"\x26D\x278\x5L\'\x2\x26E\x26F\aG\x2\x2\x26F\x272\a\x37\x2\x2\x270\x273"+
		"\x5L\'\x2\x271\x273\x5\x8EH\x2\x272\x270\x3\x2\x2\x2\x272\x271\x3\x2\x2"+
		"\x2\x273\x274\x3\x2\x2\x2\x274\x275\x5> \x2\x275\x276\aH\x2\x2\x276\x278"+
		"\x3\x2\x2\x2\x277\x26C\x3\x2\x2\x2\x277\x26D\x3\x2\x2\x2\x277\x26E\x3"+
		"\x2\x2\x2\x278q\x3\x2\x2\x2\x279\x294\aG\x2\x2\x27A\x27B\a\x41\x2\x2\x27B"+
		"\x27D\x5r:\x2\x27C\x27E\x5r:\x2\x27D\x27C\x3\x2\x2\x2\x27E\x27F\x3\x2"+
		"\x2\x2\x27F\x280\x3\x2\x2\x2\x27F\x27D\x3\x2\x2\x2\x280\x295\x3\x2\x2"+
		"\x2\x281\x282\x5t;\x2\x282\x283\x5\x8CG\x2\x283\x284\x5\x8CG\x2\x284\x295"+
		"\x3\x2\x2\x2\x285\x295\x5n\x38\x2\x286\x287\a\x43\x2\x2\x287\x288\x5>"+
		" \x2\x288\x289\x5> \x2\x289\x295\x3\x2\x2\x2\x28A\x28B\a\x44\x2\x2\x28B"+
		"\x295\x5r:\x2\x28C\x28D\a\x43\x2\x2\x28D\x28E\x5T+\x2\x28E\x28F\x5T+\x2"+
		"\x28F\x295\x3\x2\x2\x2\x290\x291\a\x43\x2\x2\x291\x292\x5V,\x2\x292\x293"+
		"\x5V,\x2\x293\x295\x3\x2\x2\x2\x294\x27A\x3\x2\x2\x2\x294\x281\x3\x2\x2"+
		"\x2\x294\x285\x3\x2\x2\x2\x294\x286\x3\x2\x2\x2\x294\x28A\x3\x2\x2\x2"+
		"\x294\x28C\x3\x2\x2\x2\x294\x290\x3\x2\x2\x2\x295\x296\x3\x2\x2\x2\x296"+
		"\x297\aH\x2\x2\x297\x29A\x3\x2\x2\x2\x298\x29A\x5\x12\n\x2\x299\x279\x3"+
		"\x2\x2\x2\x299\x298\x3\x2\x2\x2\x29As\x3\x2\x2\x2\x29B\x29C\t\a\x2\x2"+
		"\x29Cu\x3\x2\x2\x2\x29D\x29E\aG\x2\x2\x29E\x29F\a\x38\x2\x2\x29F\x2A0"+
		"\x5\x8CG\x2\x2A0\x2A1\x5\x8CG\x2\x2A1\x2A2\aH\x2\x2\x2A2w\x3\x2\x2\x2"+
		"\x2A3\x2A4\aG\x2\x2\x2A4\x2A5\a\x39\x2\x2\x2A5\x2A6\x5\x8CG\x2\x2A6\x2A7"+
		"\x5\x8CG\x2\x2A7\x2A8\aH\x2\x2\x2A8y\x3\x2\x2\x2\x2A9\x2AA\aG\x2\x2\x2AA"+
		"\x2AB\a:\x2\x2\x2AB\x2AC\x5\x8CG\x2\x2AC\x2AD\x5\x8CG\x2\x2AD\x2AE\aH"+
		"\x2\x2\x2AE{\x3\x2\x2\x2\x2AF\x2B0\aG\x2\x2\x2B0\x2B1\a;\x2\x2\x2B1\x2B2"+
		"\x5\x8CG\x2\x2B2\x2B3\x5\x8CG\x2\x2B3\x2B4\aH\x2\x2\x2B4}\x3\x2\x2\x2"+
		"\x2B5\x2B6\aG\x2\x2\x2B6\x2B7\a<\x2\x2\x2B7\x2B8\x5\x8CG\x2\x2B8\x2B9"+
		"\x5\x8CG\x2\x2B9\x2BA\aH\x2\x2\x2BA\x7F\x3\x2\x2\x2\x2BB\x2BC\aG\x2\x2"+
		"\x2BC\x2C0\a=\x2\x2\x2BD\x2C1\x5\x44#\x2\x2BE\x2C1\x5H%\x2\x2BF\x2C1\x5"+
		"L\'\x2\x2C0\x2BD\x3\x2\x2\x2\x2C0\x2BE\x3\x2\x2\x2\x2C0\x2BF\x3\x2\x2"+
		"\x2\x2C1\x2C2\x3\x2\x2\x2\x2C2\x2C3\aH\x2\x2\x2C3\x81\x3\x2\x2\x2\x2C4"+
		"\x2C5\aG\x2\x2\x2C5\x2C6\a\n\x2\x2\x2C6\x2C7\x5\x44#\x2\x2C7\x2C8\a,\x2"+
		"\x2\x2C8\x2C9\x5L\'\x2\x2C9\x2CA\aH\x2\x2\x2CA\x83\x3\x2\x2\x2\x2CB\x2CC"+
		"\aG\x2\x2\x2CC\x2CD\a\t\x2\x2\x2CD\x2CE\x5\x44#\x2\x2CE\x2CF\a,\x2\x2"+
		"\x2CF\x2D0\x5L\'\x2\x2D0\x2D1\aH\x2\x2\x2D1\x85\x3\x2\x2\x2\x2D2\x2D3"+
		"\aG\x2\x2\x2D3\x2DA\a>\x2\x2\x2D4\x2D6\x5\x44#\x2\x2D5\x2D4\x3\x2\x2\x2"+
		"\x2D6\x2D7\x3\x2\x2\x2\x2D7\x2D8\x3\x2\x2\x2\x2D7\x2D5\x3\x2\x2\x2\x2D8"+
		"\x2DB\x3\x2\x2\x2\x2D9\x2DB\x5\x12\n\x2\x2DA\x2D5\x3\x2\x2\x2\x2DA\x2D9"+
		"\x3\x2\x2\x2\x2DB\x2DC\x3\x2\x2\x2\x2DC\x2DD\aH\x2\x2\x2DD\x87\x3\x2\x2"+
		"\x2\x2DE\x2DF\aG\x2\x2\x2DF\x2E0\a?\x2\x2\x2E0\x2E1\x5\x44#\x2\x2E1\x2E2"+
		"\a,\x2\x2\x2E2\x2E3\x5L\'\x2\x2E3\x2E4\aH\x2\x2\x2E4\x89\x3\x2\x2\x2\x2E5"+
		"\x2E6\aG\x2\x2\x2E6\x2E7\a@\x2\x2\x2E7\x2E8\x5> \x2\x2E8\x2E9\a,\x2\x2"+
		"\x2E9\x2EA\x5L\'\x2\x2EA\x2EB\aH\x2\x2\x2EB\x8B\x3\x2\x2\x2\x2EC\x2FC"+
		"\x5\x80\x41\x2\x2ED\x2FC\x5x=\x2\x2EE\x2FC\x5z>\x2\x2EF\x2FC\x5|?\x2\x2F0"+
		"\x2FC\x5v<\x2\x2F1\x2FC\x5~@\x2\x2F2\x2FC\x5\x88\x45\x2\x2F3\x2FC\x5\x42"+
		"\"\x2\x2F4\x2FC\x5\x8A\x46\x2\x2F5\x2F7\a\x45\x2\x2\x2F6\x2F5\x3\x2\x2"+
		"\x2\x2F7\x2F8\x3\x2\x2\x2\x2F8\x2F6\x3\x2\x2\x2\x2F8\x2F9\x3\x2\x2\x2"+
		"\x2F9\x2FC\x3\x2\x2\x2\x2FA\x2FC\x5L\'\x2\x2FB\x2EC\x3\x2\x2\x2\x2FB\x2ED"+
		"\x3\x2\x2\x2\x2FB\x2EE\x3\x2\x2\x2\x2FB\x2EF\x3\x2\x2\x2\x2FB\x2F0\x3"+
		"\x2\x2\x2\x2FB\x2F1\x3\x2\x2\x2\x2FB\x2F2\x3\x2\x2\x2\x2FB\x2F3\x3\x2"+
		"\x2\x2\x2FB\x2F4\x3\x2\x2\x2\x2FB\x2F6\x3\x2\x2\x2\x2FB\x2FA\x3\x2\x2"+
		"\x2\x2FC\x8D\x3\x2\x2\x2\x2FD\x2FF\a\x46\x2\x2\x2FE\x2FD\x3\x2\x2\x2\x2FF"+
		"\x300\x3\x2\x2\x2\x300\x2FE\x3\x2\x2\x2\x300\x301\x3\x2\x2\x2\x301\x8F"+
		"\x3\x2\x2\x2;\x95\x9B\x9D\xAE\xB8\xBA\xD6\xDB\xE3\xEE\xF5\x103\x10F\x11A"+
		"\x129\x132\x13A\x141\x14A\x151\x15D\x164\x169\x172\x17A\x186\x190\x1B6"+
		"\x1C0\x1C5\x1D0\x1D5\x1E0\x1E6\x1EC\x201\x207\x20F\x217\x21D\x233\x23F"+
		"\x247\x250\x25D\x25F\x272\x277\x27F\x294\x299\x2C0\x2D7\x2DA\x2F8\x2FB"+
		"\x300";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
