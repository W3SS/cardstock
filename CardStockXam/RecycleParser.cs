//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Recycle.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class RecycleParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, BOOLOP=63, COMPOP=64, EQOP=65, UNOP=66, 
		INTNUM=67, LETT=68, OPEN=69, CLOSE=70, WS=71, ANY=72;
	public const int
		RULE_game = 0, RULE_setup = 1, RULE_stage = 2, RULE_scoring = 3, RULE_endcondition = 4, 
		RULE_action = 5, RULE_multiaction = 6, RULE_condact = 7, RULE_agg = 8, 
		RULE_let = 9, RULE_declare = 10, RULE_playercreate = 11, RULE_teamcreate = 12, 
		RULE_deckcreate = 13, RULE_deck = 14, RULE_teams = 15, RULE_attribute = 16, 
		RULE_initpoints = 17, RULE_awards = 18, RULE_subaward = 19, RULE_cycleaction = 20, 
		RULE_setaction = 21, RULE_incaction = 22, RULE_decaction = 23, RULE_moveaction = 24, 
		RULE_copyaction = 25, RULE_removeaction = 26, RULE_shuffleaction = 27, 
		RULE_turnaction = 28, RULE_repeat = 29, RULE_card = 30, RULE_actual = 31, 
		RULE_rawstorage = 32, RULE_cstorage = 33, RULE_memstorage = 34, RULE_memset = 35, 
		RULE_tuple = 36, RULE_var = 37, RULE_locpre = 38, RULE_locdesc = 39, RULE_who = 40, 
		RULE_whop = 41, RULE_whot = 42, RULE_whodesc = 43, RULE_owner = 44, RULE_teamp = 45, 
		RULE_other = 46, RULE_typed = 47, RULE_collection = 48, RULE_strcollection = 49, 
		RULE_cstoragecollection = 50, RULE_range = 51, RULE_filter = 52, RULE_attrcomp = 53, 
		RULE_cardatt = 54, RULE_boolean = 55, RULE_intop = 56, RULE_add = 57, 
		RULE_mult = 58, RULE_subtract = 59, RULE_mod = 60, RULE_divide = 61, RULE_sizeof = 62, 
		RULE_maxof = 63, RULE_minof = 64, RULE_unionof = 65, RULE_sum = 66, RULE_score = 67, 
		RULE_int = 68, RULE_namegr = 69;
	public static readonly string[] ruleNames = {
		"game", "setup", "stage", "scoring", "endcondition", "action", "multiaction", 
		"condact", "agg", "let", "declare", "playercreate", "teamcreate", "deckcreate", 
		"deck", "teams", "attribute", "initpoints", "awards", "subaward", "cycleaction", 
		"setaction", "incaction", "decaction", "moveaction", "copyaction", "removeaction", 
		"shuffleaction", "turnaction", "repeat", "card", "actual", "rawstorage", 
		"cstorage", "memstorage", "memset", "tuple", "var", "locpre", "locdesc", 
		"who", "whop", "whot", "whodesc", "owner", "teamp", "other", "typed", 
		"collection", "strcollection", "cstoragecollection", "range", "filter", 
		"attrcomp", "cardatt", "boolean", "intop", "add", "mult", "subtract", 
		"mod", "divide", "sizeof", "maxof", "minof", "unionof", "sum", "score", 
		"int", "namegr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'game'", "'setup'", "'stage'", "'player'", "'team'", "'scoring'", 
		"'min'", "'max'", "'end'", "'choice'", "'do'", "'any'", "'all'", "'let'", 
		"'declare'", "'create'", "'players'", "'teams'", "'deck'", "','", "'put'", 
		"'points'", "'cycle'", "'next'", "'current'", "'previous'", "'set'", "'inc'", 
		"'dec'", "'move'", "'remember'", "'forget'", "'shuffle'", "'turn'", "'pass'", 
		"'repeat'", "'top'", "'bottom'", "'actual'", "'sto'", "'tuples'", "'using'", 
		"'''", "'vloc'", "'iloc'", "'hloc'", "'mem'", "'owner'", "'other'", "'range'", 
		"'..'", "'filter'", "'cardatt'", "'+'", "'*'", "'-'", "'%'", "'//'", "'size'", 
		"'union'", "'sum'", "'score'", null, null, null, "'not'", null, null, 
		"'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "BOOLOP", "COMPOP", "EQOP", "UNOP", "INTNUM", "LETT", 
		"OPEN", "CLOSE", "WS", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Recycle.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public RecycleParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class GameContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public SetupContext setup() {
			return GetRuleContext<SetupContext>(0);
		}
		public ScoringContext scoring() {
			return GetRuleContext<ScoringContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DeclareContext[] declare() {
			return GetRuleContexts<DeclareContext>();
		}
		public DeclareContext declare(int i) {
			return GetRuleContext<DeclareContext>(i);
		}
		public MultiactionContext[] multiaction() {
			return GetRuleContexts<MultiactionContext>();
		}
		public MultiactionContext multiaction(int i) {
			return GetRuleContext<MultiactionContext>(i);
		}
		public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public GameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_game; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterGame(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitGame(this);
		}
	}

	[RuleVersion(0)]
	public GameContext game() {
		GameContext _localctx = new GameContext(Context, State);
		EnterRule(_localctx, 0, RULE_game);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; Match(OPEN);
			State = 141; Match(T__0);
			State = 145;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 142; declare();
					}
					} 
				}
				State = 147;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 148; setup();
			State = 151;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 151;
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						State = 149; multiaction();
						}
						break;
					case 2:
						{
						State = 150; stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 153;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 155; scoring();
			State = 156; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetupContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public PlayercreateContext playercreate() {
			return GetRuleContext<PlayercreateContext>(0);
		}
		public TeamcreateContext teamcreate() {
			return GetRuleContext<TeamcreateContext>(0);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public DeckcreateContext[] deckcreate() {
			return GetRuleContexts<DeckcreateContext>();
		}
		public DeckcreateContext deckcreate(int i) {
			return GetRuleContext<DeckcreateContext>(i);
		}
		public SetupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSetup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSetup(this);
		}
	}

	[RuleVersion(0)]
	public SetupContext setup() {
		SetupContext _localctx = new SetupContext(Context, State);
		EnterRule(_localctx, 2, RULE_setup);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; Match(OPEN);
			State = 159; Match(T__1);
			State = 160; playercreate();
			State = 161; Match(OPEN);
			State = 162; teamcreate();
			State = 163; Match(CLOSE);
			State = 168;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 164; Match(OPEN);
					State = 165; deckcreate();
					State = 166; Match(CLOSE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 170;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 172; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public EndconditionContext endcondition() {
			return GetRuleContext<EndconditionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultiactionContext[] multiaction() {
			return GetRuleContexts<MultiactionContext>();
		}
		public MultiactionContext multiaction(int i) {
			return GetRuleContext<MultiactionContext>(i);
		}
		public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public StageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterStage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitStage(this);
		}
	}

	[RuleVersion(0)]
	public StageContext stage() {
		StageContext _localctx = new StageContext(Context, State);
		EnterRule(_localctx, 4, RULE_stage);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; Match(OPEN);
			State = 175; Match(T__2);
			State = 176;
			_la = TokenStream.La(1);
			if ( !(_la==T__3 || _la==T__4) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 177; endcondition();
			State = 180;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 180;
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						State = 178; multiaction();
						}
						break;
					case 2:
						{
						State = 179; stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 182;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 184; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoringContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ScoringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scoring; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterScoring(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitScoring(this);
		}
	}

	[RuleVersion(0)]
	public ScoringContext scoring() {
		ScoringContext _localctx = new ScoringContext(Context, State);
		EnterRule(_localctx, 6, RULE_scoring);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; Match(OPEN);
			State = 187; Match(T__5);
			State = 188;
			_la = TokenStream.La(1);
			if ( !(_la==T__6 || _la==T__7) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 189; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndconditionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public EndconditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endcondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterEndcondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitEndcondition(this);
		}
	}

	[RuleVersion(0)]
	public EndconditionContext endcondition() {
		EndconditionContext _localctx = new EndconditionContext(Context, State);
		EnterRule(_localctx, 8, RULE_endcondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; Match(OPEN);
			State = 192; Match(T__8);
			State = 193; boolean();
			State = 194; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public InitpointsContext initpoints() {
			return GetRuleContext<InitpointsContext>(0);
		}
		public TeamcreateContext teamcreate() {
			return GetRuleContext<TeamcreateContext>(0);
		}
		public DeckcreateContext deckcreate() {
			return GetRuleContext<DeckcreateContext>(0);
		}
		public CycleactionContext cycleaction() {
			return GetRuleContext<CycleactionContext>(0);
		}
		public SetactionContext setaction() {
			return GetRuleContext<SetactionContext>(0);
		}
		public MoveactionContext moveaction() {
			return GetRuleContext<MoveactionContext>(0);
		}
		public CopyactionContext copyaction() {
			return GetRuleContext<CopyactionContext>(0);
		}
		public IncactionContext incaction() {
			return GetRuleContext<IncactionContext>(0);
		}
		public DecactionContext decaction() {
			return GetRuleContext<DecactionContext>(0);
		}
		public RemoveactionContext removeaction() {
			return GetRuleContext<RemoveactionContext>(0);
		}
		public TurnactionContext turnaction() {
			return GetRuleContext<TurnactionContext>(0);
		}
		public ShuffleactionContext shuffleaction() {
			return GetRuleContext<ShuffleactionContext>(0);
		}
		public RepeatContext repeat() {
			return GetRuleContext<RepeatContext>(0);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 10, RULE_action);
		try {
			State = 215;
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 196; Match(OPEN);
				State = 210;
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 197; initpoints();
					}
					break;
				case 2:
					{
					State = 198; teamcreate();
					}
					break;
				case 3:
					{
					State = 199; deckcreate();
					}
					break;
				case 4:
					{
					State = 200; cycleaction();
					}
					break;
				case 5:
					{
					State = 201; setaction();
					}
					break;
				case 6:
					{
					State = 202; moveaction();
					}
					break;
				case 7:
					{
					State = 203; copyaction();
					}
					break;
				case 8:
					{
					State = 204; incaction();
					}
					break;
				case 9:
					{
					State = 205; decaction();
					}
					break;
				case 10:
					{
					State = 206; removeaction();
					}
					break;
				case 11:
					{
					State = 207; turnaction();
					}
					break;
				case 12:
					{
					State = 208; shuffleaction();
					}
					break;
				case 13:
					{
					State = 209; repeat();
					}
					break;
				}
				State = 212; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 214; agg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiactionContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public CondactContext[] condact() {
			return GetRuleContexts<CondactContext>();
		}
		public CondactContext condact(int i) {
			return GetRuleContext<CondactContext>(i);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public MultiactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMultiaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMultiaction(this);
		}
	}

	[RuleVersion(0)]
	public MultiactionContext multiaction() {
		MultiactionContext _localctx = new MultiactionContext(Context, State);
		EnterRule(_localctx, 12, RULE_multiaction);
		try {
			int _alt;
			State = 241;
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 217; Match(OPEN);
				State = 218; Match(T__9);
				State = 219; Match(OPEN);
				State = 221;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 220; condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 223;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 225; Match(CLOSE);
				State = 226; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 228; Match(OPEN);
				State = 229; Match(T__10);
				State = 230; Match(OPEN);
				State = 232;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 231; condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 234;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 236; Match(CLOSE);
				State = 237; Match(CLOSE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 239; agg();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 240; let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondactContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public MultiactionContext multiaction() {
			return GetRuleContext<MultiactionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public CondactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condact; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCondact(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCondact(this);
		}
	}

	[RuleVersion(0)]
	public CondactContext condact() {
		CondactContext _localctx = new CondactContext(Context, State);
		EnterRule(_localctx, 14, RULE_condact);
		try {
			State = 255;
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 243; Match(OPEN);
				State = 244; boolean();
				State = 245; multiaction();
				State = 246; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 248; multiaction();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 249; Match(OPEN);
				State = 250; boolean();
				State = 251; action();
				State = 252; Match(CLOSE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 254; action();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultiactionContext multiaction() {
			return GetRuleContext<MultiactionContext>(0);
		}
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public CondactContext condact() {
			return GetRuleContext<CondactContext>(0);
		}
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public AggContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAgg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAgg(this);
		}
	}

	[RuleVersion(0)]
	public AggContext agg() {
		AggContext _localctx = new AggContext(Context, State);
		EnterRule(_localctx, 16, RULE_agg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; Match(OPEN);
			State = 258;
			_la = TokenStream.La(1);
			if ( !(_la==T__11 || _la==T__12) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 259; collection();
			State = 260; var();
			State = 267;
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 261; multiaction();
				}
				break;
			case 2:
				{
				State = 262; action();
				}
				break;
			case 3:
				{
				State = 263; boolean();
				}
				break;
			case 4:
				{
				State = 264; cstorage();
				}
				break;
			case 5:
				{
				State = 265; condact();
				}
				break;
			case 6:
				{
				State = 266; rawstorage();
				}
				break;
			}
			State = 269; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public TypedContext typed() {
			return GetRuleContext<TypedContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultiactionContext multiaction() {
			return GetRuleContext<MultiactionContext>(0);
		}
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public CondactContext condact() {
			return GetRuleContext<CondactContext>(0);
		}
		public LetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLet(this);
		}
	}

	[RuleVersion(0)]
	public LetContext let() {
		LetContext _localctx = new LetContext(Context, State);
		EnterRule(_localctx, 18, RULE_let);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271; Match(OPEN);
			State = 272; Match(T__13);
			State = 273; typed();
			State = 274; var();
			State = 278;
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 275; multiaction();
				}
				break;
			case 2:
				{
				State = 276; action();
				}
				break;
			case 3:
				{
				State = 277; condact();
				}
				break;
			}
			State = 280; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public TypedContext typed() {
			return GetRuleContext<TypedContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeclare(this);
		}
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(Context, State);
		EnterRule(_localctx, 20, RULE_declare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282; Match(OPEN);
			State = 283; Match(T__14);
			State = 284; typed();
			State = 285; var();
			State = 286; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayercreateContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public PlayercreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playercreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterPlayercreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitPlayercreate(this);
		}
	}

	[RuleVersion(0)]
	public PlayercreateContext playercreate() {
		PlayercreateContext _localctx = new PlayercreateContext(Context, State);
		EnterRule(_localctx, 22, RULE_playercreate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288; Match(OPEN);
			State = 289; Match(T__15);
			State = 290; Match(T__16);
			State = 293;
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 291; @int();
				}
				break;
			case 2:
				{
				State = 292; var();
				}
				break;
			}
			State = 295; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamcreateContext : ParserRuleContext {
		public TeamsContext[] teams() {
			return GetRuleContexts<TeamsContext>();
		}
		public TeamsContext teams(int i) {
			return GetRuleContext<TeamsContext>(i);
		}
		public TeamcreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamcreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeamcreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeamcreate(this);
		}
	}

	[RuleVersion(0)]
	public TeamcreateContext teamcreate() {
		TeamcreateContext _localctx = new TeamcreateContext(Context, State);
		EnterRule(_localctx, 24, RULE_teamcreate);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 297; Match(T__15);
			State = 298; Match(T__17);
			State = 300;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 299; teams();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 302;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckcreateContext : ParserRuleContext {
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public DeckContext deck() {
			return GetRuleContext<DeckContext>(0);
		}
		public RepeatContext repeat() {
			return GetRuleContext<RepeatContext>(0);
		}
		public DeckcreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deckcreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeckcreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeckcreate(this);
		}
	}

	[RuleVersion(0)]
	public DeckcreateContext deckcreate() {
		DeckcreateContext _localctx = new DeckcreateContext(Context, State);
		EnterRule(_localctx, 26, RULE_deckcreate);
		try {
			State = 310;
			switch (TokenStream.La(1)) {
			case T__15:
				EnterOuterAlt(_localctx, 1);
				{
				State = 304; Match(T__15);
				State = 305; Match(T__18);
				State = 306; cstorage();
				State = 307; deck();
				}
				break;
			case T__35:
				EnterOuterAlt(_localctx, 2);
				{
				State = 309; repeat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public DeckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deck; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeck(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeck(this);
		}
	}

	[RuleVersion(0)]
	public DeckContext deck() {
		DeckContext _localctx = new DeckContext(Context, State);
		EnterRule(_localctx, 28, RULE_deck);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 312; Match(OPEN);
			State = 313; Match(T__18);
			State = 315;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 314; attribute();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 317;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 319; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamsContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode[] INTNUM() { return GetTokens(RecycleParser.INTNUM); }
		public ITerminalNode INTNUM(int i) {
			return GetToken(RecycleParser.INTNUM, i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TeamsContext[] teams() {
			return GetRuleContexts<TeamsContext>();
		}
		public TeamsContext teams(int i) {
			return GetRuleContext<TeamsContext>(i);
		}
		public TeamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teams; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeams(this);
		}
	}

	[RuleVersion(0)]
	public TeamsContext teams() {
		TeamsContext _localctx = new TeamsContext(Context, State);
		EnterRule(_localctx, 30, RULE_teams);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 321; Match(OPEN);
			State = 326;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 322; Match(INTNUM);
					State = 323; Match(T__19);
					}
					} 
				}
				State = 328;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			State = 329; Match(INTNUM);
			State = 333;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 330; teams();
					}
					} 
				}
				State = 335;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			State = 336; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 32, RULE_attribute);
		try {
			int _alt;
			State = 357;
			switch (TokenStream.La(1)) {
			case T__42:
				EnterOuterAlt(_localctx, 1);
				{
				State = 338; var();
				}
				break;
			case OPEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 339; Match(OPEN);
				State = 345;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 340; namegr();
						State = 341; Match(T__19);
						}
						} 
					}
					State = 347;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
				}
				State = 348; namegr();
				State = 352;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 349; attribute();
						}
						} 
					}
					State = 354;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
				}
				State = 355; Match(CLOSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitpointsContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AwardsContext[] awards() {
			return GetRuleContexts<AwardsContext>();
		}
		public AwardsContext awards(int i) {
			return GetRuleContext<AwardsContext>(i);
		}
		public InitpointsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initpoints; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterInitpoints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitInitpoints(this);
		}
	}

	[RuleVersion(0)]
	public InitpointsContext initpoints() {
		InitpointsContext _localctx = new InitpointsContext(Context, State);
		EnterRule(_localctx, 34, RULE_initpoints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 359; Match(T__20);
			State = 360; Match(T__21);
			State = 361; var();
			State = 362; Match(OPEN);
			State = 364;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 363; awards();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 366;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 368; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwardsContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubawardContext[] subaward() {
			return GetRuleContexts<SubawardContext>();
		}
		public SubawardContext subaward(int i) {
			return GetRuleContext<SubawardContext>(i);
		}
		public AwardsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awards; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAwards(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAwards(this);
		}
	}

	[RuleVersion(0)]
	public AwardsContext awards() {
		AwardsContext _localctx = new AwardsContext(Context, State);
		EnterRule(_localctx, 36, RULE_awards);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 370; Match(OPEN);
			State = 372;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 371; subaward();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 374;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 376; @int();
			State = 377; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubawardContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public CardattContext cardatt() {
			return GetRuleContext<CardattContext>(0);
		}
		public SubawardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subaward; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSubaward(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSubaward(this);
		}
	}

	[RuleVersion(0)]
	public SubawardContext subaward() {
		SubawardContext _localctx = new SubawardContext(Context, State);
		EnterRule(_localctx, 38, RULE_subaward);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379; Match(OPEN);
			State = 380; namegr();
			State = 386;
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				{
				State = 381; Match(OPEN);
				State = 382; namegr();
				State = 383; Match(CLOSE);
				}
				}
				break;
			case 2:
				{
				{
				State = 385; cardatt();
				}
				}
				break;
			}
			State = 388; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CycleactionContext : ParserRuleContext {
		public OwnerContext owner() {
			return GetRuleContext<OwnerContext>(0);
		}
		public CycleactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cycleaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCycleaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCycleaction(this);
		}
	}

	[RuleVersion(0)]
	public CycleactionContext cycleaction() {
		CycleactionContext _localctx = new CycleactionContext(Context, State);
		EnterRule(_localctx, 40, RULE_cycleaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390; Match(T__22);
			State = 391;
			_la = TokenStream.La(1);
			if ( !(_la==T__23 || _la==T__24) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 396;
			switch (TokenStream.La(1)) {
			case OPEN:
				{
				State = 392; owner();
				}
				break;
			case T__24:
				{
				State = 393; Match(T__24);
				}
				break;
			case T__23:
				{
				State = 394; Match(T__23);
				}
				break;
			case T__25:
				{
				State = 395; Match(T__25);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public SetactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSetaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSetaction(this);
		}
	}

	[RuleVersion(0)]
	public SetactionContext setaction() {
		SetactionContext _localctx = new SetactionContext(Context, State);
		EnterRule(_localctx, 42, RULE_setaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398; Match(T__26);
			State = 399; rawstorage();
			State = 400; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public IncactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterIncaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitIncaction(this);
		}
	}

	[RuleVersion(0)]
	public IncactionContext incaction() {
		IncactionContext _localctx = new IncactionContext(Context, State);
		EnterRule(_localctx, 44, RULE_incaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402; Match(T__27);
			State = 403; rawstorage();
			State = 404; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public DecactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDecaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDecaction(this);
		}
	}

	[RuleVersion(0)]
	public DecactionContext decaction() {
		DecactionContext _localctx = new DecactionContext(Context, State);
		EnterRule(_localctx, 46, RULE_decaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406; Match(T__28);
			State = 407; rawstorage();
			State = 408; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveactionContext : ParserRuleContext {
		public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public MoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMoveaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMoveaction(this);
		}
	}

	[RuleVersion(0)]
	public MoveactionContext moveaction() {
		MoveactionContext _localctx = new MoveactionContext(Context, State);
		EnterRule(_localctx, 48, RULE_moveaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410; Match(T__29);
			State = 411; card();
			State = 412; card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyactionContext : ParserRuleContext {
		public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public CopyactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCopyaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCopyaction(this);
		}
	}

	[RuleVersion(0)]
	public CopyactionContext copyaction() {
		CopyactionContext _localctx = new CopyactionContext(Context, State);
		EnterRule(_localctx, 50, RULE_copyaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414; Match(T__30);
			State = 415; card();
			State = 416; card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveactionContext : ParserRuleContext {
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public RemoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRemoveaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRemoveaction(this);
		}
	}

	[RuleVersion(0)]
	public RemoveactionContext removeaction() {
		RemoveactionContext _localctx = new RemoveactionContext(Context, State);
		EnterRule(_localctx, 52, RULE_removeaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418; Match(T__31);
			State = 419; card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShuffleactionContext : ParserRuleContext {
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public ShuffleactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shuffleaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterShuffleaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitShuffleaction(this);
		}
	}

	[RuleVersion(0)]
	public ShuffleactionContext shuffleaction() {
		ShuffleactionContext _localctx = new ShuffleactionContext(Context, State);
		EnterRule(_localctx, 54, RULE_shuffleaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421; Match(T__32);
			State = 422; cstorage();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TurnactionContext : ParserRuleContext {
		public TurnactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_turnaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTurnaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTurnaction(this);
		}
	}

	[RuleVersion(0)]
	public TurnactionContext turnaction() {
		TurnactionContext _localctx = new TurnactionContext(Context, State);
		EnterRule(_localctx, 56, RULE_turnaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424; Match(T__33);
			State = 425; Match(T__34);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatContext : ParserRuleContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public RepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRepeat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRepeat(this);
		}
	}

	[RuleVersion(0)]
	public RepeatContext repeat() {
		RepeatContext _localctx = new RepeatContext(Context, State);
		EnterRule(_localctx, 58, RULE_repeat);
		try {
			State = 434;
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 427; Match(T__35);
				State = 428; @int();
				State = 429; action();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 431; Match(T__35);
				State = 432; Match(T__12);
				State = 433; action();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardContext : ParserRuleContext {
		public MaxofContext maxof() {
			return GetRuleContext<MaxofContext>(0);
		}
		public MinofContext minof() {
			return GetRuleContext<MinofContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ActualContext actual() {
			return GetRuleContext<ActualContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_card; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCard(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCard(this);
		}
	}

	[RuleVersion(0)]
	public CardContext card() {
		CardContext _localctx = new CardContext(Context, State);
		EnterRule(_localctx, 60, RULE_card);
		try {
			State = 449;
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 436; maxof();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 437; minof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 438; var();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 439; actual();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				{
				State = 440; Match(OPEN);
				State = 444;
				switch (TokenStream.La(1)) {
				case T__36:
					{
					State = 441; Match(T__36);
					}
					break;
				case T__37:
					{
					State = 442; Match(T__37);
					}
					break;
				case T__42:
				case INTNUM:
				case OPEN:
					{
					State = 443; @int();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 446; cstorage();
				State = 447; Match(CLOSE);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ActualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actual; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterActual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitActual(this);
		}
	}

	[RuleVersion(0)]
	public ActualContext actual() {
		ActualContext _localctx = new ActualContext(Context, State);
		EnterRule(_localctx, 62, RULE_actual);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451; Match(OPEN);
			State = 452; Match(T__38);
			State = 453; card();
			State = 454; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RawstorageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public VarContext[] var() {
			return GetRuleContexts<VarContext>();
		}
		public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public RawstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rawstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRawstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRawstorage(this);
		}
	}

	[RuleVersion(0)]
	public RawstorageContext rawstorage() {
		RawstorageContext _localctx = new RawstorageContext(Context, State);
		EnterRule(_localctx, 64, RULE_rawstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456; Match(OPEN);
			State = 460;
			switch (TokenStream.La(1)) {
			case T__0:
				{
				State = 457; Match(T__0);
				}
				break;
			case OPEN:
				{
				State = 458; who();
				}
				break;
			case T__42:
				{
				State = 459; var();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 462; Match(T__39);
			State = 465;
			switch (TokenStream.La(1)) {
			case LETT:
				{
				State = 463; namegr();
				}
				break;
			case T__42:
				{
				State = 464; var();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 467; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CstorageContext : ParserRuleContext {
		public UnionofContext unionof() {
			return GetRuleContext<UnionofContext>(0);
		}
		public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public LocpreContext locpre() {
			return GetRuleContext<LocpreContext>(0);
		}
		public LocdescContext locdesc() {
			return GetRuleContext<LocdescContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public MemstorageContext memstorage() {
			return GetRuleContext<MemstorageContext>(0);
		}
		public CstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCstorage(this);
		}
	}

	[RuleVersion(0)]
	public CstorageContext cstorage() {
		CstorageContext _localctx = new CstorageContext(Context, State);
		EnterRule(_localctx, 66, RULE_cstorage);
		try {
			State = 482;
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 469; unionof();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 470; filter();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 471; Match(OPEN);
				State = 472; locpre();
				State = 473; locdesc();
				State = 476;
				switch (TokenStream.La(1)) {
				case LETT:
					{
					State = 474; namegr();
					}
					break;
				case T__42:
					{
					State = 475; var();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 478; Match(CLOSE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 480; memstorage();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 481; var();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemstorageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public MemstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMemstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMemstorage(this);
		}
	}

	[RuleVersion(0)]
	public MemstorageContext memstorage() {
		MemstorageContext _localctx = new MemstorageContext(Context, State);
		EnterRule(_localctx, 68, RULE_memstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484; Match(OPEN);
			State = 488;
			switch (TokenStream.La(1)) {
			case T__36:
				{
				State = 485; Match(T__36);
				}
				break;
			case T__37:
				{
				State = 486; Match(T__37);
				}
				break;
			case T__42:
			case INTNUM:
			case OPEN:
				{
				State = 487; @int();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 490; memset();
			State = 491; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemsetContext : ParserRuleContext {
		public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		public MemsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memset; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMemset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMemset(this);
		}
	}

	[RuleVersion(0)]
	public MemsetContext memset() {
		MemsetContext _localctx = new MemsetContext(Context, State);
		EnterRule(_localctx, 70, RULE_memset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493; tuple();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 72, RULE_tuple);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495; Match(OPEN);
			State = 496; Match(T__40);
			State = 497; @int();
			State = 498; cstorage();
			State = 499; Match(T__41);
			State = 500; var();
			State = 501; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 74, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503; Match(T__42);
			State = 504; namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocpreContext : ParserRuleContext {
		public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public LocpreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locpre; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLocpre(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLocpre(this);
		}
	}

	[RuleVersion(0)]
	public LocpreContext locpre() {
		LocpreContext _localctx = new LocpreContext(Context, State);
		EnterRule(_localctx, 76, RULE_locpre);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 509;
			switch (TokenStream.La(1)) {
			case T__0:
				{
				State = 506; Match(T__0);
				}
				break;
			case OPEN:
				{
				State = 507; whop();
				}
				break;
			case T__42:
				{
				State = 508; var();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocdescContext : ParserRuleContext {
		public LocdescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locdesc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLocdesc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLocdesc(this);
		}
	}

	[RuleVersion(0)]
	public LocdescContext locdesc() {
		LocdescContext _localctx = new LocdescContext(Context, State);
		EnterRule(_localctx, 78, RULE_locdesc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhoContext : ParserRuleContext {
		public WhotContext whot() {
			return GetRuleContext<WhotContext>(0);
		}
		public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public WhoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_who; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWho(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWho(this);
		}
	}

	[RuleVersion(0)]
	public WhoContext who() {
		WhoContext _localctx = new WhoContext(Context, State);
		EnterRule(_localctx, 80, RULE_who);
		try {
			State = 515;
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 513; whot();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 514; whop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhopContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public WhodescContext whodesc() {
			return GetRuleContext<WhodescContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OwnerContext owner() {
			return GetRuleContext<OwnerContext>(0);
		}
		public WhopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhop(this);
		}
	}

	[RuleVersion(0)]
	public WhopContext whop() {
		WhopContext _localctx = new WhopContext(Context, State);
		EnterRule(_localctx, 82, RULE_whop);
		try {
			State = 523;
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 517; Match(OPEN);
				State = 518; whodesc();
				State = 519; Match(T__3);
				State = 520; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 522; owner();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhotContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public WhodescContext whodesc() {
			return GetRuleContext<WhodescContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TeampContext teamp() {
			return GetRuleContext<TeampContext>(0);
		}
		public WhotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whot; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhot(this);
		}
	}

	[RuleVersion(0)]
	public WhotContext whot() {
		WhotContext _localctx = new WhotContext(Context, State);
		EnterRule(_localctx, 84, RULE_whot);
		try {
			State = 531;
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 525; Match(OPEN);
				State = 526; whodesc();
				State = 527; Match(T__4);
				State = 528; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 530; teamp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhodescContext : ParserRuleContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public WhodescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whodesc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhodesc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhodesc(this);
		}
	}

	[RuleVersion(0)]
	public WhodescContext whodesc() {
		WhodescContext _localctx = new WhodescContext(Context, State);
		EnterRule(_localctx, 86, RULE_whodesc);
		try {
			State = 537;
			switch (TokenStream.La(1)) {
			case T__42:
			case INTNUM:
			case OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 533; @int();
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 2);
				{
				State = 534; Match(T__25);
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 3);
				{
				State = 535; Match(T__23);
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 4);
				{
				State = 536; Match(T__24);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OwnerContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OwnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_owner; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterOwner(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitOwner(this);
		}
	}

	[RuleVersion(0)]
	public OwnerContext owner() {
		OwnerContext _localctx = new OwnerContext(Context, State);
		EnterRule(_localctx, 88, RULE_owner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 539; Match(OPEN);
			State = 540; Match(T__47);
			State = 541; card();
			State = 542; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeampContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TeampContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeamp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeamp(this);
		}
	}

	[RuleVersion(0)]
	public TeampContext teamp() {
		TeampContext _localctx = new TeampContext(Context, State);
		EnterRule(_localctx, 90, RULE_teamp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544; Match(OPEN);
			State = 545; Match(T__4);
			State = 546; whop();
			State = 547; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OtherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterOther(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitOther(this);
		}
	}

	[RuleVersion(0)]
	public OtherContext other() {
		OtherContext _localctx = new OtherContext(Context, State);
		EnterRule(_localctx, 92, RULE_other);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549; Match(OPEN);
			State = 550; Match(T__48);
			State = 551;
			_la = TokenStream.La(1);
			if ( !(_la==T__3 || _la==T__4) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 552; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedContext : ParserRuleContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public TypedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTyped(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTyped(this);
		}
	}

	[RuleVersion(0)]
	public TypedContext typed() {
		TypedContext _localctx = new TypedContext(Context, State);
		EnterRule(_localctx, 94, RULE_typed);
		try {
			State = 559;
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 554; @int();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 555; boolean();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 556; namegr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 557; var();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 558; collection();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionContext : ParserRuleContext {
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public StrcollectionContext strcollection() {
			return GetRuleContext<StrcollectionContext>(0);
		}
		public CstoragecollectionContext cstoragecollection() {
			return GetRuleContext<CstoragecollectionContext>(0);
		}
		public WhotContext whot() {
			return GetRuleContext<WhotContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public OtherContext other() {
			return GetRuleContext<OtherContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		public CollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCollection(this);
		}
	}

	[RuleVersion(0)]
	public CollectionContext collection() {
		CollectionContext _localctx = new CollectionContext(Context, State);
		EnterRule(_localctx, 96, RULE_collection);
		try {
			State = 571;
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 561; cstorage();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 562; strcollection();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 563; cstoragecollection();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 564; Match(T__3);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 565; Match(T__4);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 566; whot();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 567; var();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 568; other();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 569; range();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 570; filter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrcollectionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public StrcollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strcollection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterStrcollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitStrcollection(this);
		}
	}

	[RuleVersion(0)]
	public StrcollectionContext strcollection() {
		StrcollectionContext _localctx = new StrcollectionContext(Context, State);
		EnterRule(_localctx, 98, RULE_strcollection);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 573; Match(OPEN);
			State = 579;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 574; namegr();
					State = 575; Match(T__19);
					}
					} 
				}
				State = 581;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			State = 582; namegr();
			State = 583; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CstoragecollectionContext : ParserRuleContext {
		public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public CstoragecollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cstoragecollection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCstoragecollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCstoragecollection(this);
		}
	}

	[RuleVersion(0)]
	public CstoragecollectionContext cstoragecollection() {
		CstoragecollectionContext _localctx = new CstoragecollectionContext(Context, State);
		EnterRule(_localctx, 100, RULE_cstoragecollection);
		try {
			State = 588;
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 585; memset();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 586; agg();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 587; let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 102, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 590; Match(OPEN);
			State = 591; Match(T__49);
			State = 592; @int();
			State = 593; Match(T__50);
			State = 594; @int();
			State = 595; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterFilter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitFilter(this);
		}
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(Context, State);
		EnterRule(_localctx, 104, RULE_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 597; Match(OPEN);
			State = 598; Match(T__51);
			State = 599; collection();
			State = 600; var();
			State = 601; boolean();
			State = 602; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrcompContext : ParserRuleContext {
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public CardattContext[] cardatt() {
			return GetRuleContexts<CardattContext>();
		}
		public CardattContext cardatt(int i) {
			return GetRuleContext<CardattContext>(i);
		}
		public AttrcompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrcomp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAttrcomp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAttrcomp(this);
		}
	}

	[RuleVersion(0)]
	public AttrcompContext attrcomp() {
		AttrcompContext _localctx = new AttrcompContext(Context, State);
		EnterRule(_localctx, 106, RULE_attrcomp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 604; Match(EQOP);
			State = 605; cardatt();
			State = 606; cardatt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardattContext : ParserRuleContext {
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public CardattContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cardatt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCardatt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCardatt(this);
		}
	}

	[RuleVersion(0)]
	public CardattContext cardatt() {
		CardattContext _localctx = new CardattContext(Context, State);
		EnterRule(_localctx, 108, RULE_cardatt);
		try {
			State = 619;
			switch (TokenStream.La(1)) {
			case LETT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 608; namegr();
				}
				break;
			case T__42:
				EnterOuterAlt(_localctx, 2);
				{
				State = 609; var();
				}
				break;
			case OPEN:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 610; Match(OPEN);
				State = 611; Match(T__52);
				State = 614;
				switch (TokenStream.La(1)) {
				case T__42:
					{
					State = 612; var();
					}
					break;
				case LETT:
					{
					State = 613; namegr();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 616; card();
				State = 617; Match(CLOSE);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AttrcompContext attrcomp() {
			return GetRuleContext<AttrcompContext>(0);
		}
		public ITerminalNode BOOLOP() { return GetToken(RecycleParser.BOOLOP, 0); }
		public BooleanContext[] boolean() {
			return GetRuleContexts<BooleanContext>();
		}
		public BooleanContext boolean(int i) {
			return GetRuleContext<BooleanContext>(i);
		}
		public IntopContext intop() {
			return GetRuleContext<IntopContext>(0);
		}
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public ITerminalNode UNOP() { return GetToken(RecycleParser.UNOP, 0); }
		public WhopContext[] whop() {
			return GetRuleContexts<WhopContext>();
		}
		public WhopContext whop(int i) {
			return GetRuleContext<WhopContext>(i);
		}
		public WhotContext[] whot() {
			return GetRuleContexts<WhotContext>();
		}
		public WhotContext whot(int i) {
			return GetRuleContext<WhotContext>(i);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 110, RULE_boolean);
		try {
			int _alt;
			State = 653;
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 621; Match(OPEN);
				State = 648;
				switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
				case 1:
					{
					{
					State = 622; Match(BOOLOP);
					State = 623; boolean();
					State = 625;
					ErrorHandler.Sync(this);
					_alt = 1+1;
					do {
						switch (_alt) {
						case 1+1:
							{
							{
							State = 624; boolean();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 627;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
					} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					}
					break;
				case 2:
					{
					{
					State = 629; intop();
					State = 630; @int();
					State = 631; @int();
					}
					}
					break;
				case 3:
					{
					State = 633; attrcomp();
					}
					break;
				case 4:
					{
					{
					State = 634; Match(EQOP);
					State = 635; card();
					State = 636; card();
					}
					}
					break;
				case 5:
					{
					{
					State = 638; Match(UNOP);
					State = 639; boolean();
					}
					}
					break;
				case 6:
					{
					{
					State = 640; Match(EQOP);
					State = 641; whop();
					State = 642; whop();
					}
					}
					break;
				case 7:
					{
					{
					State = 644; Match(EQOP);
					State = 645; whot();
					State = 646; whot();
					}
					}
					break;
				}
				State = 650; Match(CLOSE);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 652; agg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntopContext : ParserRuleContext {
		public ITerminalNode COMPOP() { return GetToken(RecycleParser.COMPOP, 0); }
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public IntopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterIntop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitIntop(this);
		}
	}

	[RuleVersion(0)]
	public IntopContext intop() {
		IntopContext _localctx = new IntopContext(Context, State);
		EnterRule(_localctx, 112, RULE_intop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 655;
			_la = TokenStream.La(1);
			if ( !(_la==COMPOP || _la==EQOP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
	}

	[RuleVersion(0)]
	public AddContext add() {
		AddContext _localctx = new AddContext(Context, State);
		EnterRule(_localctx, 114, RULE_add);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 657; Match(OPEN);
			State = 658; Match(T__53);
			State = 659; @int();
			State = 660; @int();
			State = 661; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMult(this);
		}
	}

	[RuleVersion(0)]
	public MultContext mult() {
		MultContext _localctx = new MultContext(Context, State);
		EnterRule(_localctx, 116, RULE_mult);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 663; Match(OPEN);
			State = 664; Match(T__54);
			State = 665; @int();
			State = 666; @int();
			State = 667; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtractContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubtractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtract; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSubtract(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSubtract(this);
		}
	}

	[RuleVersion(0)]
	public SubtractContext subtract() {
		SubtractContext _localctx = new SubtractContext(Context, State);
		EnterRule(_localctx, 118, RULE_subtract);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 669; Match(OPEN);
			State = 670; Match(T__55);
			State = 671; @int();
			State = 672; @int();
			State = 673; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMod(this);
		}
	}

	[RuleVersion(0)]
	public ModContext mod() {
		ModContext _localctx = new ModContext(Context, State);
		EnterRule(_localctx, 120, RULE_mod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 675; Match(OPEN);
			State = 676; Match(T__56);
			State = 677; @int();
			State = 678; @int();
			State = 679; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivideContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divide; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDivide(this);
		}
	}

	[RuleVersion(0)]
	public DivideContext divide() {
		DivideContext _localctx = new DivideContext(Context, State);
		EnterRule(_localctx, 122, RULE_divide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681; Match(OPEN);
			State = 682; Match(T__57);
			State = 683; @int();
			State = 684; @int();
			State = 685; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public SizeofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSizeof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSizeof(this);
		}
	}

	[RuleVersion(0)]
	public SizeofContext @sizeof() {
		SizeofContext _localctx = new SizeofContext(Context, State);
		EnterRule(_localctx, 124, RULE_sizeof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 687; Match(OPEN);
			State = 688; Match(T__58);
			State = 692;
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 689; cstorage();
				}
				break;
			case 2:
				{
				State = 690; memset();
				}
				break;
			case 3:
				{
				State = 691; var();
				}
				break;
			}
			State = 694; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaxofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MaxofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMaxof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMaxof(this);
		}
	}

	[RuleVersion(0)]
	public MaxofContext maxof() {
		MaxofContext _localctx = new MaxofContext(Context, State);
		EnterRule(_localctx, 126, RULE_maxof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 696; Match(OPEN);
			State = 697; Match(T__7);
			State = 698; cstorage();
			State = 699; Match(T__41);
			State = 700; var();
			State = 701; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MinofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMinof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMinof(this);
		}
	}

	[RuleVersion(0)]
	public MinofContext minof() {
		MinofContext _localctx = new MinofContext(Context, State);
		EnterRule(_localctx, 128, RULE_minof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 703; Match(OPEN);
			State = 704; Match(T__6);
			State = 705; cstorage();
			State = 706; Match(T__41);
			State = 707; var();
			State = 708; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public CstorageContext[] cstorage() {
			return GetRuleContexts<CstorageContext>();
		}
		public CstorageContext cstorage(int i) {
			return GetRuleContext<CstorageContext>(i);
		}
		public UnionofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterUnionof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitUnionof(this);
		}
	}

	[RuleVersion(0)]
	public UnionofContext unionof() {
		UnionofContext _localctx = new UnionofContext(Context, State);
		EnterRule(_localctx, 130, RULE_unionof);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 710; Match(OPEN);
			State = 711; Match(T__59);
			State = 718;
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 713;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 712; cstorage();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 715;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			case 2:
				{
				State = 717; agg();
				}
				break;
			}
			State = 720; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSum(this);
		}
	}

	[RuleVersion(0)]
	public SumContext sum() {
		SumContext _localctx = new SumContext(Context, State);
		EnterRule(_localctx, 132, RULE_sum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 722; Match(OPEN);
			State = 723; Match(T__60);
			State = 724; cstorage();
			State = 725; Match(T__41);
			State = 726; var();
			State = 727; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoreContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ScoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_score; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterScore(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitScore(this);
		}
	}

	[RuleVersion(0)]
	public ScoreContext score() {
		ScoreContext _localctx = new ScoreContext(Context, State);
		EnterRule(_localctx, 134, RULE_score);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 729; Match(OPEN);
			State = 730; Match(T__61);
			State = 731; card();
			State = 732; Match(T__41);
			State = 733; var();
			State = 734; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		public SizeofContext @sizeof() {
			return GetRuleContext<SizeofContext>(0);
		}
		public MultContext mult() {
			return GetRuleContext<MultContext>(0);
		}
		public SubtractContext subtract() {
			return GetRuleContext<SubtractContext>(0);
		}
		public ModContext mod() {
			return GetRuleContext<ModContext>(0);
		}
		public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public ScoreContext score() {
			return GetRuleContext<ScoreContext>(0);
		}
		public ITerminalNode[] INTNUM() { return GetTokens(RecycleParser.INTNUM); }
		public ITerminalNode INTNUM(int i) {
			return GetToken(RecycleParser.INTNUM, i);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 136, RULE_int);
		try {
			int _alt;
			State = 751;
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 736; @sizeof();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 737; mult();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 738; subtract();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 739; mod();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 740; add();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 741; divide();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 742; sum();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 743; rawstorage();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 744; score();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 746;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 745; Match(INTNUM);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 748;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 750; var();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamegrContext : ParserRuleContext {
		public ITerminalNode[] LETT() { return GetTokens(RecycleParser.LETT); }
		public ITerminalNode LETT(int i) {
			return GetToken(RecycleParser.LETT, i);
		}
		public NamegrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namegr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterNamegr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitNamegr(this);
		}
	}

	[RuleVersion(0)]
	public NamegrContext namegr() {
		NamegrContext _localctx = new NamegrContext(Context, State);
		EnterRule(_localctx, 138, RULE_namegr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 754;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 753; Match(LETT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 756;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3J\x2F9\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x3\x2\x3\x2\x3\x2\a\x2\x92\n\x2\f\x2\xE\x2\x95\v"+
		"\x2\x3\x2\x3\x2\x3\x2\x6\x2\x9A\n\x2\r\x2\xE\x2\x9B\x3\x2\x3\x2\x3\x2"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x6\x3\xAB"+
		"\n\x3\r\x3\xE\x3\xAC\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x6"+
		"\x4\xB7\n\x4\r\x4\xE\x4\xB8\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\xD5\n\a\x3\a\x3\a\x3\a\x5\a\xDA\n"+
		"\a\x3\b\x3\b\x3\b\x3\b\x6\b\xE0\n\b\r\b\xE\b\xE1\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x6\b\xEB\n\b\r\b\xE\b\xEC\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\xF4"+
		"\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t"+
		"\x102\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x10E"+
		"\n\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\x119\n\v\x3\v\x3"+
		"\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\x128\n"+
		"\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x6\xE\x12F\n\xE\r\xE\xE\xE\x130\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x139\n\xF\x3\x10\x3\x10\x3\x10\x6\x10"+
		"\x13E\n\x10\r\x10\xE\x10\x13F\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\a\x11"+
		"\x147\n\x11\f\x11\xE\x11\x14A\v\x11\x3\x11\x3\x11\a\x11\x14E\n\x11\f\x11"+
		"\xE\x11\x151\v\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\a"+
		"\x12\x15A\n\x12\f\x12\xE\x12\x15D\v\x12\x3\x12\x3\x12\a\x12\x161\n\x12"+
		"\f\x12\xE\x12\x164\v\x12\x3\x12\x3\x12\x5\x12\x168\n\x12\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x3\x13\x6\x13\x16F\n\x13\r\x13\xE\x13\x170\x3\x13\x3\x13"+
		"\x3\x14\x3\x14\x6\x14\x177\n\x14\r\x14\xE\x14\x178\x3\x14\x3\x14\x3\x14"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x185\n\x15\x3"+
		"\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x18F\n\x16"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19"+
		"\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x1B5\n\x1F\x3 \x3 \x3"+
		" \x3 \x3 \x3 \x3 \x3 \x5 \x1BF\n \x3 \x3 \x3 \x5 \x1C4\n \x3!\x3!\x3!"+
		"\x3!\x3!\x3\"\x3\"\x3\"\x3\"\x5\"\x1CF\n\"\x3\"\x3\"\x3\"\x5\"\x1D4\n"+
		"\"\x3\"\x3\"\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x5#\x1DF\n#\x3#\x3#\x3#\x3#\x5"+
		"#\x1E5\n#\x3$\x3$\x3$\x3$\x5$\x1EB\n$\x3$\x3$\x3$\x3%\x3%\x3&\x3&\x3&"+
		"\x3&\x3&\x3&\x3&\x3&\x3\'\x3\'\x3\'\x3(\x3(\x3(\x5(\x200\n(\x3)\x3)\x3"+
		"*\x3*\x5*\x206\n*\x3+\x3+\x3+\x3+\x3+\x3+\x5+\x20E\n+\x3,\x3,\x3,\x3,"+
		"\x3,\x3,\x5,\x216\n,\x3-\x3-\x3-\x3-\x5-\x21C\n-\x3.\x3.\x3.\x3.\x3.\x3"+
		"/\x3/\x3/\x3/\x3/\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x31\x3\x31\x3"+
		"\x31\x3\x31\x3\x31\x5\x31\x232\n\x31\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32"+
		"\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32\x23E\n\x32\x3\x33\x3\x33\x3"+
		"\x33\x3\x33\a\x33\x244\n\x33\f\x33\xE\x33\x247\v\x33\x3\x33\x3\x33\x3"+
		"\x33\x3\x34\x3\x34\x3\x34\x5\x34\x24F\n\x34\x3\x35\x3\x35\x3\x35\x3\x35"+
		"\x3\x35\x3\x35\x3\x35\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36"+
		"\x3\x37\x3\x37\x3\x37\x3\x37\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38"+
		"\x5\x38\x269\n\x38\x3\x38\x3\x38\x3\x38\x5\x38\x26E\n\x38\x3\x39\x3\x39"+
		"\x3\x39\x3\x39\x6\x39\x274\n\x39\r\x39\xE\x39\x275\x3\x39\x3\x39\x3\x39"+
		"\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39"+
		"\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x5\x39\x28B\n\x39\x3\x39\x3"+
		"\x39\x3\x39\x5\x39\x290\n\x39\x3:\x3:\x3;\x3;\x3;\x3;\x3;\x3;\x3<\x3<"+
		"\x3<\x3<\x3<\x3<\x3=\x3=\x3=\x3=\x3=\x3=\x3>\x3>\x3>\x3>\x3>\x3>\x3?\x3"+
		"?\x3?\x3?\x3?\x3?\x3@\x3@\x3@\x3@\x3@\x5@\x2B7\n@\x3@\x3@\x3\x41\x3\x41"+
		"\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42"+
		"\x3\x42\x3\x42\x3\x43\x3\x43\x3\x43\x6\x43\x2CC\n\x43\r\x43\xE\x43\x2CD"+
		"\x3\x43\x5\x43\x2D1\n\x43\x3\x43\x3\x43\x3\x44\x3\x44\x3\x44\x3\x44\x3"+
		"\x44\x3\x44\x3\x44\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3"+
		"\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x6"+
		"\x46\x2ED\n\x46\r\x46\xE\x46\x2EE\x3\x46\x5\x46\x2F2\n\x46\x3G\x6G\x2F5"+
		"\nG\rG\xEG\x2F6\x3G\x13\x93\x9B\xAC\xB8\xE1\xEC\x130\x13F\x148\x14F\x15B"+
		"\x162\x170\x178\x245\x275\x2CD\x2H\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18"+
		"\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\"+
		"^`\x62\x64\x66hjlnprtvxz|~\x80\x82\x84\x86\x88\x8A\x8C\x2\b\x3\x2\x6\a"+
		"\x3\x2\t\n\x3\x2\xE\xF\x3\x2\x1A\x1B\x3\x2.\x31\x3\x2\x42\x43\x327\x2"+
		"\x8E\x3\x2\x2\x2\x4\xA0\x3\x2\x2\x2\x6\xB0\x3\x2\x2\x2\b\xBC\x3\x2\x2"+
		"\x2\n\xC1\x3\x2\x2\x2\f\xD9\x3\x2\x2\x2\xE\xF3\x3\x2\x2\x2\x10\x101\x3"+
		"\x2\x2\x2\x12\x103\x3\x2\x2\x2\x14\x111\x3\x2\x2\x2\x16\x11C\x3\x2\x2"+
		"\x2\x18\x122\x3\x2\x2\x2\x1A\x12B\x3\x2\x2\x2\x1C\x138\x3\x2\x2\x2\x1E"+
		"\x13A\x3\x2\x2\x2 \x143\x3\x2\x2\x2\"\x167\x3\x2\x2\x2$\x169\x3\x2\x2"+
		"\x2&\x174\x3\x2\x2\x2(\x17D\x3\x2\x2\x2*\x188\x3\x2\x2\x2,\x190\x3\x2"+
		"\x2\x2.\x194\x3\x2\x2\x2\x30\x198\x3\x2\x2\x2\x32\x19C\x3\x2\x2\x2\x34"+
		"\x1A0\x3\x2\x2\x2\x36\x1A4\x3\x2\x2\x2\x38\x1A7\x3\x2\x2\x2:\x1AA\x3\x2"+
		"\x2\x2<\x1B4\x3\x2\x2\x2>\x1C3\x3\x2\x2\x2@\x1C5\x3\x2\x2\x2\x42\x1CA"+
		"\x3\x2\x2\x2\x44\x1E4\x3\x2\x2\x2\x46\x1E6\x3\x2\x2\x2H\x1EF\x3\x2\x2"+
		"\x2J\x1F1\x3\x2\x2\x2L\x1F9\x3\x2\x2\x2N\x1FF\x3\x2\x2\x2P\x201\x3\x2"+
		"\x2\x2R\x205\x3\x2\x2\x2T\x20D\x3\x2\x2\x2V\x215\x3\x2\x2\x2X\x21B\x3"+
		"\x2\x2\x2Z\x21D\x3\x2\x2\x2\\\x222\x3\x2\x2\x2^\x227\x3\x2\x2\x2`\x231"+
		"\x3\x2\x2\x2\x62\x23D\x3\x2\x2\x2\x64\x23F\x3\x2\x2\x2\x66\x24E\x3\x2"+
		"\x2\x2h\x250\x3\x2\x2\x2j\x257\x3\x2\x2\x2l\x25E\x3\x2\x2\x2n\x26D\x3"+
		"\x2\x2\x2p\x28F\x3\x2\x2\x2r\x291\x3\x2\x2\x2t\x293\x3\x2\x2\x2v\x299"+
		"\x3\x2\x2\x2x\x29F\x3\x2\x2\x2z\x2A5\x3\x2\x2\x2|\x2AB\x3\x2\x2\x2~\x2B1"+
		"\x3\x2\x2\x2\x80\x2BA\x3\x2\x2\x2\x82\x2C1\x3\x2\x2\x2\x84\x2C8\x3\x2"+
		"\x2\x2\x86\x2D4\x3\x2\x2\x2\x88\x2DB\x3\x2\x2\x2\x8A\x2F1\x3\x2\x2\x2"+
		"\x8C\x2F4\x3\x2\x2\x2\x8E\x8F\aG\x2\x2\x8F\x93\a\x3\x2\x2\x90\x92\x5\x16"+
		"\f\x2\x91\x90\x3\x2\x2\x2\x92\x95\x3\x2\x2\x2\x93\x94\x3\x2\x2\x2\x93"+
		"\x91\x3\x2\x2\x2\x94\x96\x3\x2\x2\x2\x95\x93\x3\x2\x2\x2\x96\x99\x5\x4"+
		"\x3\x2\x97\x9A\x5\xE\b\x2\x98\x9A\x5\x6\x4\x2\x99\x97\x3\x2\x2\x2\x99"+
		"\x98\x3\x2\x2\x2\x9A\x9B\x3\x2\x2\x2\x9B\x9C\x3\x2\x2\x2\x9B\x99\x3\x2"+
		"\x2\x2\x9C\x9D\x3\x2\x2\x2\x9D\x9E\x5\b\x5\x2\x9E\x9F\aH\x2\x2\x9F\x3"+
		"\x3\x2\x2\x2\xA0\xA1\aG\x2\x2\xA1\xA2\a\x4\x2\x2\xA2\xA3\x5\x18\r\x2\xA3"+
		"\xA4\aG\x2\x2\xA4\xA5\x5\x1A\xE\x2\xA5\xAA\aH\x2\x2\xA6\xA7\aG\x2\x2\xA7"+
		"\xA8\x5\x1C\xF\x2\xA8\xA9\aH\x2\x2\xA9\xAB\x3\x2\x2\x2\xAA\xA6\x3\x2\x2"+
		"\x2\xAB\xAC\x3\x2\x2\x2\xAC\xAD\x3\x2\x2\x2\xAC\xAA\x3\x2\x2\x2\xAD\xAE"+
		"\x3\x2\x2\x2\xAE\xAF\aH\x2\x2\xAF\x5\x3\x2\x2\x2\xB0\xB1\aG\x2\x2\xB1"+
		"\xB2\a\x5\x2\x2\xB2\xB3\t\x2\x2\x2\xB3\xB6\x5\n\x6\x2\xB4\xB7\x5\xE\b"+
		"\x2\xB5\xB7\x5\x6\x4\x2\xB6\xB4\x3\x2\x2\x2\xB6\xB5\x3\x2\x2\x2\xB7\xB8"+
		"\x3\x2\x2\x2\xB8\xB9\x3\x2\x2\x2\xB8\xB6\x3\x2\x2\x2\xB9\xBA\x3\x2\x2"+
		"\x2\xBA\xBB\aH\x2\x2\xBB\a\x3\x2\x2\x2\xBC\xBD\aG\x2\x2\xBD\xBE\a\b\x2"+
		"\x2\xBE\xBF\t\x3\x2\x2\xBF\xC0\x5\x8A\x46\x2\xC0\t\x3\x2\x2\x2\xC1\xC2"+
		"\aG\x2\x2\xC2\xC3\a\v\x2\x2\xC3\xC4\x5p\x39\x2\xC4\xC5\aH\x2\x2\xC5\v"+
		"\x3\x2\x2\x2\xC6\xD4\aG\x2\x2\xC7\xD5\x5$\x13\x2\xC8\xD5\x5\x1A\xE\x2"+
		"\xC9\xD5\x5\x1C\xF\x2\xCA\xD5\x5*\x16\x2\xCB\xD5\x5,\x17\x2\xCC\xD5\x5"+
		"\x32\x1A\x2\xCD\xD5\x5\x34\x1B\x2\xCE\xD5\x5.\x18\x2\xCF\xD5\x5\x30\x19"+
		"\x2\xD0\xD5\x5\x36\x1C\x2\xD1\xD5\x5:\x1E\x2\xD2\xD5\x5\x38\x1D\x2\xD3"+
		"\xD5\x5<\x1F\x2\xD4\xC7\x3\x2\x2\x2\xD4\xC8\x3\x2\x2\x2\xD4\xC9\x3\x2"+
		"\x2\x2\xD4\xCA\x3\x2\x2\x2\xD4\xCB\x3\x2\x2\x2\xD4\xCC\x3\x2\x2\x2\xD4"+
		"\xCD\x3\x2\x2\x2\xD4\xCE\x3\x2\x2\x2\xD4\xCF\x3\x2\x2\x2\xD4\xD0\x3\x2"+
		"\x2\x2\xD4\xD1\x3\x2\x2\x2\xD4\xD2\x3\x2\x2\x2\xD4\xD3\x3\x2\x2\x2\xD5"+
		"\xD6\x3\x2\x2\x2\xD6\xD7\aH\x2\x2\xD7\xDA\x3\x2\x2\x2\xD8\xDA\x5\x12\n"+
		"\x2\xD9\xC6\x3\x2\x2\x2\xD9\xD8\x3\x2\x2\x2\xDA\r\x3\x2\x2\x2\xDB\xDC"+
		"\aG\x2\x2\xDC\xDD\a\f\x2\x2\xDD\xDF\aG\x2\x2\xDE\xE0\x5\x10\t\x2\xDF\xDE"+
		"\x3\x2\x2\x2\xE0\xE1\x3\x2\x2\x2\xE1\xE2\x3\x2\x2\x2\xE1\xDF\x3\x2\x2"+
		"\x2\xE2\xE3\x3\x2\x2\x2\xE3\xE4\aH\x2\x2\xE4\xE5\aH\x2\x2\xE5\xF4\x3\x2"+
		"\x2\x2\xE6\xE7\aG\x2\x2\xE7\xE8\a\r\x2\x2\xE8\xEA\aG\x2\x2\xE9\xEB\x5"+
		"\x10\t\x2\xEA\xE9\x3\x2\x2\x2\xEB\xEC\x3\x2\x2\x2\xEC\xED\x3\x2\x2\x2"+
		"\xEC\xEA\x3\x2\x2\x2\xED\xEE\x3\x2\x2\x2\xEE\xEF\aH\x2\x2\xEF\xF0\aH\x2"+
		"\x2\xF0\xF4\x3\x2\x2\x2\xF1\xF4\x5\x12\n\x2\xF2\xF4\x5\x14\v\x2\xF3\xDB"+
		"\x3\x2\x2\x2\xF3\xE6\x3\x2\x2\x2\xF3\xF1\x3\x2\x2\x2\xF3\xF2\x3\x2\x2"+
		"\x2\xF4\xF\x3\x2\x2\x2\xF5\xF6\aG\x2\x2\xF6\xF7\x5p\x39\x2\xF7\xF8\x5"+
		"\xE\b\x2\xF8\xF9\aH\x2\x2\xF9\x102\x3\x2\x2\x2\xFA\x102\x5\xE\b\x2\xFB"+
		"\xFC\aG\x2\x2\xFC\xFD\x5p\x39\x2\xFD\xFE\x5\f\a\x2\xFE\xFF\aH\x2\x2\xFF"+
		"\x102\x3\x2\x2\x2\x100\x102\x5\f\a\x2\x101\xF5\x3\x2\x2\x2\x101\xFA\x3"+
		"\x2\x2\x2\x101\xFB\x3\x2\x2\x2\x101\x100\x3\x2\x2\x2\x102\x11\x3\x2\x2"+
		"\x2\x103\x104\aG\x2\x2\x104\x105\t\x4\x2\x2\x105\x106\x5\x62\x32\x2\x106"+
		"\x10D\x5L\'\x2\x107\x10E\x5\xE\b\x2\x108\x10E\x5\f\a\x2\x109\x10E\x5p"+
		"\x39\x2\x10A\x10E\x5\x44#\x2\x10B\x10E\x5\x10\t\x2\x10C\x10E\x5\x42\""+
		"\x2\x10D\x107\x3\x2\x2\x2\x10D\x108\x3\x2\x2\x2\x10D\x109\x3\x2\x2\x2"+
		"\x10D\x10A\x3\x2\x2\x2\x10D\x10B\x3\x2\x2\x2\x10D\x10C\x3\x2\x2\x2\x10E"+
		"\x10F\x3\x2\x2\x2\x10F\x110\aH\x2\x2\x110\x13\x3\x2\x2\x2\x111\x112\a"+
		"G\x2\x2\x112\x113\a\x10\x2\x2\x113\x114\x5`\x31\x2\x114\x118\x5L\'\x2"+
		"\x115\x119\x5\xE\b\x2\x116\x119\x5\f\a\x2\x117\x119\x5\x10\t\x2\x118\x115"+
		"\x3\x2\x2\x2\x118\x116\x3\x2\x2\x2\x118\x117\x3\x2\x2\x2\x119\x11A\x3"+
		"\x2\x2\x2\x11A\x11B\aH\x2\x2\x11B\x15\x3\x2\x2\x2\x11C\x11D\aG\x2\x2\x11D"+
		"\x11E\a\x11\x2\x2\x11E\x11F\x5`\x31\x2\x11F\x120\x5L\'\x2\x120\x121\a"+
		"H\x2\x2\x121\x17\x3\x2\x2\x2\x122\x123\aG\x2\x2\x123\x124\a\x12\x2\x2"+
		"\x124\x127\a\x13\x2\x2\x125\x128\x5\x8A\x46\x2\x126\x128\x5L\'\x2\x127"+
		"\x125\x3\x2\x2\x2\x127\x126\x3\x2\x2\x2\x128\x129\x3\x2\x2\x2\x129\x12A"+
		"\aH\x2\x2\x12A\x19\x3\x2\x2\x2\x12B\x12C\a\x12\x2\x2\x12C\x12E\a\x14\x2"+
		"\x2\x12D\x12F\x5 \x11\x2\x12E\x12D\x3\x2\x2\x2\x12F\x130\x3\x2\x2\x2\x130"+
		"\x131\x3\x2\x2\x2\x130\x12E\x3\x2\x2\x2\x131\x1B\x3\x2\x2\x2\x132\x133"+
		"\a\x12\x2\x2\x133\x134\a\x15\x2\x2\x134\x135\x5\x44#\x2\x135\x136\x5\x1E"+
		"\x10\x2\x136\x139\x3\x2\x2\x2\x137\x139\x5<\x1F\x2\x138\x132\x3\x2\x2"+
		"\x2\x138\x137\x3\x2\x2\x2\x139\x1D\x3\x2\x2\x2\x13A\x13B\aG\x2\x2\x13B"+
		"\x13D\a\x15\x2\x2\x13C\x13E\x5\"\x12\x2\x13D\x13C\x3\x2\x2\x2\x13E\x13F"+
		"\x3\x2\x2\x2\x13F\x140\x3\x2\x2\x2\x13F\x13D\x3\x2\x2\x2\x140\x141\x3"+
		"\x2\x2\x2\x141\x142\aH\x2\x2\x142\x1F\x3\x2\x2\x2\x143\x148\aG\x2\x2\x144"+
		"\x145\a\x45\x2\x2\x145\x147\a\x16\x2\x2\x146\x144\x3\x2\x2\x2\x147\x14A"+
		"\x3\x2\x2\x2\x148\x149\x3\x2\x2\x2\x148\x146\x3\x2\x2\x2\x149\x14B\x3"+
		"\x2\x2\x2\x14A\x148\x3\x2\x2\x2\x14B\x14F\a\x45\x2\x2\x14C\x14E\x5 \x11"+
		"\x2\x14D\x14C\x3\x2\x2\x2\x14E\x151\x3\x2\x2\x2\x14F\x150\x3\x2\x2\x2"+
		"\x14F\x14D\x3\x2\x2\x2\x150\x152\x3\x2\x2\x2\x151\x14F\x3\x2\x2\x2\x152"+
		"\x153\aH\x2\x2\x153!\x3\x2\x2\x2\x154\x168\x5L\'\x2\x155\x15B\aG\x2\x2"+
		"\x156\x157\x5\x8CG\x2\x157\x158\a\x16\x2\x2\x158\x15A\x3\x2\x2\x2\x159"+
		"\x156\x3\x2\x2\x2\x15A\x15D\x3\x2\x2\x2\x15B\x15C\x3\x2\x2\x2\x15B\x159"+
		"\x3\x2\x2\x2\x15C\x15E\x3\x2\x2\x2\x15D\x15B\x3\x2\x2\x2\x15E\x162\x5"+
		"\x8CG\x2\x15F\x161\x5\"\x12\x2\x160\x15F\x3\x2\x2\x2\x161\x164\x3\x2\x2"+
		"\x2\x162\x163\x3\x2\x2\x2\x162\x160\x3\x2\x2\x2\x163\x165\x3\x2\x2\x2"+
		"\x164\x162\x3\x2\x2\x2\x165\x166\aH\x2\x2\x166\x168\x3\x2\x2\x2\x167\x154"+
		"\x3\x2\x2\x2\x167\x155\x3\x2\x2\x2\x168#\x3\x2\x2\x2\x169\x16A\a\x17\x2"+
		"\x2\x16A\x16B\a\x18\x2\x2\x16B\x16C\x5L\'\x2\x16C\x16E\aG\x2\x2\x16D\x16F"+
		"\x5&\x14\x2\x16E\x16D\x3\x2\x2\x2\x16F\x170\x3\x2\x2\x2\x170\x171\x3\x2"+
		"\x2\x2\x170\x16E\x3\x2\x2\x2\x171\x172\x3\x2\x2\x2\x172\x173\aH\x2\x2"+
		"\x173%\x3\x2\x2\x2\x174\x176\aG\x2\x2\x175\x177\x5(\x15\x2\x176\x175\x3"+
		"\x2\x2\x2\x177\x178\x3\x2\x2\x2\x178\x179\x3\x2\x2\x2\x178\x176\x3\x2"+
		"\x2\x2\x179\x17A\x3\x2\x2\x2\x17A\x17B\x5\x8A\x46\x2\x17B\x17C\aH\x2\x2"+
		"\x17C\'\x3\x2\x2\x2\x17D\x17E\aG\x2\x2\x17E\x184\x5\x8CG\x2\x17F\x180"+
		"\aG\x2\x2\x180\x181\x5\x8CG\x2\x181\x182\aH\x2\x2\x182\x185\x3\x2\x2\x2"+
		"\x183\x185\x5n\x38\x2\x184\x17F\x3\x2\x2\x2\x184\x183\x3\x2\x2\x2\x185"+
		"\x186\x3\x2\x2\x2\x186\x187\aH\x2\x2\x187)\x3\x2\x2\x2\x188\x189\a\x19"+
		"\x2\x2\x189\x18E\t\x5\x2\x2\x18A\x18F\x5Z.\x2\x18B\x18F\a\x1B\x2\x2\x18C"+
		"\x18F\a\x1A\x2\x2\x18D\x18F\a\x1C\x2\x2\x18E\x18A\x3\x2\x2\x2\x18E\x18B"+
		"\x3\x2\x2\x2\x18E\x18C\x3\x2\x2\x2\x18E\x18D\x3\x2\x2\x2\x18F+\x3\x2\x2"+
		"\x2\x190\x191\a\x1D\x2\x2\x191\x192\x5\x42\"\x2\x192\x193\x5\x8A\x46\x2"+
		"\x193-\x3\x2\x2\x2\x194\x195\a\x1E\x2\x2\x195\x196\x5\x42\"\x2\x196\x197"+
		"\x5\x8A\x46\x2\x197/\x3\x2\x2\x2\x198\x199\a\x1F\x2\x2\x199\x19A\x5\x42"+
		"\"\x2\x19A\x19B\x5\x8A\x46\x2\x19B\x31\x3\x2\x2\x2\x19C\x19D\a \x2\x2"+
		"\x19D\x19E\x5> \x2\x19E\x19F\x5> \x2\x19F\x33\x3\x2\x2\x2\x1A0\x1A1\a"+
		"!\x2\x2\x1A1\x1A2\x5> \x2\x1A2\x1A3\x5> \x2\x1A3\x35\x3\x2\x2\x2\x1A4"+
		"\x1A5\a\"\x2\x2\x1A5\x1A6\x5> \x2\x1A6\x37\x3\x2\x2\x2\x1A7\x1A8\a#\x2"+
		"\x2\x1A8\x1A9\x5\x44#\x2\x1A9\x39\x3\x2\x2\x2\x1AA\x1AB\a$\x2\x2\x1AB"+
		"\x1AC\a%\x2\x2\x1AC;\x3\x2\x2\x2\x1AD\x1AE\a&\x2\x2\x1AE\x1AF\x5\x8A\x46"+
		"\x2\x1AF\x1B0\x5\f\a\x2\x1B0\x1B5\x3\x2\x2\x2\x1B1\x1B2\a&\x2\x2\x1B2"+
		"\x1B3\a\xF\x2\x2\x1B3\x1B5\x5\f\a\x2\x1B4\x1AD\x3\x2\x2\x2\x1B4\x1B1\x3"+
		"\x2\x2\x2\x1B5=\x3\x2\x2\x2\x1B6\x1C4\x5\x80\x41\x2\x1B7\x1C4\x5\x82\x42"+
		"\x2\x1B8\x1C4\x5L\'\x2\x1B9\x1C4\x5@!\x2\x1BA\x1BE\aG\x2\x2\x1BB\x1BF"+
		"\a\'\x2\x2\x1BC\x1BF\a(\x2\x2\x1BD\x1BF\x5\x8A\x46\x2\x1BE\x1BB\x3\x2"+
		"\x2\x2\x1BE\x1BC\x3\x2\x2\x2\x1BE\x1BD\x3\x2\x2\x2\x1BF\x1C0\x3\x2\x2"+
		"\x2\x1C0\x1C1\x5\x44#\x2\x1C1\x1C2\aH\x2\x2\x1C2\x1C4\x3\x2\x2\x2\x1C3"+
		"\x1B6\x3\x2\x2\x2\x1C3\x1B7\x3\x2\x2\x2\x1C3\x1B8\x3\x2\x2\x2\x1C3\x1B9"+
		"\x3\x2\x2\x2\x1C3\x1BA\x3\x2\x2\x2\x1C4?\x3\x2\x2\x2\x1C5\x1C6\aG\x2\x2"+
		"\x1C6\x1C7\a)\x2\x2\x1C7\x1C8\x5> \x2\x1C8\x1C9\aH\x2\x2\x1C9\x41\x3\x2"+
		"\x2\x2\x1CA\x1CE\aG\x2\x2\x1CB\x1CF\a\x3\x2\x2\x1CC\x1CF\x5R*\x2\x1CD"+
		"\x1CF\x5L\'\x2\x1CE\x1CB\x3\x2\x2\x2\x1CE\x1CC\x3\x2\x2\x2\x1CE\x1CD\x3"+
		"\x2\x2\x2\x1CF\x1D0\x3\x2\x2\x2\x1D0\x1D3\a*\x2\x2\x1D1\x1D4\x5\x8CG\x2"+
		"\x1D2\x1D4\x5L\'\x2\x1D3\x1D1\x3\x2\x2\x2\x1D3\x1D2\x3\x2\x2\x2\x1D4\x1D5"+
		"\x3\x2\x2\x2\x1D5\x1D6\aH\x2\x2\x1D6\x43\x3\x2\x2\x2\x1D7\x1E5\x5\x84"+
		"\x43\x2\x1D8\x1E5\x5j\x36\x2\x1D9\x1DA\aG\x2\x2\x1DA\x1DB\x5N(\x2\x1DB"+
		"\x1DE\x5P)\x2\x1DC\x1DF\x5\x8CG\x2\x1DD\x1DF\x5L\'\x2\x1DE\x1DC\x3\x2"+
		"\x2\x2\x1DE\x1DD\x3\x2\x2\x2\x1DF\x1E0\x3\x2\x2\x2\x1E0\x1E1\aH\x2\x2"+
		"\x1E1\x1E5\x3\x2\x2\x2\x1E2\x1E5\x5\x46$\x2\x1E3\x1E5\x5L\'\x2\x1E4\x1D7"+
		"\x3\x2\x2\x2\x1E4\x1D8\x3\x2\x2\x2\x1E4\x1D9\x3\x2\x2\x2\x1E4\x1E2\x3"+
		"\x2\x2\x2\x1E4\x1E3\x3\x2\x2\x2\x1E5\x45\x3\x2\x2\x2\x1E6\x1EA\aG\x2\x2"+
		"\x1E7\x1EB\a\'\x2\x2\x1E8\x1EB\a(\x2\x2\x1E9\x1EB\x5\x8A\x46\x2\x1EA\x1E7"+
		"\x3\x2\x2\x2\x1EA\x1E8\x3\x2\x2\x2\x1EA\x1E9\x3\x2\x2\x2\x1EB\x1EC\x3"+
		"\x2\x2\x2\x1EC\x1ED\x5H%\x2\x1ED\x1EE\aH\x2\x2\x1EEG\x3\x2\x2\x2\x1EF"+
		"\x1F0\x5J&\x2\x1F0I\x3\x2\x2\x2\x1F1\x1F2\aG\x2\x2\x1F2\x1F3\a+\x2\x2"+
		"\x1F3\x1F4\x5\x8A\x46\x2\x1F4\x1F5\x5\x44#\x2\x1F5\x1F6\a,\x2\x2\x1F6"+
		"\x1F7\x5L\'\x2\x1F7\x1F8\aH\x2\x2\x1F8K\x3\x2\x2\x2\x1F9\x1FA\a-\x2\x2"+
		"\x1FA\x1FB\x5\x8CG\x2\x1FBM\x3\x2\x2\x2\x1FC\x200\a\x3\x2\x2\x1FD\x200"+
		"\x5T+\x2\x1FE\x200\x5L\'\x2\x1FF\x1FC\x3\x2\x2\x2\x1FF\x1FD\x3\x2\x2\x2"+
		"\x1FF\x1FE\x3\x2\x2\x2\x200O\x3\x2\x2\x2\x201\x202\t\x6\x2\x2\x202Q\x3"+
		"\x2\x2\x2\x203\x206\x5V,\x2\x204\x206\x5T+\x2\x205\x203\x3\x2\x2\x2\x205"+
		"\x204\x3\x2\x2\x2\x206S\x3\x2\x2\x2\x207\x208\aG\x2\x2\x208\x209\x5X-"+
		"\x2\x209\x20A\a\x6\x2\x2\x20A\x20B\aH\x2\x2\x20B\x20E\x3\x2\x2\x2\x20C"+
		"\x20E\x5Z.\x2\x20D\x207\x3\x2\x2\x2\x20D\x20C\x3\x2\x2\x2\x20EU\x3\x2"+
		"\x2\x2\x20F\x210\aG\x2\x2\x210\x211\x5X-\x2\x211\x212\a\a\x2\x2\x212\x213"+
		"\aH\x2\x2\x213\x216\x3\x2\x2\x2\x214\x216\x5\\/\x2\x215\x20F\x3\x2\x2"+
		"\x2\x215\x214\x3\x2\x2\x2\x216W\x3\x2\x2\x2\x217\x21C\x5\x8A\x46\x2\x218"+
		"\x21C\a\x1C\x2\x2\x219\x21C\a\x1A\x2\x2\x21A\x21C\a\x1B\x2\x2\x21B\x217"+
		"\x3\x2\x2\x2\x21B\x218\x3\x2\x2\x2\x21B\x219\x3\x2\x2\x2\x21B\x21A\x3"+
		"\x2\x2\x2\x21CY\x3\x2\x2\x2\x21D\x21E\aG\x2\x2\x21E\x21F\a\x32\x2\x2\x21F"+
		"\x220\x5> \x2\x220\x221\aH\x2\x2\x221[\x3\x2\x2\x2\x222\x223\aG\x2\x2"+
		"\x223\x224\a\a\x2\x2\x224\x225\x5T+\x2\x225\x226\aH\x2\x2\x226]\x3\x2"+
		"\x2\x2\x227\x228\aG\x2\x2\x228\x229\a\x33\x2\x2\x229\x22A\t\x2\x2\x2\x22A"+
		"\x22B\aH\x2\x2\x22B_\x3\x2\x2\x2\x22C\x232\x5\x8A\x46\x2\x22D\x232\x5"+
		"p\x39\x2\x22E\x232\x5\x8CG\x2\x22F\x232\x5L\'\x2\x230\x232\x5\x62\x32"+
		"\x2\x231\x22C\x3\x2\x2\x2\x231\x22D\x3\x2\x2\x2\x231\x22E\x3\x2\x2\x2"+
		"\x231\x22F\x3\x2\x2\x2\x231\x230\x3\x2\x2\x2\x232\x61\x3\x2\x2\x2\x233"+
		"\x23E\x5\x44#\x2\x234\x23E\x5\x64\x33\x2\x235\x23E\x5\x66\x34\x2\x236"+
		"\x23E\a\x6\x2\x2\x237\x23E\a\a\x2\x2\x238\x23E\x5V,\x2\x239\x23E\x5L\'"+
		"\x2\x23A\x23E\x5^\x30\x2\x23B\x23E\x5h\x35\x2\x23C\x23E\x5j\x36\x2\x23D"+
		"\x233\x3\x2\x2\x2\x23D\x234\x3\x2\x2\x2\x23D\x235\x3\x2\x2\x2\x23D\x236"+
		"\x3\x2\x2\x2\x23D\x237\x3\x2\x2\x2\x23D\x238\x3\x2\x2\x2\x23D\x239\x3"+
		"\x2\x2\x2\x23D\x23A\x3\x2\x2\x2\x23D\x23B\x3\x2\x2\x2\x23D\x23C\x3\x2"+
		"\x2\x2\x23E\x63\x3\x2\x2\x2\x23F\x245\aG\x2\x2\x240\x241\x5\x8CG\x2\x241"+
		"\x242\a\x16\x2\x2\x242\x244\x3\x2\x2\x2\x243\x240\x3\x2\x2\x2\x244\x247"+
		"\x3\x2\x2\x2\x245\x246\x3\x2\x2\x2\x245\x243\x3\x2\x2\x2\x246\x248\x3"+
		"\x2\x2\x2\x247\x245\x3\x2\x2\x2\x248\x249\x5\x8CG\x2\x249\x24A\aH\x2\x2"+
		"\x24A\x65\x3\x2\x2\x2\x24B\x24F\x5H%\x2\x24C\x24F\x5\x12\n\x2\x24D\x24F"+
		"\x5\x14\v\x2\x24E\x24B\x3\x2\x2\x2\x24E\x24C\x3\x2\x2\x2\x24E\x24D\x3"+
		"\x2\x2\x2\x24Fg\x3\x2\x2\x2\x250\x251\aG\x2\x2\x251\x252\a\x34\x2\x2\x252"+
		"\x253\x5\x8A\x46\x2\x253\x254\a\x35\x2\x2\x254\x255\x5\x8A\x46\x2\x255"+
		"\x256\aH\x2\x2\x256i\x3\x2\x2\x2\x257\x258\aG\x2\x2\x258\x259\a\x36\x2"+
		"\x2\x259\x25A\x5\x62\x32\x2\x25A\x25B\x5L\'\x2\x25B\x25C\x5p\x39\x2\x25C"+
		"\x25D\aH\x2\x2\x25Dk\x3\x2\x2\x2\x25E\x25F\a\x43\x2\x2\x25F\x260\x5n\x38"+
		"\x2\x260\x261\x5n\x38\x2\x261m\x3\x2\x2\x2\x262\x26E\x5\x8CG\x2\x263\x26E"+
		"\x5L\'\x2\x264\x265\aG\x2\x2\x265\x268\a\x37\x2\x2\x266\x269\x5L\'\x2"+
		"\x267\x269\x5\x8CG\x2\x268\x266\x3\x2\x2\x2\x268\x267\x3\x2\x2\x2\x269"+
		"\x26A\x3\x2\x2\x2\x26A\x26B\x5> \x2\x26B\x26C\aH\x2\x2\x26C\x26E\x3\x2"+
		"\x2\x2\x26D\x262\x3\x2\x2\x2\x26D\x263\x3\x2\x2\x2\x26D\x264\x3\x2\x2"+
		"\x2\x26Eo\x3\x2\x2\x2\x26F\x28A\aG\x2\x2\x270\x271\a\x41\x2\x2\x271\x273"+
		"\x5p\x39\x2\x272\x274\x5p\x39\x2\x273\x272\x3\x2\x2\x2\x274\x275\x3\x2"+
		"\x2\x2\x275\x276\x3\x2\x2\x2\x275\x273\x3\x2\x2\x2\x276\x28B\x3\x2\x2"+
		"\x2\x277\x278\x5r:\x2\x278\x279\x5\x8A\x46\x2\x279\x27A\x5\x8A\x46\x2"+
		"\x27A\x28B\x3\x2\x2\x2\x27B\x28B\x5l\x37\x2\x27C\x27D\a\x43\x2\x2\x27D"+
		"\x27E\x5> \x2\x27E\x27F\x5> \x2\x27F\x28B\x3\x2\x2\x2\x280\x281\a\x44"+
		"\x2\x2\x281\x28B\x5p\x39\x2\x282\x283\a\x43\x2\x2\x283\x284\x5T+\x2\x284"+
		"\x285\x5T+\x2\x285\x28B\x3\x2\x2\x2\x286\x287\a\x43\x2\x2\x287\x288\x5"+
		"V,\x2\x288\x289\x5V,\x2\x289\x28B\x3\x2\x2\x2\x28A\x270\x3\x2\x2\x2\x28A"+
		"\x277\x3\x2\x2\x2\x28A\x27B\x3\x2\x2\x2\x28A\x27C\x3\x2\x2\x2\x28A\x280"+
		"\x3\x2\x2\x2\x28A\x282\x3\x2\x2\x2\x28A\x286\x3\x2\x2\x2\x28B\x28C\x3"+
		"\x2\x2\x2\x28C\x28D\aH\x2\x2\x28D\x290\x3\x2\x2\x2\x28E\x290\x5\x12\n"+
		"\x2\x28F\x26F\x3\x2\x2\x2\x28F\x28E\x3\x2\x2\x2\x290q\x3\x2\x2\x2\x291"+
		"\x292\t\a\x2\x2\x292s\x3\x2\x2\x2\x293\x294\aG\x2\x2\x294\x295\a\x38\x2"+
		"\x2\x295\x296\x5\x8A\x46\x2\x296\x297\x5\x8A\x46\x2\x297\x298\aH\x2\x2"+
		"\x298u\x3\x2\x2\x2\x299\x29A\aG\x2\x2\x29A\x29B\a\x39\x2\x2\x29B\x29C"+
		"\x5\x8A\x46\x2\x29C\x29D\x5\x8A\x46\x2\x29D\x29E\aH\x2\x2\x29Ew\x3\x2"+
		"\x2\x2\x29F\x2A0\aG\x2\x2\x2A0\x2A1\a:\x2\x2\x2A1\x2A2\x5\x8A\x46\x2\x2A2"+
		"\x2A3\x5\x8A\x46\x2\x2A3\x2A4\aH\x2\x2\x2A4y\x3\x2\x2\x2\x2A5\x2A6\aG"+
		"\x2\x2\x2A6\x2A7\a;\x2\x2\x2A7\x2A8\x5\x8A\x46\x2\x2A8\x2A9\x5\x8A\x46"+
		"\x2\x2A9\x2AA\aH\x2\x2\x2AA{\x3\x2\x2\x2\x2AB\x2AC\aG\x2\x2\x2AC\x2AD"+
		"\a<\x2\x2\x2AD\x2AE\x5\x8A\x46\x2\x2AE\x2AF\x5\x8A\x46\x2\x2AF\x2B0\a"+
		"H\x2\x2\x2B0}\x3\x2\x2\x2\x2B1\x2B2\aG\x2\x2\x2B2\x2B6\a=\x2\x2\x2B3\x2B7"+
		"\x5\x44#\x2\x2B4\x2B7\x5H%\x2\x2B5\x2B7\x5L\'\x2\x2B6\x2B3\x3\x2\x2\x2"+
		"\x2B6\x2B4\x3\x2\x2\x2\x2B6\x2B5\x3\x2\x2\x2\x2B7\x2B8\x3\x2\x2\x2\x2B8"+
		"\x2B9\aH\x2\x2\x2B9\x7F\x3\x2\x2\x2\x2BA\x2BB\aG\x2\x2\x2BB\x2BC\a\n\x2"+
		"\x2\x2BC\x2BD\x5\x44#\x2\x2BD\x2BE\a,\x2\x2\x2BE\x2BF\x5L\'\x2\x2BF\x2C0"+
		"\aH\x2\x2\x2C0\x81\x3\x2\x2\x2\x2C1\x2C2\aG\x2\x2\x2C2\x2C3\a\t\x2\x2"+
		"\x2C3\x2C4\x5\x44#\x2\x2C4\x2C5\a,\x2\x2\x2C5\x2C6\x5L\'\x2\x2C6\x2C7"+
		"\aH\x2\x2\x2C7\x83\x3\x2\x2\x2\x2C8\x2C9\aG\x2\x2\x2C9\x2D0\a>\x2\x2\x2CA"+
		"\x2CC\x5\x44#\x2\x2CB\x2CA\x3\x2\x2\x2\x2CC\x2CD\x3\x2\x2\x2\x2CD\x2CE"+
		"\x3\x2\x2\x2\x2CD\x2CB\x3\x2\x2\x2\x2CE\x2D1\x3\x2\x2\x2\x2CF\x2D1\x5"+
		"\x12\n\x2\x2D0\x2CB\x3\x2\x2\x2\x2D0\x2CF\x3\x2\x2\x2\x2D1\x2D2\x3\x2"+
		"\x2\x2\x2D2\x2D3\aH\x2\x2\x2D3\x85\x3\x2\x2\x2\x2D4\x2D5\aG\x2\x2\x2D5"+
		"\x2D6\a?\x2\x2\x2D6\x2D7\x5\x44#\x2\x2D7\x2D8\a,\x2\x2\x2D8\x2D9\x5L\'"+
		"\x2\x2D9\x2DA\aH\x2\x2\x2DA\x87\x3\x2\x2\x2\x2DB\x2DC\aG\x2\x2\x2DC\x2DD"+
		"\a@\x2\x2\x2DD\x2DE\x5> \x2\x2DE\x2DF\a,\x2\x2\x2DF\x2E0\x5L\'\x2\x2E0"+
		"\x2E1\aH\x2\x2\x2E1\x89\x3\x2\x2\x2\x2E2\x2F2\x5~@\x2\x2E3\x2F2\x5v<\x2"+
		"\x2E4\x2F2\x5x=\x2\x2E5\x2F2\x5z>\x2\x2E6\x2F2\x5t;\x2\x2E7\x2F2\x5|?"+
		"\x2\x2E8\x2F2\x5\x86\x44\x2\x2E9\x2F2\x5\x42\"\x2\x2EA\x2F2\x5\x88\x45"+
		"\x2\x2EB\x2ED\a\x45\x2\x2\x2EC\x2EB\x3\x2\x2\x2\x2ED\x2EE\x3\x2\x2\x2"+
		"\x2EE\x2EC\x3\x2\x2\x2\x2EE\x2EF\x3\x2\x2\x2\x2EF\x2F2\x3\x2\x2\x2\x2F0"+
		"\x2F2\x5L\'\x2\x2F1\x2E2\x3\x2\x2\x2\x2F1\x2E3\x3\x2\x2\x2\x2F1\x2E4\x3"+
		"\x2\x2\x2\x2F1\x2E5\x3\x2\x2\x2\x2F1\x2E6\x3\x2\x2\x2\x2F1\x2E7\x3\x2"+
		"\x2\x2\x2F1\x2E8\x3\x2\x2\x2\x2F1\x2E9\x3\x2\x2\x2\x2F1\x2EA\x3\x2\x2"+
		"\x2\x2F1\x2EC\x3\x2\x2\x2\x2F1\x2F0\x3\x2\x2\x2\x2F2\x8B\x3\x2\x2\x2\x2F3"+
		"\x2F5\a\x46\x2\x2\x2F4\x2F3\x3\x2\x2\x2\x2F5\x2F6\x3\x2\x2\x2\x2F6\x2F4"+
		"\x3\x2\x2\x2\x2F6\x2F7\x3\x2\x2\x2\x2F7\x8D\x3\x2\x2\x2\x39\x93\x99\x9B"+
		"\xAC\xB6\xB8\xD4\xD9\xE1\xEC\xF3\x101\x10D\x118\x127\x130\x138\x13F\x148"+
		"\x14F\x15B\x162\x167\x170\x178\x184\x18E\x1B4\x1BE\x1C3\x1CE\x1D3\x1DE"+
		"\x1E4\x1EA\x1FF\x205\x20D\x215\x21B\x231\x23D\x245\x24E\x268\x26D\x275"+
		"\x28A\x28F\x2B6\x2CD\x2D0\x2EE\x2F1\x2F6";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
