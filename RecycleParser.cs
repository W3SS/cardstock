//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Recycle.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class RecycleParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		BOOLOP=53, COMPOP=54, EQOP=55, UNOP=56, INTNUM=57, OPEN=58, CLOSE=59, 
		WS=60, ANY=61;
	public const int
		RULE_game = 0, RULE_setup = 1, RULE_stage = 2, RULE_scoring = 3, RULE_endcondition = 4, 
		RULE_computermoves = 5, RULE_playermoves = 6, RULE_multigameaction = 7, 
		RULE_gameaction = 8, RULE_multiaction = 9, RULE_action = 10, RULE_playercreate = 11, 
		RULE_teamcreate = 12, RULE_deckcreate = 13, RULE_deck = 14, RULE_attribute = 15, 
		RULE_initpoints = 16, RULE_awards = 17, RULE_subaward = 18, RULE_cycleaction = 19, 
		RULE_setaction = 20, RULE_incaction = 21, RULE_decaction = 22, RULE_moveaction = 23, 
		RULE_copyaction = 24, RULE_removeaction = 25, RULE_shuffleaction = 26, 
		RULE_turnaction = 27, RULE_card = 28, RULE_cardp = 29, RULE_cardm = 30, 
		RULE_owner = 31, RULE_rawstorage = 32, RULE_cstorage = 33, RULE_locstorage = 34, 
		RULE_memstorage = 35, RULE_locpre = 36, RULE_locpost = 37, RULE_who = 38, 
		RULE_who2 = 39, RULE_trueany = 40, RULE_whereclause = 41, RULE_boolatt = 42, 
		RULE_attrcomp = 43, RULE_cardatt = 44, RULE_posq = 45, RULE_boolean = 46, 
		RULE_intop = 47, RULE_add = 48, RULE_mult = 49, RULE_subtract = 50, RULE_mod = 51, 
		RULE_divide = 52, RULE_sizeof = 53, RULE_maxof = 54, RULE_unionof = 55, 
		RULE_sum = 56, RULE_int = 57, RULE_namegr = 58, RULE_name = 59;
	public static readonly string[] ruleNames = {
		"game", "setup", "stage", "scoring", "endcondition", "computermoves", 
		"playermoves", "multigameaction", "gameaction", "multiaction", "action", 
		"playercreate", "teamcreate", "deckcreate", "deck", "attribute", "initpoints", 
		"awards", "subaward", "cycleaction", "setaction", "incaction", "decaction", 
		"moveaction", "copyaction", "removeaction", "shuffleaction", "turnaction", 
		"card", "cardp", "cardm", "owner", "rawstorage", "cstorage", "locstorage", 
		"memstorage", "locpre", "locpost", "who", "who2", "trueany", "whereclause", 
		"boolatt", "attrcomp", "cardatt", "posq", "boolean", "intop", "add", "mult", 
		"subtract", "mod", "divide", "sizeof", "maxof", "unionof", "sum", "int", 
		"namegr", "name"
	};

	private static readonly string[] _LiteralNames = {
		null, "'game'", "'setup'", "'stage'", "'player'", "'team'", "'scoring'", 
		"'min'", "'max'", "'end'", "'comp'", "'choice'", "'create'", "'players'", 
		"'teams'", "'deck'", "'permdeck'", "','", "'initialize'", "'points'", 
		"'cycle'", "'next'", "'current'", "'previous'", "'set'", "'inc'", "'dec'", 
		"'move'", "'all'", "'remember'", "'forget'", "'shuffle'", "'turn'", "'pass'", 
		"'top'", "'bottom'", "'any'", "'owner'", "'sto'", "'loc'", "'mem'", "'where'", 
		"'cardatt'", "'each'", "'+'", "'*'", "'-'", "'%'", "'//'", "'size'", "'using'", 
		"'union'", "'sum'", null, null, null, "'not'", null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "BOOLOP", "COMPOP", "EQOP", "UNOP", "INTNUM", 
		"OPEN", "CLOSE", "WS", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Recycle.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public RecycleParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class GameContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public SetupContext setup() {
			return GetRuleContext<SetupContext>(0);
		}
		public ScoringContext scoring() {
			return GetRuleContext<ScoringContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ComputermovesContext[] computermoves() {
			return GetRuleContexts<ComputermovesContext>();
		}
		public ComputermovesContext computermoves(int i) {
			return GetRuleContext<ComputermovesContext>(i);
		}
		public PlayermovesContext[] playermoves() {
			return GetRuleContexts<PlayermovesContext>();
		}
		public PlayermovesContext playermoves(int i) {
			return GetRuleContext<PlayermovesContext>(i);
		}
		public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public GameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_game; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterGame(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitGame(this);
		}
	}

	[RuleVersion(0)]
	public GameContext game() {
		GameContext _localctx = new GameContext(Context, State);
		EnterRule(_localctx, 0, RULE_game);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; Match(OPEN);
			State = 121; Match(T__0);
			State = 122; setup();
			State = 126;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 126;
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 123; computermoves();
						}
						break;
					case 2:
						{
						State = 124; playermoves();
						}
						break;
					case 3:
						{
						State = 125; stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 128;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 130; scoring();
			State = 131; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetupContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public PlayercreateContext playercreate() {
			return GetRuleContext<PlayercreateContext>(0);
		}
		public TeamcreateContext teamcreate() {
			return GetRuleContext<TeamcreateContext>(0);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public DeckcreateContext[] deckcreate() {
			return GetRuleContexts<DeckcreateContext>();
		}
		public DeckcreateContext deckcreate(int i) {
			return GetRuleContext<DeckcreateContext>(i);
		}
		public SetupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSetup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSetup(this);
		}
	}

	[RuleVersion(0)]
	public SetupContext setup() {
		SetupContext _localctx = new SetupContext(Context, State);
		EnterRule(_localctx, 2, RULE_setup);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; Match(OPEN);
			State = 134; Match(T__1);
			State = 135; playercreate();
			State = 136; Match(OPEN);
			State = 137; teamcreate();
			State = 138; Match(CLOSE);
			State = 140;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 139; deckcreate();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 142;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 144; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public EndconditionContext endcondition() {
			return GetRuleContext<EndconditionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ComputermovesContext[] computermoves() {
			return GetRuleContexts<ComputermovesContext>();
		}
		public ComputermovesContext computermoves(int i) {
			return GetRuleContext<ComputermovesContext>(i);
		}
		public PlayermovesContext[] playermoves() {
			return GetRuleContexts<PlayermovesContext>();
		}
		public PlayermovesContext playermoves(int i) {
			return GetRuleContext<PlayermovesContext>(i);
		}
		public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public StageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterStage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitStage(this);
		}
	}

	[RuleVersion(0)]
	public StageContext stage() {
		StageContext _localctx = new StageContext(Context, State);
		EnterRule(_localctx, 4, RULE_stage);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; Match(OPEN);
			State = 147; Match(T__2);
			State = 148;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__4))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 149; endcondition();
			State = 153;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 153;
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						State = 150; computermoves();
						}
						break;
					case 2:
						{
						State = 151; playermoves();
						}
						break;
					case 3:
						{
						State = 152; stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 155;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 157; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoringContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public ScoringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scoring; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterScoring(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitScoring(this);
		}
	}

	[RuleVersion(0)]
	public ScoringContext scoring() {
		ScoringContext _localctx = new ScoringContext(Context, State);
		EnterRule(_localctx, 6, RULE_scoring);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159; Match(OPEN);
			State = 160; Match(T__5);
			State = 161;
			_la = TokenStream.La(1);
			if ( !(_la==T__6 || _la==T__7) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 162; rawstorage();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndconditionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public EndconditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endcondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterEndcondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitEndcondition(this);
		}
	}

	[RuleVersion(0)]
	public EndconditionContext endcondition() {
		EndconditionContext _localctx = new EndconditionContext(Context, State);
		EnterRule(_localctx, 8, RULE_endcondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; Match(OPEN);
			State = 165; Match(T__8);
			State = 166; boolean();
			State = 167; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComputermovesContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public MultigameactionContext multigameaction() {
			return GetRuleContext<MultigameactionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ComputermovesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_computermoves; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterComputermoves(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitComputermoves(this);
		}
	}

	[RuleVersion(0)]
	public ComputermovesContext computermoves() {
		ComputermovesContext _localctx = new ComputermovesContext(Context, State);
		EnterRule(_localctx, 10, RULE_computermoves);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; Match(OPEN);
			State = 170; Match(T__9);
			State = 171; multigameaction();
			State = 172; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayermovesContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public MultigameactionContext multigameaction() {
			return GetRuleContext<MultigameactionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public PlayermovesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playermoves; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterPlayermoves(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitPlayermoves(this);
		}
	}

	[RuleVersion(0)]
	public PlayermovesContext playermoves() {
		PlayermovesContext _localctx = new PlayermovesContext(Context, State);
		EnterRule(_localctx, 12, RULE_playermoves);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; Match(OPEN);
			State = 175; Match(T__10);
			State = 176; multigameaction();
			State = 177; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultigameactionContext : ParserRuleContext {
		public GameactionContext[] gameaction() {
			return GetRuleContexts<GameactionContext>();
		}
		public GameactionContext gameaction(int i) {
			return GetRuleContext<GameactionContext>(i);
		}
		public MultigameactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multigameaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMultigameaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMultigameaction(this);
		}
	}

	[RuleVersion(0)]
	public MultigameactionContext multigameaction() {
		MultigameactionContext _localctx = new MultigameactionContext(Context, State);
		EnterRule(_localctx, 14, RULE_multigameaction);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 179; gameaction();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 182;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GameactionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public MultiactionContext multiaction() {
			return GetRuleContext<MultiactionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public GameactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gameaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterGameaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitGameaction(this);
		}
	}

	[RuleVersion(0)]
	public GameactionContext gameaction() {
		GameactionContext _localctx = new GameactionContext(Context, State);
		EnterRule(_localctx, 16, RULE_gameaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184; Match(OPEN);
			State = 185; boolean();
			State = 186; multiaction();
			State = 187; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiactionContext : ParserRuleContext {
		public ActionContext[] action() {
			return GetRuleContexts<ActionContext>();
		}
		public ActionContext action(int i) {
			return GetRuleContext<ActionContext>(i);
		}
		public MultiactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMultiaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMultiaction(this);
		}
	}

	[RuleVersion(0)]
	public MultiactionContext multiaction() {
		MultiactionContext _localctx = new MultiactionContext(Context, State);
		EnterRule(_localctx, 18, RULE_multiaction);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 189; action();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 192;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public InitpointsContext initpoints() {
			return GetRuleContext<InitpointsContext>(0);
		}
		public TeamcreateContext teamcreate() {
			return GetRuleContext<TeamcreateContext>(0);
		}
		public CycleactionContext cycleaction() {
			return GetRuleContext<CycleactionContext>(0);
		}
		public SetactionContext setaction() {
			return GetRuleContext<SetactionContext>(0);
		}
		public MoveactionContext moveaction() {
			return GetRuleContext<MoveactionContext>(0);
		}
		public CopyactionContext copyaction() {
			return GetRuleContext<CopyactionContext>(0);
		}
		public IncactionContext incaction() {
			return GetRuleContext<IncactionContext>(0);
		}
		public DecactionContext decaction() {
			return GetRuleContext<DecactionContext>(0);
		}
		public RemoveactionContext removeaction() {
			return GetRuleContext<RemoveactionContext>(0);
		}
		public TurnactionContext turnaction() {
			return GetRuleContext<TurnactionContext>(0);
		}
		public ShuffleactionContext shuffleaction() {
			return GetRuleContext<ShuffleactionContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 20, RULE_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194; Match(OPEN);
			State = 206;
			switch (TokenStream.La(1)) {
			case T__17:
				{
				State = 195; initpoints();
				}
				break;
			case T__11:
				{
				State = 196; teamcreate();
				}
				break;
			case T__19:
				{
				State = 197; cycleaction();
				}
				break;
			case T__23:
				{
				State = 198; setaction();
				}
				break;
			case T__26:
				{
				State = 199; moveaction();
				}
				break;
			case T__28:
				{
				State = 200; copyaction();
				}
				break;
			case T__24:
				{
				State = 201; incaction();
				}
				break;
			case T__25:
				{
				State = 202; decaction();
				}
				break;
			case T__29:
				{
				State = 203; removeaction();
				}
				break;
			case T__31:
				{
				State = 204; turnaction();
				}
				break;
			case T__30:
				{
				State = 205; shuffleaction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 208; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayercreateContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public PlayercreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playercreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterPlayercreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitPlayercreate(this);
		}
	}

	[RuleVersion(0)]
	public PlayercreateContext playercreate() {
		PlayercreateContext _localctx = new PlayercreateContext(Context, State);
		EnterRule(_localctx, 22, RULE_playercreate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210; Match(OPEN);
			State = 211; Match(T__11);
			State = 212; Match(T__12);
			State = 213; @int();
			State = 214; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamcreateContext : ParserRuleContext {
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public TeamcreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamcreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeamcreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeamcreate(this);
		}
	}

	[RuleVersion(0)]
	public TeamcreateContext teamcreate() {
		TeamcreateContext _localctx = new TeamcreateContext(Context, State);
		EnterRule(_localctx, 24, RULE_teamcreate);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; Match(T__11);
			State = 217; Match(T__13);
			State = 219;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 218; attribute();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 221;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckcreateContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public LocstorageContext locstorage() {
			return GetRuleContext<LocstorageContext>(0);
		}
		public DeckContext deck() {
			return GetRuleContext<DeckContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DeckcreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deckcreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeckcreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeckcreate(this);
		}
	}

	[RuleVersion(0)]
	public DeckcreateContext deckcreate() {
		DeckcreateContext _localctx = new DeckcreateContext(Context, State);
		EnterRule(_localctx, 26, RULE_deckcreate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223; Match(OPEN);
			State = 224; Match(T__11);
			State = 225; Match(T__14);
			State = 226; locstorage();
			State = 227; deck();
			State = 228; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public DeckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deck; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeck(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeck(this);
		}
	}

	[RuleVersion(0)]
	public DeckContext deck() {
		DeckContext _localctx = new DeckContext(Context, State);
		EnterRule(_localctx, 28, RULE_deck);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 230; Match(OPEN);
			State = 231; Match(T__15);
			State = 233;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 232; attribute();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 235;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 237; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public TrueanyContext[] trueany() {
			return GetRuleContexts<TrueanyContext>();
		}
		public TrueanyContext trueany(int i) {
			return GetRuleContext<TrueanyContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 30, RULE_attribute);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 239; Match(OPEN);
			State = 245;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 240; trueany();
					State = 241; Match(T__16);
					}
					} 
				}
				State = 247;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			State = 248; trueany();
			State = 252;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 249; attribute();
					}
					} 
				}
				State = 254;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			State = 255; Match(CLOSE);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitpointsContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AwardsContext[] awards() {
			return GetRuleContexts<AwardsContext>();
		}
		public AwardsContext awards(int i) {
			return GetRuleContext<AwardsContext>(i);
		}
		public InitpointsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initpoints; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterInitpoints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitInitpoints(this);
		}
	}

	[RuleVersion(0)]
	public InitpointsContext initpoints() {
		InitpointsContext _localctx = new InitpointsContext(Context, State);
		EnterRule(_localctx, 32, RULE_initpoints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; Match(T__17);
			State = 258; Match(T__18);
			State = 259; name();
			State = 260; Match(OPEN);
			State = 262;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 261; awards();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 264;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 266; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwardsContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public PosqContext posq() {
			return GetRuleContext<PosqContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubawardContext[] subaward() {
			return GetRuleContexts<SubawardContext>();
		}
		public SubawardContext subaward(int i) {
			return GetRuleContext<SubawardContext>(i);
		}
		public AwardsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awards; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAwards(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAwards(this);
		}
	}

	[RuleVersion(0)]
	public AwardsContext awards() {
		AwardsContext _localctx = new AwardsContext(Context, State);
		EnterRule(_localctx, 34, RULE_awards);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 268; Match(OPEN);
			State = 269; posq();
			State = 271;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 270; subaward();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 273;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 275; @int();
			State = 276; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubawardContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public TrueanyContext trueany() {
			return GetRuleContext<TrueanyContext>(0);
		}
		public CardattContext cardatt() {
			return GetRuleContext<CardattContext>(0);
		}
		public SubawardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subaward; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSubaward(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSubaward(this);
		}
	}

	[RuleVersion(0)]
	public SubawardContext subaward() {
		SubawardContext _localctx = new SubawardContext(Context, State);
		EnterRule(_localctx, 36, RULE_subaward);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278; Match(OPEN);
			State = 279; name();
			State = 285;
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				{
				State = 280; Match(OPEN);
				State = 281; trueany();
				State = 282; Match(CLOSE);
				}
				}
				break;
			case 2:
				{
				{
				State = 284; cardatt();
				}
				}
				break;
			}
			State = 287; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CycleactionContext : ParserRuleContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CycleactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cycleaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCycleaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCycleaction(this);
		}
	}

	[RuleVersion(0)]
	public CycleactionContext cycleaction() {
		CycleactionContext _localctx = new CycleactionContext(Context, State);
		EnterRule(_localctx, 38, RULE_cycleaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289; Match(T__19);
			State = 290;
			_la = TokenStream.La(1);
			if ( !(_la==T__20 || _la==T__21) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 295;
			switch (TokenStream.La(1)) {
			case INTNUM:
			case OPEN:
				{
				State = 291; @int();
				}
				break;
			case T__21:
				{
				State = 292; Match(T__21);
				}
				break;
			case T__20:
				{
				State = 293; Match(T__20);
				}
				break;
			case T__22:
				{
				State = 294; Match(T__22);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public SetactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSetaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSetaction(this);
		}
	}

	[RuleVersion(0)]
	public SetactionContext setaction() {
		SetactionContext _localctx = new SetactionContext(Context, State);
		EnterRule(_localctx, 40, RULE_setaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297; Match(T__23);
			State = 298; rawstorage();
			State = 299; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public IncactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterIncaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitIncaction(this);
		}
	}

	[RuleVersion(0)]
	public IncactionContext incaction() {
		IncactionContext _localctx = new IncactionContext(Context, State);
		EnterRule(_localctx, 42, RULE_incaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301; Match(T__24);
			State = 302; rawstorage();
			State = 303; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public DecactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDecaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDecaction(this);
		}
	}

	[RuleVersion(0)]
	public DecactionContext decaction() {
		DecactionContext _localctx = new DecactionContext(Context, State);
		EnterRule(_localctx, 44, RULE_decaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305; Match(T__25);
			State = 306; rawstorage();
			State = 307; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveactionContext : ParserRuleContext {
		public CardpContext[] cardp() {
			return GetRuleContexts<CardpContext>();
		}
		public CardpContext cardp(int i) {
			return GetRuleContext<CardpContext>(i);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public MoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMoveaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMoveaction(this);
		}
	}

	[RuleVersion(0)]
	public MoveactionContext moveaction() {
		MoveactionContext _localctx = new MoveactionContext(Context, State);
		EnterRule(_localctx, 46, RULE_moveaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309; Match(T__26);
			State = 310; cardp();
			State = 311; cardp();
			State = 314;
			switch (TokenStream.La(1)) {
			case INTNUM:
			case OPEN:
				{
				State = 312; @int();
				}
				break;
			case T__27:
				{
				State = 313; Match(T__27);
				}
				break;
			case CLOSE:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyactionContext : ParserRuleContext {
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public CardmContext cardm() {
			return GetRuleContext<CardmContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CopyactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCopyaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCopyaction(this);
		}
	}

	[RuleVersion(0)]
	public CopyactionContext copyaction() {
		CopyactionContext _localctx = new CopyactionContext(Context, State);
		EnterRule(_localctx, 48, RULE_copyaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316; Match(T__28);
			State = 317; card();
			State = 318; cardm();
			State = 321;
			switch (TokenStream.La(1)) {
			case INTNUM:
			case OPEN:
				{
				State = 319; @int();
				}
				break;
			case T__27:
				{
				State = 320; Match(T__27);
				}
				break;
			case CLOSE:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveactionContext : ParserRuleContext {
		public CardmContext cardm() {
			return GetRuleContext<CardmContext>(0);
		}
		public RemoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRemoveaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRemoveaction(this);
		}
	}

	[RuleVersion(0)]
	public RemoveactionContext removeaction() {
		RemoveactionContext _localctx = new RemoveactionContext(Context, State);
		EnterRule(_localctx, 50, RULE_removeaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323; Match(T__29);
			State = 324; cardm();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShuffleactionContext : ParserRuleContext {
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public ShuffleactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shuffleaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterShuffleaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitShuffleaction(this);
		}
	}

	[RuleVersion(0)]
	public ShuffleactionContext shuffleaction() {
		ShuffleactionContext _localctx = new ShuffleactionContext(Context, State);
		EnterRule(_localctx, 52, RULE_shuffleaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326; Match(T__30);
			State = 327; cstorage();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TurnactionContext : ParserRuleContext {
		public TurnactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_turnaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTurnaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTurnaction(this);
		}
	}

	[RuleVersion(0)]
	public TurnactionContext turnaction() {
		TurnactionContext _localctx = new TurnactionContext(Context, State);
		EnterRule(_localctx, 54, RULE_turnaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329; Match(T__31);
			State = 330; Match(T__32);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardContext : ParserRuleContext {
		public MaxofContext maxof() {
			return GetRuleContext<MaxofContext>(0);
		}
		public CardpContext cardp() {
			return GetRuleContext<CardpContext>(0);
		}
		public CardmContext cardm() {
			return GetRuleContext<CardmContext>(0);
		}
		public CardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_card; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCard(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCard(this);
		}
	}

	[RuleVersion(0)]
	public CardContext card() {
		CardContext _localctx = new CardContext(Context, State);
		EnterRule(_localctx, 56, RULE_card);
		try {
			State = 337;
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 332; maxof();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 335;
				switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
				case 1:
					{
					State = 333; cardp();
					}
					break;
				case 2:
					{
					State = 334; cardm();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardpContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public LocstorageContext locstorage() {
			return GetRuleContext<LocstorageContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CardpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cardp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCardp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCardp(this);
		}
	}

	[RuleVersion(0)]
	public CardpContext cardp() {
		CardpContext _localctx = new CardpContext(Context, State);
		EnterRule(_localctx, 58, RULE_cardp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 339; Match(OPEN);
			State = 344;
			switch (TokenStream.La(1)) {
			case T__33:
				{
				State = 340; Match(T__33);
				}
				break;
			case T__34:
				{
				State = 341; Match(T__34);
				}
				break;
			case INTNUM:
			case OPEN:
				{
				State = 342; @int();
				}
				break;
			case T__35:
				{
				State = 343; Match(T__35);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 346; locstorage();
			State = 347; Match(CLOSE);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardmContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public MemstorageContext memstorage() {
			return GetRuleContext<MemstorageContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CardmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cardm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCardm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCardm(this);
		}
	}

	[RuleVersion(0)]
	public CardmContext cardm() {
		CardmContext _localctx = new CardmContext(Context, State);
		EnterRule(_localctx, 60, RULE_cardm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 349; Match(OPEN);
			State = 354;
			switch (TokenStream.La(1)) {
			case T__33:
				{
				State = 350; Match(T__33);
				}
				break;
			case T__34:
				{
				State = 351; Match(T__34);
				}
				break;
			case INTNUM:
			case OPEN:
				{
				State = 352; @int();
				}
				break;
			case T__35:
				{
				State = 353; Match(T__35);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 356; memstorage();
			State = 357; Match(CLOSE);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OwnerContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OwnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_owner; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterOwner(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitOwner(this);
		}
	}

	[RuleVersion(0)]
	public OwnerContext owner() {
		OwnerContext _localctx = new OwnerContext(Context, State);
		EnterRule(_localctx, 62, RULE_owner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359; Match(OPEN);
			State = 360; Match(T__36);
			State = 361; card();
			State = 362; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RawstorageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public Who2Context who2() {
			return GetRuleContext<Who2Context>(0);
		}
		public RawstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rawstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRawstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRawstorage(this);
		}
	}

	[RuleVersion(0)]
	public RawstorageContext rawstorage() {
		RawstorageContext _localctx = new RawstorageContext(Context, State);
		EnterRule(_localctx, 64, RULE_rawstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364; Match(OPEN);
			State = 367;
			switch (TokenStream.La(1)) {
			case T__0:
				{
				State = 365; who();
				}
				break;
			case OPEN:
				{
				State = 366; who2();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 369; Match(T__37);
			State = 370; namegr();
			State = 371; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CstorageContext : ParserRuleContext {
		public UnionofContext unionof() {
			return GetRuleContext<UnionofContext>(0);
		}
		public LocstorageContext locstorage() {
			return GetRuleContext<LocstorageContext>(0);
		}
		public MemstorageContext memstorage() {
			return GetRuleContext<MemstorageContext>(0);
		}
		public CstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCstorage(this);
		}
	}

	[RuleVersion(0)]
	public CstorageContext cstorage() {
		CstorageContext _localctx = new CstorageContext(Context, State);
		EnterRule(_localctx, 66, RULE_cstorage);
		try {
			State = 378;
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 373; unionof();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 376;
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 374; locstorage();
					}
					break;
				case 2:
					{
					State = 375; memstorage();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocstorageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public LocpreContext locpre() {
			return GetRuleContext<LocpreContext>(0);
		}
		public LocpostContext locpost() {
			return GetRuleContext<LocpostContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public LocstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLocstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLocstorage(this);
		}
	}

	[RuleVersion(0)]
	public LocstorageContext locstorage() {
		LocstorageContext _localctx = new LocstorageContext(Context, State);
		EnterRule(_localctx, 68, RULE_locstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380; Match(OPEN);
			State = 381; locpre();
			State = 382; Match(T__38);
			State = 383; locpost();
			State = 384; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemstorageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public LocpreContext locpre() {
			return GetRuleContext<LocpreContext>(0);
		}
		public LocpostContext locpost() {
			return GetRuleContext<LocpostContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MemstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMemstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMemstorage(this);
		}
	}

	[RuleVersion(0)]
	public MemstorageContext memstorage() {
		MemstorageContext _localctx = new MemstorageContext(Context, State);
		EnterRule(_localctx, 70, RULE_memstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386; Match(OPEN);
			State = 387; locpre();
			State = 388; Match(T__39);
			State = 389; locpost();
			State = 390; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocpreContext : ParserRuleContext {
		public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public Who2Context who2() {
			return GetRuleContext<Who2Context>(0);
		}
		public LocpreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locpre; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLocpre(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLocpre(this);
		}
	}

	[RuleVersion(0)]
	public LocpreContext locpre() {
		LocpreContext _localctx = new LocpreContext(Context, State);
		EnterRule(_localctx, 72, RULE_locpre);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			switch (TokenStream.La(1)) {
			case T__0:
				{
				State = 392; who();
				}
				break;
			case OPEN:
				{
				State = 393; who2();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocpostContext : ParserRuleContext {
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public WhereclauseContext whereclause() {
			return GetRuleContext<WhereclauseContext>(0);
		}
		public LocpostContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locpost; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLocpost(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLocpost(this);
		}
	}

	[RuleVersion(0)]
	public LocpostContext locpost() {
		LocpostContext _localctx = new LocpostContext(Context, State);
		EnterRule(_localctx, 74, RULE_locpost);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396; namegr();
			State = 398;
			_la = TokenStream.La(1);
			if (_la==T__40) {
				{
				State = 397; whereclause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhoContext : ParserRuleContext {
		public WhoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_who; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWho(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWho(this);
		}
	}

	[RuleVersion(0)]
	public WhoContext who() {
		WhoContext _localctx = new WhoContext(Context, State);
		EnterRule(_localctx, 76, RULE_who);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Who2Context : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public PosqContext posq() {
			return GetRuleContext<PosqContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public Who2Context who2() {
			return GetRuleContext<Who2Context>(0);
		}
		public Who2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_who2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWho2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWho2(this);
		}
	}

	[RuleVersion(0)]
	public Who2Context who2() {
		Who2Context _localctx = new Who2Context(Context, State);
		EnterRule(_localctx, 78, RULE_who2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402; Match(OPEN);
			State = 409;
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 403; posq();
				}
				break;
			case 2:
				{
				State = 404; @int();
				}
				break;
			case 3:
				{
				State = 405; Match(T__22);
				}
				break;
			case 4:
				{
				State = 406; Match(T__20);
				}
				break;
			case 5:
				{
				State = 407; Match(T__21);
				}
				break;
			case 6:
				{
				State = 408; who2();
				}
				break;
			}
			State = 411;
			_la = TokenStream.La(1);
			if ( !(_la==T__3 || _la==T__4) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 412; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrueanyContext : ParserRuleContext {
		public ITerminalNode[] ANY() { return GetTokens(RecycleParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(RecycleParser.ANY, i);
		}
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode[] BOOLOP() { return GetTokens(RecycleParser.BOOLOP); }
		public ITerminalNode BOOLOP(int i) {
			return GetToken(RecycleParser.BOOLOP, i);
		}
		public TrueanyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trueany; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTrueany(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTrueany(this);
		}
	}

	[RuleVersion(0)]
	public TrueanyContext trueany() {
		TrueanyContext _localctx = new TrueanyContext(Context, State);
		EnterRule(_localctx, 80, RULE_trueany);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 417;
					switch (TokenStream.La(1)) {
					case ANY:
						{
						State = 414; Match(ANY);
						}
						break;
					case INTNUM:
					case OPEN:
						{
						State = 415; @int();
						}
						break;
					case BOOLOP:
						{
						State = 416; Match(BOOLOP);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 419;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereclauseContext : ParserRuleContext {
		public BoolattContext boolatt() {
			return GetRuleContext<BoolattContext>(0);
		}
		public WhereclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereclause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhereclause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhereclause(this);
		}
	}

	[RuleVersion(0)]
	public WhereclauseContext whereclause() {
		WhereclauseContext _localctx = new WhereclauseContext(Context, State);
		EnterRule(_localctx, 82, RULE_whereclause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421; Match(T__40);
			State = 422; boolatt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolattContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public AttrcompContext attrcomp() {
			return GetRuleContext<AttrcompContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public BoolattContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolatt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterBoolatt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitBoolatt(this);
		}
	}

	[RuleVersion(0)]
	public BoolattContext boolatt() {
		BoolattContext _localctx = new BoolattContext(Context, State);
		EnterRule(_localctx, 84, RULE_boolatt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424; Match(OPEN);
			State = 425; attrcomp();
			State = 426; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrcompContext : ParserRuleContext {
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public CardattContext[] cardatt() {
			return GetRuleContexts<CardattContext>();
		}
		public CardattContext cardatt(int i) {
			return GetRuleContext<CardattContext>(i);
		}
		public AttrcompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrcomp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAttrcomp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAttrcomp(this);
		}
	}

	[RuleVersion(0)]
	public AttrcompContext attrcomp() {
		AttrcompContext _localctx = new AttrcompContext(Context, State);
		EnterRule(_localctx, 86, RULE_attrcomp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428; Match(EQOP);
			State = 429; cardatt();
			State = 430; cardatt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardattContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public CardattContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cardatt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCardatt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCardatt(this);
		}
	}

	[RuleVersion(0)]
	public CardattContext cardatt() {
		CardattContext _localctx = new CardattContext(Context, State);
		EnterRule(_localctx, 88, RULE_cardatt);
		try {
			State = 442;
			switch (TokenStream.La(1)) {
			case ANY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 432; name();
				}
				break;
			case OPEN:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 433; Match(OPEN);
				State = 434; Match(T__41);
				State = 435; name();
				State = 438;
				switch (TokenStream.La(1)) {
				case T__42:
					{
					State = 436; Match(T__42);
					}
					break;
				case OPEN:
					{
					State = 437; card();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 440; Match(CLOSE);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PosqContext : ParserRuleContext {
		public PosqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_posq; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterPosq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitPosq(this);
		}
	}

	[RuleVersion(0)]
	public PosqContext posq() {
		PosqContext _localctx = new PosqContext(Context, State);
		EnterRule(_localctx, 90, RULE_posq);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			_la = TokenStream.La(1);
			if ( !(_la==T__27 || _la==T__35) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AttrcompContext attrcomp() {
			return GetRuleContext<AttrcompContext>(0);
		}
		public ITerminalNode BOOLOP() { return GetToken(RecycleParser.BOOLOP, 0); }
		public BooleanContext[] boolean() {
			return GetRuleContexts<BooleanContext>();
		}
		public BooleanContext boolean(int i) {
			return GetRuleContext<BooleanContext>(i);
		}
		public IntopContext intop() {
			return GetRuleContext<IntopContext>(0);
		}
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode UNOP() { return GetToken(RecycleParser.UNOP, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 92, RULE_boolean);
		try {
			int _alt;
			State = 467;
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 446; Match(OPEN);
				State = 461;
				switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
				case 1:
					{
					{
					State = 447; Match(BOOLOP);
					State = 448; boolean();
					State = 450;
					ErrorHandler.Sync(this);
					_alt = 1+1;
					do {
						switch (_alt) {
						case 1+1:
							{
							{
							State = 449; boolean();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 452;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
					} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					}
					break;
				case 2:
					{
					State = 454; attrcomp();
					}
					break;
				case 3:
					{
					{
					State = 455; intop();
					State = 456; @int();
					State = 457; @int();
					}
					}
					break;
				case 4:
					{
					{
					State = 459; Match(UNOP);
					State = 460; boolean();
					}
					}
					break;
				}
				State = 463; Match(CLOSE);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 465; Match(OPEN);
				State = 466; Match(CLOSE);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntopContext : ParserRuleContext {
		public ITerminalNode COMPOP() { return GetToken(RecycleParser.COMPOP, 0); }
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public IntopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterIntop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitIntop(this);
		}
	}

	[RuleVersion(0)]
	public IntopContext intop() {
		IntopContext _localctx = new IntopContext(Context, State);
		EnterRule(_localctx, 94, RULE_intop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469;
			_la = TokenStream.La(1);
			if ( !(_la==COMPOP || _la==EQOP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
	}

	[RuleVersion(0)]
	public AddContext add() {
		AddContext _localctx = new AddContext(Context, State);
		EnterRule(_localctx, 96, RULE_add);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471; Match(OPEN);
			State = 472; Match(T__43);
			State = 473; @int();
			State = 474; @int();
			State = 475; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMult(this);
		}
	}

	[RuleVersion(0)]
	public MultContext mult() {
		MultContext _localctx = new MultContext(Context, State);
		EnterRule(_localctx, 98, RULE_mult);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477; Match(OPEN);
			State = 478; Match(T__44);
			State = 479; @int();
			State = 480; @int();
			State = 481; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtractContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubtractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtract; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSubtract(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSubtract(this);
		}
	}

	[RuleVersion(0)]
	public SubtractContext subtract() {
		SubtractContext _localctx = new SubtractContext(Context, State);
		EnterRule(_localctx, 100, RULE_subtract);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483; Match(OPEN);
			State = 484; Match(T__45);
			State = 485; @int();
			State = 486; @int();
			State = 487; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMod(this);
		}
	}

	[RuleVersion(0)]
	public ModContext mod() {
		ModContext _localctx = new ModContext(Context, State);
		EnterRule(_localctx, 102, RULE_mod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489; Match(OPEN);
			State = 490; Match(T__46);
			State = 491; @int();
			State = 492; @int();
			State = 493; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivideContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divide; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDivide(this);
		}
	}

	[RuleVersion(0)]
	public DivideContext divide() {
		DivideContext _localctx = new DivideContext(Context, State);
		EnterRule(_localctx, 104, RULE_divide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495; Match(OPEN);
			State = 496; Match(T__47);
			State = 497; @int();
			State = 498; @int();
			State = 499; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SizeofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSizeof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSizeof(this);
		}
	}

	[RuleVersion(0)]
	public SizeofContext @sizeof() {
		SizeofContext _localctx = new SizeofContext(Context, State);
		EnterRule(_localctx, 106, RULE_sizeof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501; Match(OPEN);
			State = 502; Match(T__48);
			State = 503; cstorage();
			State = 504; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaxofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MaxofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMaxof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMaxof(this);
		}
	}

	[RuleVersion(0)]
	public MaxofContext maxof() {
		MaxofContext _localctx = new MaxofContext(Context, State);
		EnterRule(_localctx, 108, RULE_maxof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 506; Match(OPEN);
			State = 507; Match(T__7);
			State = 508; cstorage();
			State = 509; Match(T__49);
			State = 510; namegr();
			State = 511; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public CstorageContext[] cstorage() {
			return GetRuleContexts<CstorageContext>();
		}
		public CstorageContext cstorage(int i) {
			return GetRuleContext<CstorageContext>(i);
		}
		public UnionofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterUnionof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitUnionof(this);
		}
	}

	[RuleVersion(0)]
	public UnionofContext unionof() {
		UnionofContext _localctx = new UnionofContext(Context, State);
		EnterRule(_localctx, 110, RULE_unionof);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 513; Match(OPEN);
			State = 514; Match(T__50);
			State = 516;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 515; cstorage();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 518;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 520; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public SumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSum(this);
		}
	}

	[RuleVersion(0)]
	public SumContext sum() {
		SumContext _localctx = new SumContext(Context, State);
		EnterRule(_localctx, 112, RULE_sum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 522; Match(OPEN);
			State = 523; Match(T__51);
			State = 529;
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 524; rawstorage();
				}
				break;
			case 2:
				{
				{
				State = 525; cstorage();
				State = 526; Match(T__49);
				State = 527; namegr();
				}
				}
				break;
			}
			State = 531; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		public OwnerContext owner() {
			return GetRuleContext<OwnerContext>(0);
		}
		public SizeofContext @sizeof() {
			return GetRuleContext<SizeofContext>(0);
		}
		public MultContext mult() {
			return GetRuleContext<MultContext>(0);
		}
		public SubtractContext subtract() {
			return GetRuleContext<SubtractContext>(0);
		}
		public ModContext mod() {
			return GetRuleContext<ModContext>(0);
		}
		public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public ITerminalNode[] INTNUM() { return GetTokens(RecycleParser.INTNUM); }
		public ITerminalNode INTNUM(int i) {
			return GetToken(RecycleParser.INTNUM, i);
		}
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 114, RULE_int);
		try {
			int _alt;
			State = 546;
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 533; owner();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 534; @sizeof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 535; mult();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 536; subtract();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 537; mod();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 538; divide();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 539; sum();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 540; rawstorage();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 542;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 541; Match(INTNUM);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 544;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamegrContext : ParserRuleContext {
		public ITerminalNode[] ANY() { return GetTokens(RecycleParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(RecycleParser.ANY, i);
		}
		public NamegrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namegr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterNamegr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitNamegr(this);
		}
	}

	[RuleVersion(0)]
	public NamegrContext namegr() {
		NamegrContext _localctx = new NamegrContext(Context, State);
		EnterRule(_localctx, 116, RULE_namegr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 548; Match(ANY);
				}
				}
				State = 551;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==ANY );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode[] ANY() { return GetTokens(RecycleParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(RecycleParser.ANY, i);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 118, RULE_name);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 554;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 553; Match(ANY);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 556;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3?\x231\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x3\x2\x3\x2\x3"+
		"\x2\x3\x2\x3\x2\x3\x2\x6\x2\x81\n\x2\r\x2\xE\x2\x82\x3\x2\x3\x2\x3\x2"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x6\x3\x8F\n\x3\r\x3\xE\x3\x90"+
		"\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x6\x4\x9C\n\x4"+
		"\r\x4\xE\x4\x9D\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\t\x6\t\xB7\n\t\r\t\xE\t\xB8\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x6\v\xC1\n"+
		"\v\r\v\xE\v\xC2\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f"+
		"\x3\f\x5\f\xD1\n\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE"+
		"\x3\xE\x6\xE\xDE\n\xE\r\xE\xE\xE\xDF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\x10\x3\x10\x3\x10\x6\x10\xEC\n\x10\r\x10\xE\x10\xED\x3\x10"+
		"\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\a\x11\xF6\n\x11\f\x11\xE\x11\xF9\v"+
		"\x11\x3\x11\x3\x11\a\x11\xFD\n\x11\f\x11\xE\x11\x100\v\x11\x3\x11\x3\x11"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x6\x12\x109\n\x12\r\x12\xE\x12\x10A"+
		"\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x6\x13\x112\n\x13\r\x13\xE\x13\x113"+
		"\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x5\x14\x120\n\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x5\x15\x12A\n\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19"+
		"\x5\x19\x13D\n\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x144\n\x1A"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1E"+
		"\x3\x1E\x3\x1E\x5\x1E\x152\n\x1E\x5\x1E\x154\n\x1E\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x5\x1F\x15B\n\x1F\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3 "+
		"\x3 \x5 \x165\n \x3 \x3 \x3 \x3!\x3!\x3!\x3!\x3!\x3\"\x3\"\x3\"\x5\"\x172"+
		"\n\"\x3\"\x3\"\x3\"\x3\"\x3#\x3#\x3#\x5#\x17B\n#\x5#\x17D\n#\x3$\x3$\x3"+
		"$\x3$\x3$\x3$\x3%\x3%\x3%\x3%\x3%\x3%\x3&\x3&\x5&\x18D\n&\x3\'\x3\'\x5"+
		"\'\x191\n\'\x3(\x3(\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x5)\x19C\n)\x3)\x3)\x3"+
		")\x3*\x3*\x3*\x6*\x1A4\n*\r*\xE*\x1A5\x3+\x3+\x3+\x3,\x3,\x3,\x3,\x3-"+
		"\x3-\x3-\x3-\x3.\x3.\x3.\x3.\x3.\x3.\x5.\x1B9\n.\x3.\x3.\x5.\x1BD\n.\x3"+
		"/\x3/\x3\x30\x3\x30\x3\x30\x3\x30\x6\x30\x1C5\n\x30\r\x30\xE\x30\x1C6"+
		"\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30\x1D0\n\x30\x3"+
		"\x30\x3\x30\x3\x30\x3\x30\x5\x30\x1D6\n\x30\x3\x31\x3\x31\x3\x32\x3\x32"+
		"\x3\x32\x3\x32\x3\x32\x3\x32\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33"+
		"\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x35\x3\x35\x3\x35\x3\x35"+
		"\x3\x35\x3\x35\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x37\x3\x37"+
		"\x3\x37\x3\x37\x3\x37\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38"+
		"\x3\x39\x3\x39\x3\x39\x6\x39\x207\n\x39\r\x39\xE\x39\x208\x3\x39\x3\x39"+
		"\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x5:\x214\n:\x3:\x3:\x3;\x3;\x3;\x3;\x3;\x3"+
		";\x3;\x3;\x3;\x6;\x221\n;\r;\xE;\x222\x5;\x225\n;\x3<\x6<\x228\n<\r<\xE"+
		"<\x229\x3=\x6=\x22D\n=\r=\xE=\x22E\x3=\x11\x82\x90\x9D\xB8\xC2\xDF\xED"+
		"\xF7\xFE\x10A\x113\x1A5\x1C6\x208\x22E\x2>\x2\x4\x6\b\n\f\xE\x10\x12\x14"+
		"\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLN"+
		"PRTVXZ\\^`\x62\x64\x66hjlnprtvx\x2\b\x4\x2\x3\x3\x6\a\x3\x2\t\n\x3\x2"+
		"\x17\x18\x3\x2\x6\a\x4\x2\x1E\x1E&&\x3\x2\x38\x39\x23E\x2z\x3\x2\x2\x2"+
		"\x4\x87\x3\x2\x2\x2\x6\x94\x3\x2\x2\x2\b\xA1\x3\x2\x2\x2\n\xA6\x3\x2\x2"+
		"\x2\f\xAB\x3\x2\x2\x2\xE\xB0\x3\x2\x2\x2\x10\xB6\x3\x2\x2\x2\x12\xBA\x3"+
		"\x2\x2\x2\x14\xC0\x3\x2\x2\x2\x16\xC4\x3\x2\x2\x2\x18\xD4\x3\x2\x2\x2"+
		"\x1A\xDA\x3\x2\x2\x2\x1C\xE1\x3\x2\x2\x2\x1E\xE8\x3\x2\x2\x2 \xF1\x3\x2"+
		"\x2\x2\"\x103\x3\x2\x2\x2$\x10E\x3\x2\x2\x2&\x118\x3\x2\x2\x2(\x123\x3"+
		"\x2\x2\x2*\x12B\x3\x2\x2\x2,\x12F\x3\x2\x2\x2.\x133\x3\x2\x2\x2\x30\x137"+
		"\x3\x2\x2\x2\x32\x13E\x3\x2\x2\x2\x34\x145\x3\x2\x2\x2\x36\x148\x3\x2"+
		"\x2\x2\x38\x14B\x3\x2\x2\x2:\x153\x3\x2\x2\x2<\x155\x3\x2\x2\x2>\x15F"+
		"\x3\x2\x2\x2@\x169\x3\x2\x2\x2\x42\x16E\x3\x2\x2\x2\x44\x17C\x3\x2\x2"+
		"\x2\x46\x17E\x3\x2\x2\x2H\x184\x3\x2\x2\x2J\x18C\x3\x2\x2\x2L\x18E\x3"+
		"\x2\x2\x2N\x192\x3\x2\x2\x2P\x194\x3\x2\x2\x2R\x1A3\x3\x2\x2\x2T\x1A7"+
		"\x3\x2\x2\x2V\x1AA\x3\x2\x2\x2X\x1AE\x3\x2\x2\x2Z\x1BC\x3\x2\x2\x2\\\x1BE"+
		"\x3\x2\x2\x2^\x1D5\x3\x2\x2\x2`\x1D7\x3\x2\x2\x2\x62\x1D9\x3\x2\x2\x2"+
		"\x64\x1DF\x3\x2\x2\x2\x66\x1E5\x3\x2\x2\x2h\x1EB\x3\x2\x2\x2j\x1F1\x3"+
		"\x2\x2\x2l\x1F7\x3\x2\x2\x2n\x1FC\x3\x2\x2\x2p\x203\x3\x2\x2\x2r\x20C"+
		"\x3\x2\x2\x2t\x224\x3\x2\x2\x2v\x227\x3\x2\x2\x2x\x22C\x3\x2\x2\x2z{\a"+
		"<\x2\x2{|\a\x3\x2\x2|\x80\x5\x4\x3\x2}\x81\x5\f\a\x2~\x81\x5\xE\b\x2\x7F"+
		"\x81\x5\x6\x4\x2\x80}\x3\x2\x2\x2\x80~\x3\x2\x2\x2\x80\x7F\x3\x2\x2\x2"+
		"\x81\x82\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x82\x80\x3\x2\x2\x2\x83\x84\x3"+
		"\x2\x2\x2\x84\x85\x5\b\x5\x2\x85\x86\a=\x2\x2\x86\x3\x3\x2\x2\x2\x87\x88"+
		"\a<\x2\x2\x88\x89\a\x4\x2\x2\x89\x8A\x5\x18\r\x2\x8A\x8B\a<\x2\x2\x8B"+
		"\x8C\x5\x1A\xE\x2\x8C\x8E\a=\x2\x2\x8D\x8F\x5\x1C\xF\x2\x8E\x8D\x3\x2"+
		"\x2\x2\x8F\x90\x3\x2\x2\x2\x90\x91\x3\x2\x2\x2\x90\x8E\x3\x2\x2\x2\x91"+
		"\x92\x3\x2\x2\x2\x92\x93\a=\x2\x2\x93\x5\x3\x2\x2\x2\x94\x95\a<\x2\x2"+
		"\x95\x96\a\x5\x2\x2\x96\x97\t\x2\x2\x2\x97\x9B\x5\n\x6\x2\x98\x9C\x5\f"+
		"\a\x2\x99\x9C\x5\xE\b\x2\x9A\x9C\x5\x6\x4\x2\x9B\x98\x3\x2\x2\x2\x9B\x99"+
		"\x3\x2\x2\x2\x9B\x9A\x3\x2\x2\x2\x9C\x9D\x3\x2\x2\x2\x9D\x9E\x3\x2\x2"+
		"\x2\x9D\x9B\x3\x2\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F\xA0\a=\x2\x2\xA0\a\x3"+
		"\x2\x2\x2\xA1\xA2\a<\x2\x2\xA2\xA3\a\b\x2\x2\xA3\xA4\t\x3\x2\x2\xA4\xA5"+
		"\x5\x42\"\x2\xA5\t\x3\x2\x2\x2\xA6\xA7\a<\x2\x2\xA7\xA8\a\v\x2\x2\xA8"+
		"\xA9\x5^\x30\x2\xA9\xAA\a=\x2\x2\xAA\v\x3\x2\x2\x2\xAB\xAC\a<\x2\x2\xAC"+
		"\xAD\a\f\x2\x2\xAD\xAE\x5\x10\t\x2\xAE\xAF\a=\x2\x2\xAF\r\x3\x2\x2\x2"+
		"\xB0\xB1\a<\x2\x2\xB1\xB2\a\r\x2\x2\xB2\xB3\x5\x10\t\x2\xB3\xB4\a=\x2"+
		"\x2\xB4\xF\x3\x2\x2\x2\xB5\xB7\x5\x12\n\x2\xB6\xB5\x3\x2\x2\x2\xB7\xB8"+
		"\x3\x2\x2\x2\xB8\xB9\x3\x2\x2\x2\xB8\xB6\x3\x2\x2\x2\xB9\x11\x3\x2\x2"+
		"\x2\xBA\xBB\a<\x2\x2\xBB\xBC\x5^\x30\x2\xBC\xBD\x5\x14\v\x2\xBD\xBE\a"+
		"=\x2\x2\xBE\x13\x3\x2\x2\x2\xBF\xC1\x5\x16\f\x2\xC0\xBF\x3\x2\x2\x2\xC1"+
		"\xC2\x3\x2\x2\x2\xC2\xC3\x3\x2\x2\x2\xC2\xC0\x3\x2\x2\x2\xC3\x15\x3\x2"+
		"\x2\x2\xC4\xD0\a<\x2\x2\xC5\xD1\x5\"\x12\x2\xC6\xD1\x5\x1A\xE\x2\xC7\xD1"+
		"\x5(\x15\x2\xC8\xD1\x5*\x16\x2\xC9\xD1\x5\x30\x19\x2\xCA\xD1\x5\x32\x1A"+
		"\x2\xCB\xD1\x5,\x17\x2\xCC\xD1\x5.\x18\x2\xCD\xD1\x5\x34\x1B\x2\xCE\xD1"+
		"\x5\x38\x1D\x2\xCF\xD1\x5\x36\x1C\x2\xD0\xC5\x3\x2\x2\x2\xD0\xC6\x3\x2"+
		"\x2\x2\xD0\xC7\x3\x2\x2\x2\xD0\xC8\x3\x2\x2\x2\xD0\xC9\x3\x2\x2\x2\xD0"+
		"\xCA\x3\x2\x2\x2\xD0\xCB\x3\x2\x2\x2\xD0\xCC\x3\x2\x2\x2\xD0\xCD\x3\x2"+
		"\x2\x2\xD0\xCE\x3\x2\x2\x2\xD0\xCF\x3\x2\x2\x2\xD1\xD2\x3\x2\x2\x2\xD2"+
		"\xD3\a=\x2\x2\xD3\x17\x3\x2\x2\x2\xD4\xD5\a<\x2\x2\xD5\xD6\a\xE\x2\x2"+
		"\xD6\xD7\a\xF\x2\x2\xD7\xD8\x5t;\x2\xD8\xD9\a=\x2\x2\xD9\x19\x3\x2\x2"+
		"\x2\xDA\xDB\a\xE\x2\x2\xDB\xDD\a\x10\x2\x2\xDC\xDE\x5 \x11\x2\xDD\xDC"+
		"\x3\x2\x2\x2\xDE\xDF\x3\x2\x2\x2\xDF\xE0\x3\x2\x2\x2\xDF\xDD\x3\x2\x2"+
		"\x2\xE0\x1B\x3\x2\x2\x2\xE1\xE2\a<\x2\x2\xE2\xE3\a\xE\x2\x2\xE3\xE4\a"+
		"\x11\x2\x2\xE4\xE5\x5\x46$\x2\xE5\xE6\x5\x1E\x10\x2\xE6\xE7\a=\x2\x2\xE7"+
		"\x1D\x3\x2\x2\x2\xE8\xE9\a<\x2\x2\xE9\xEB\a\x12\x2\x2\xEA\xEC\x5 \x11"+
		"\x2\xEB\xEA\x3\x2\x2\x2\xEC\xED\x3\x2\x2\x2\xED\xEE\x3\x2\x2\x2\xED\xEB"+
		"\x3\x2\x2\x2\xEE\xEF\x3\x2\x2\x2\xEF\xF0\a=\x2\x2\xF0\x1F\x3\x2\x2\x2"+
		"\xF1\xF7\a<\x2\x2\xF2\xF3\x5R*\x2\xF3\xF4\a\x13\x2\x2\xF4\xF6\x3\x2\x2"+
		"\x2\xF5\xF2\x3\x2\x2\x2\xF6\xF9\x3\x2\x2\x2\xF7\xF8\x3\x2\x2\x2\xF7\xF5"+
		"\x3\x2\x2\x2\xF8\xFA\x3\x2\x2\x2\xF9\xF7\x3\x2\x2\x2\xFA\xFE\x5R*\x2\xFB"+
		"\xFD\x5 \x11\x2\xFC\xFB\x3\x2\x2\x2\xFD\x100\x3\x2\x2\x2\xFE\xFF\x3\x2"+
		"\x2\x2\xFE\xFC\x3\x2\x2\x2\xFF\x101\x3\x2\x2\x2\x100\xFE\x3\x2\x2\x2\x101"+
		"\x102\a=\x2\x2\x102!\x3\x2\x2\x2\x103\x104\a\x14\x2\x2\x104\x105\a\x15"+
		"\x2\x2\x105\x106\x5x=\x2\x106\x108\a<\x2\x2\x107\x109\x5$\x13\x2\x108"+
		"\x107\x3\x2\x2\x2\x109\x10A\x3\x2\x2\x2\x10A\x10B\x3\x2\x2\x2\x10A\x108"+
		"\x3\x2\x2\x2\x10B\x10C\x3\x2\x2\x2\x10C\x10D\a=\x2\x2\x10D#\x3\x2\x2\x2"+
		"\x10E\x10F\a<\x2\x2\x10F\x111\x5\\/\x2\x110\x112\x5&\x14\x2\x111\x110"+
		"\x3\x2\x2\x2\x112\x113\x3\x2\x2\x2\x113\x114\x3\x2\x2\x2\x113\x111\x3"+
		"\x2\x2\x2\x114\x115\x3\x2\x2\x2\x115\x116\x5t;\x2\x116\x117\a=\x2\x2\x117"+
		"%\x3\x2\x2\x2\x118\x119\a<\x2\x2\x119\x11F\x5x=\x2\x11A\x11B\a<\x2\x2"+
		"\x11B\x11C\x5R*\x2\x11C\x11D\a=\x2\x2\x11D\x120\x3\x2\x2\x2\x11E\x120"+
		"\x5Z.\x2\x11F\x11A\x3\x2\x2\x2\x11F\x11E\x3\x2\x2\x2\x120\x121\x3\x2\x2"+
		"\x2\x121\x122\a=\x2\x2\x122\'\x3\x2\x2\x2\x123\x124\a\x16\x2\x2\x124\x129"+
		"\t\x4\x2\x2\x125\x12A\x5t;\x2\x126\x12A\a\x18\x2\x2\x127\x12A\a\x17\x2"+
		"\x2\x128\x12A\a\x19\x2\x2\x129\x125\x3\x2\x2\x2\x129\x126\x3\x2\x2\x2"+
		"\x129\x127\x3\x2\x2\x2\x129\x128\x3\x2\x2\x2\x12A)\x3\x2\x2\x2\x12B\x12C"+
		"\a\x1A\x2\x2\x12C\x12D\x5\x42\"\x2\x12D\x12E\x5t;\x2\x12E+\x3\x2\x2\x2"+
		"\x12F\x130\a\x1B\x2\x2\x130\x131\x5\x42\"\x2\x131\x132\x5t;\x2\x132-\x3"+
		"\x2\x2\x2\x133\x134\a\x1C\x2\x2\x134\x135\x5\x42\"\x2\x135\x136\x5t;\x2"+
		"\x136/\x3\x2\x2\x2\x137\x138\a\x1D\x2\x2\x138\x139\x5<\x1F\x2\x139\x13C"+
		"\x5<\x1F\x2\x13A\x13D\x5t;\x2\x13B\x13D\a\x1E\x2\x2\x13C\x13A\x3\x2\x2"+
		"\x2\x13C\x13B\x3\x2\x2\x2\x13C\x13D\x3\x2\x2\x2\x13D\x31\x3\x2\x2\x2\x13E"+
		"\x13F\a\x1F\x2\x2\x13F\x140\x5:\x1E\x2\x140\x143\x5> \x2\x141\x144\x5"+
		"t;\x2\x142\x144\a\x1E\x2\x2\x143\x141\x3\x2\x2\x2\x143\x142\x3\x2\x2\x2"+
		"\x143\x144\x3\x2\x2\x2\x144\x33\x3\x2\x2\x2\x145\x146\a \x2\x2\x146\x147"+
		"\x5> \x2\x147\x35\x3\x2\x2\x2\x148\x149\a!\x2\x2\x149\x14A\x5\x44#\x2"+
		"\x14A\x37\x3\x2\x2\x2\x14B\x14C\a\"\x2\x2\x14C\x14D\a#\x2\x2\x14D\x39"+
		"\x3\x2\x2\x2\x14E\x154\x5n\x38\x2\x14F\x152\x5<\x1F\x2\x150\x152\x5> "+
		"\x2\x151\x14F\x3\x2\x2\x2\x151\x150\x3\x2\x2\x2\x152\x154\x3\x2\x2\x2"+
		"\x153\x14E\x3\x2\x2\x2\x153\x151\x3\x2\x2\x2\x154;\x3\x2\x2\x2\x155\x15A"+
		"\a<\x2\x2\x156\x15B\a$\x2\x2\x157\x15B\a%\x2\x2\x158\x15B\x5t;\x2\x159"+
		"\x15B\a&\x2\x2\x15A\x156\x3\x2\x2\x2\x15A\x157\x3\x2\x2\x2\x15A\x158\x3"+
		"\x2\x2\x2\x15A\x159\x3\x2\x2\x2\x15B\x15C\x3\x2\x2\x2\x15C\x15D\x5\x46"+
		"$\x2\x15D\x15E\a=\x2\x2\x15E=\x3\x2\x2\x2\x15F\x164\a<\x2\x2\x160\x165"+
		"\a$\x2\x2\x161\x165\a%\x2\x2\x162\x165\x5t;\x2\x163\x165\a&\x2\x2\x164"+
		"\x160\x3\x2\x2\x2\x164\x161\x3\x2\x2\x2\x164\x162\x3\x2\x2\x2\x164\x163"+
		"\x3\x2\x2\x2\x165\x166\x3\x2\x2\x2\x166\x167\x5H%\x2\x167\x168\a=\x2\x2"+
		"\x168?\x3\x2\x2\x2\x169\x16A\a<\x2\x2\x16A\x16B\a\'\x2\x2\x16B\x16C\x5"+
		":\x1E\x2\x16C\x16D\a=\x2\x2\x16D\x41\x3\x2\x2\x2\x16E\x171\a<\x2\x2\x16F"+
		"\x172\x5N(\x2\x170\x172\x5P)\x2\x171\x16F\x3\x2\x2\x2\x171\x170\x3\x2"+
		"\x2\x2\x172\x173\x3\x2\x2\x2\x173\x174\a(\x2\x2\x174\x175\x5v<\x2\x175"+
		"\x176\a=\x2\x2\x176\x43\x3\x2\x2\x2\x177\x17D\x5p\x39\x2\x178\x17B\x5"+
		"\x46$\x2\x179\x17B\x5H%\x2\x17A\x178\x3\x2\x2\x2\x17A\x179\x3\x2\x2\x2"+
		"\x17B\x17D\x3\x2\x2\x2\x17C\x177\x3\x2\x2\x2\x17C\x17A\x3\x2\x2\x2\x17D"+
		"\x45\x3\x2\x2\x2\x17E\x17F\a<\x2\x2\x17F\x180\x5J&\x2\x180\x181\a)\x2"+
		"\x2\x181\x182\x5L\'\x2\x182\x183\a=\x2\x2\x183G\x3\x2\x2\x2\x184\x185"+
		"\a<\x2\x2\x185\x186\x5J&\x2\x186\x187\a*\x2\x2\x187\x188\x5L\'\x2\x188"+
		"\x189\a=\x2\x2\x189I\x3\x2\x2\x2\x18A\x18D\x5N(\x2\x18B\x18D\x5P)\x2\x18C"+
		"\x18A\x3\x2\x2\x2\x18C\x18B\x3\x2\x2\x2\x18DK\x3\x2\x2\x2\x18E\x190\x5"+
		"v<\x2\x18F\x191\x5T+\x2\x190\x18F\x3\x2\x2\x2\x190\x191\x3\x2\x2\x2\x191"+
		"M\x3\x2\x2\x2\x192\x193\a\x3\x2\x2\x193O\x3\x2\x2\x2\x194\x19B\a<\x2\x2"+
		"\x195\x19C\x5\\/\x2\x196\x19C\x5t;\x2\x197\x19C\a\x19\x2\x2\x198\x19C"+
		"\a\x17\x2\x2\x199\x19C\a\x18\x2\x2\x19A\x19C\x5P)\x2\x19B\x195\x3\x2\x2"+
		"\x2\x19B\x196\x3\x2\x2\x2\x19B\x197\x3\x2\x2\x2\x19B\x198\x3\x2\x2\x2"+
		"\x19B\x199\x3\x2\x2\x2\x19B\x19A\x3\x2\x2\x2\x19C\x19D\x3\x2\x2\x2\x19D"+
		"\x19E\t\x5\x2\x2\x19E\x19F\a=\x2\x2\x19FQ\x3\x2\x2\x2\x1A0\x1A4\a?\x2"+
		"\x2\x1A1\x1A4\x5t;\x2\x1A2\x1A4\a\x37\x2\x2\x1A3\x1A0\x3\x2\x2\x2\x1A3"+
		"\x1A1\x3\x2\x2\x2\x1A3\x1A2\x3\x2\x2\x2\x1A4\x1A5\x3\x2\x2\x2\x1A5\x1A6"+
		"\x3\x2\x2\x2\x1A5\x1A3\x3\x2\x2\x2\x1A6S\x3\x2\x2\x2\x1A7\x1A8\a+\x2\x2"+
		"\x1A8\x1A9\x5V,\x2\x1A9U\x3\x2\x2\x2\x1AA\x1AB\a<\x2\x2\x1AB\x1AC\x5X"+
		"-\x2\x1AC\x1AD\a=\x2\x2\x1ADW\x3\x2\x2\x2\x1AE\x1AF\a\x39\x2\x2\x1AF\x1B0"+
		"\x5Z.\x2\x1B0\x1B1\x5Z.\x2\x1B1Y\x3\x2\x2\x2\x1B2\x1BD\x5x=\x2\x1B3\x1B4"+
		"\a<\x2\x2\x1B4\x1B5\a,\x2\x2\x1B5\x1B8\x5x=\x2\x1B6\x1B9\a-\x2\x2\x1B7"+
		"\x1B9\x5:\x1E\x2\x1B8\x1B6\x3\x2\x2\x2\x1B8\x1B7\x3\x2\x2\x2\x1B9\x1BA"+
		"\x3\x2\x2\x2\x1BA\x1BB\a=\x2\x2\x1BB\x1BD\x3\x2\x2\x2\x1BC\x1B2\x3\x2"+
		"\x2\x2\x1BC\x1B3\x3\x2\x2\x2\x1BD[\x3\x2\x2\x2\x1BE\x1BF\t\x6\x2\x2\x1BF"+
		"]\x3\x2\x2\x2\x1C0\x1CF\a<\x2\x2\x1C1\x1C2\a\x37\x2\x2\x1C2\x1C4\x5^\x30"+
		"\x2\x1C3\x1C5\x5^\x30\x2\x1C4\x1C3\x3\x2\x2\x2\x1C5\x1C6\x3\x2\x2\x2\x1C6"+
		"\x1C7\x3\x2\x2\x2\x1C6\x1C4\x3\x2\x2\x2\x1C7\x1D0\x3\x2\x2\x2\x1C8\x1D0"+
		"\x5X-\x2\x1C9\x1CA\x5`\x31\x2\x1CA\x1CB\x5t;\x2\x1CB\x1CC\x5t;\x2\x1CC"+
		"\x1D0\x3\x2\x2\x2\x1CD\x1CE\a:\x2\x2\x1CE\x1D0\x5^\x30\x2\x1CF\x1C1\x3"+
		"\x2\x2\x2\x1CF\x1C8\x3\x2\x2\x2\x1CF\x1C9\x3\x2\x2\x2\x1CF\x1CD\x3\x2"+
		"\x2\x2\x1D0\x1D1\x3\x2\x2\x2\x1D1\x1D2\a=\x2\x2\x1D2\x1D6\x3\x2\x2\x2"+
		"\x1D3\x1D4\a<\x2\x2\x1D4\x1D6\a=\x2\x2\x1D5\x1C0\x3\x2\x2\x2\x1D5\x1D3"+
		"\x3\x2\x2\x2\x1D6_\x3\x2\x2\x2\x1D7\x1D8\t\a\x2\x2\x1D8\x61\x3\x2\x2\x2"+
		"\x1D9\x1DA\a<\x2\x2\x1DA\x1DB\a.\x2\x2\x1DB\x1DC\x5t;\x2\x1DC\x1DD\x5"+
		"t;\x2\x1DD\x1DE\a=\x2\x2\x1DE\x63\x3\x2\x2\x2\x1DF\x1E0\a<\x2\x2\x1E0"+
		"\x1E1\a/\x2\x2\x1E1\x1E2\x5t;\x2\x1E2\x1E3\x5t;\x2\x1E3\x1E4\a=\x2\x2"+
		"\x1E4\x65\x3\x2\x2\x2\x1E5\x1E6\a<\x2\x2\x1E6\x1E7\a\x30\x2\x2\x1E7\x1E8"+
		"\x5t;\x2\x1E8\x1E9\x5t;\x2\x1E9\x1EA\a=\x2\x2\x1EAg\x3\x2\x2\x2\x1EB\x1EC"+
		"\a<\x2\x2\x1EC\x1ED\a\x31\x2\x2\x1ED\x1EE\x5t;\x2\x1EE\x1EF\x5t;\x2\x1EF"+
		"\x1F0\a=\x2\x2\x1F0i\x3\x2\x2\x2\x1F1\x1F2\a<\x2\x2\x1F2\x1F3\a\x32\x2"+
		"\x2\x1F3\x1F4\x5t;\x2\x1F4\x1F5\x5t;\x2\x1F5\x1F6\a=\x2\x2\x1F6k\x3\x2"+
		"\x2\x2\x1F7\x1F8\a<\x2\x2\x1F8\x1F9\a\x33\x2\x2\x1F9\x1FA\x5\x44#\x2\x1FA"+
		"\x1FB\a=\x2\x2\x1FBm\x3\x2\x2\x2\x1FC\x1FD\a<\x2\x2\x1FD\x1FE\a\n\x2\x2"+
		"\x1FE\x1FF\x5\x44#\x2\x1FF\x200\a\x34\x2\x2\x200\x201\x5v<\x2\x201\x202"+
		"\a=\x2\x2\x202o\x3\x2\x2\x2\x203\x204\a<\x2\x2\x204\x206\a\x35\x2\x2\x205"+
		"\x207\x5\x44#\x2\x206\x205\x3\x2\x2\x2\x207\x208\x3\x2\x2\x2\x208\x209"+
		"\x3\x2\x2\x2\x208\x206\x3\x2\x2\x2\x209\x20A\x3\x2\x2\x2\x20A\x20B\a="+
		"\x2\x2\x20Bq\x3\x2\x2\x2\x20C\x20D\a<\x2\x2\x20D\x213\a\x36\x2\x2\x20E"+
		"\x214\x5\x42\"\x2\x20F\x210\x5\x44#\x2\x210\x211\a\x34\x2\x2\x211\x212"+
		"\x5v<\x2\x212\x214\x3\x2\x2\x2\x213\x20E\x3\x2\x2\x2\x213\x20F\x3\x2\x2"+
		"\x2\x214\x215\x3\x2\x2\x2\x215\x216\a=\x2\x2\x216s\x3\x2\x2\x2\x217\x225"+
		"\x5@!\x2\x218\x225\x5l\x37\x2\x219\x225\x5\x64\x33\x2\x21A\x225\x5\x66"+
		"\x34\x2\x21B\x225\x5h\x35\x2\x21C\x225\x5j\x36\x2\x21D\x225\x5r:\x2\x21E"+
		"\x225\x5\x42\"\x2\x21F\x221\a;\x2\x2\x220\x21F\x3\x2\x2\x2\x221\x222\x3"+
		"\x2\x2\x2\x222\x220\x3\x2\x2\x2\x222\x223\x3\x2\x2\x2\x223\x225\x3\x2"+
		"\x2\x2\x224\x217\x3\x2\x2\x2\x224\x218\x3\x2\x2\x2\x224\x219\x3\x2\x2"+
		"\x2\x224\x21A\x3\x2\x2\x2\x224\x21B\x3\x2\x2\x2\x224\x21C\x3\x2\x2\x2"+
		"\x224\x21D\x3\x2\x2\x2\x224\x21E\x3\x2\x2\x2\x224\x220\x3\x2\x2\x2\x225"+
		"u\x3\x2\x2\x2\x226\x228\a?\x2\x2\x227\x226\x3\x2\x2\x2\x228\x229\x3\x2"+
		"\x2\x2\x229\x227\x3\x2\x2\x2\x229\x22A\x3\x2\x2\x2\x22Aw\x3\x2\x2\x2\x22B"+
		"\x22D\a?\x2\x2\x22C\x22B\x3\x2\x2\x2\x22D\x22E\x3\x2\x2\x2\x22E\x22F\x3"+
		"\x2\x2\x2\x22E\x22C\x3\x2\x2\x2\x22Fy\x3\x2\x2\x2+\x80\x82\x90\x9B\x9D"+
		"\xB8\xC2\xD0\xDF\xED\xF7\xFE\x10A\x113\x11F\x129\x13C\x143\x151\x153\x15A"+
		"\x164\x171\x17A\x17C\x18C\x190\x19B\x1A3\x1A5\x1B8\x1BC\x1C6\x1CF\x1D5"+
		"\x208\x213\x222\x224\x229\x22E";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
