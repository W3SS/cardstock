//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Recycle.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class RecycleParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, BOOLOP=55, COMPOP=56, EQOP=57, UNOP=58, INTNUM=59, 
		OPEN=60, CLOSE=61, WS=62, ANY=63;
	public const int
		RULE_game = 0, RULE_setup = 1, RULE_stage = 2, RULE_scoring = 3, RULE_endcondition = 4, 
		RULE_computermoves = 5, RULE_playermoves = 6, RULE_multigameaction = 7, 
		RULE_gameaction = 8, RULE_multiaction = 9, RULE_action = 10, RULE_playercreate = 11, 
		RULE_teamcreate = 12, RULE_deckcreate = 13, RULE_deck = 14, RULE_attribute = 15, 
		RULE_initpoints = 16, RULE_awards = 17, RULE_subaward = 18, RULE_cycleaction = 19, 
		RULE_setaction = 20, RULE_incaction = 21, RULE_decaction = 22, RULE_moveaction = 23, 
		RULE_copyaction = 24, RULE_removeaction = 25, RULE_shuffleaction = 26, 
		RULE_turnaction = 27, RULE_card = 28, RULE_cardp = 29, RULE_cardm = 30, 
		RULE_owner = 31, RULE_actual = 32, RULE_rawstorage = 33, RULE_cstorage = 34, 
		RULE_locstorage = 35, RULE_memstorage = 36, RULE_locpre = 37, RULE_locpost = 38, 
		RULE_who = 39, RULE_who2 = 40, RULE_trueany = 41, RULE_whereclause = 42, 
		RULE_attrcomp = 43, RULE_attrcompwhere = 44, RULE_cardatt = 45, RULE_cardattwhere = 46, 
		RULE_posq = 47, RULE_negq = 48, RULE_booleanwhere = 49, RULE_whereconditions = 50, 
		RULE_boolean = 51, RULE_intop = 52, RULE_add = 53, RULE_mult = 54, RULE_subtract = 55, 
		RULE_mod = 56, RULE_divide = 57, RULE_sizeof = 58, RULE_maxof = 59, RULE_minof = 60, 
		RULE_unionof = 61, RULE_sum = 62, RULE_scorewhere = 63, RULE_score = 64, 
		RULE_intwhere = 65, RULE_int = 66, RULE_namegr = 67, RULE_name = 68;
	public static readonly string[] ruleNames = {
		"game", "setup", "stage", "scoring", "endcondition", "computermoves", 
		"playermoves", "multigameaction", "gameaction", "multiaction", "action", 
		"playercreate", "teamcreate", "deckcreate", "deck", "attribute", "initpoints", 
		"awards", "subaward", "cycleaction", "setaction", "incaction", "decaction", 
		"moveaction", "copyaction", "removeaction", "shuffleaction", "turnaction", 
		"card", "cardp", "cardm", "owner", "actual", "rawstorage", "cstorage", 
		"locstorage", "memstorage", "locpre", "locpost", "who", "who2", "trueany", 
		"whereclause", "attrcomp", "attrcompwhere", "cardatt", "cardattwhere", 
		"posq", "negq", "booleanwhere", "whereconditions", "boolean", "intop", 
		"add", "mult", "subtract", "mod", "divide", "sizeof", "maxof", "minof", 
		"unionof", "sum", "scorewhere", "score", "intwhere", "int", "namegr", 
		"name"
	};

	private static readonly string[] _LiteralNames = {
		null, "'game'", "'setup'", "'stage'", "'player'", "'team'", "'scoring'", 
		"'min'", "'max'", "'end'", "'comp'", "'choice'", "'create'", "'players'", 
		"'teams'", "'deck'", "','", "'initialize'", "'points'", "'cycle'", "'next'", 
		"'current'", "'previous'", "'set'", "'inc'", "'dec'", "'move'", "'all'", 
		"'remember'", "'forget'", "'shuffle'", "'turn'", "'pass'", "'top'", "'bottom'", 
		"'any'", "'owner'", "'actual'", "'sto'", "'loc'", "'mem'", "'where'", 
		"'cardatt'", "'each'", "'none'", "'+'", "'*'", "'-'", "'%'", "'//'", "'size'", 
		"'using'", "'union'", "'sum'", "'score'", null, null, null, "'not'", null, 
		"'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "BOOLOP", "COMPOP", "EQOP", 
		"UNOP", "INTNUM", "OPEN", "CLOSE", "WS", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Recycle.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public RecycleParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class GameContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public SetupContext setup() {
			return GetRuleContext<SetupContext>(0);
		}
		public ScoringContext scoring() {
			return GetRuleContext<ScoringContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ComputermovesContext[] computermoves() {
			return GetRuleContexts<ComputermovesContext>();
		}
		public ComputermovesContext computermoves(int i) {
			return GetRuleContext<ComputermovesContext>(i);
		}
		public PlayermovesContext[] playermoves() {
			return GetRuleContexts<PlayermovesContext>();
		}
		public PlayermovesContext playermoves(int i) {
			return GetRuleContext<PlayermovesContext>(i);
		}
		public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public GameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_game; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterGame(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitGame(this);
		}
	}

	[RuleVersion(0)]
	public GameContext game() {
		GameContext _localctx = new GameContext(Context, State);
		EnterRule(_localctx, 0, RULE_game);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; Match(OPEN);
			State = 139; Match(T__0);
			State = 140; setup();
			State = 144;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 144;
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 141; computermoves();
						}
						break;
					case 2:
						{
						State = 142; playermoves();
						}
						break;
					case 3:
						{
						State = 143; stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 146;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 148; scoring();
			State = 149; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetupContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public PlayercreateContext playercreate() {
			return GetRuleContext<PlayercreateContext>(0);
		}
		public TeamcreateContext teamcreate() {
			return GetRuleContext<TeamcreateContext>(0);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public DeckcreateContext[] deckcreate() {
			return GetRuleContexts<DeckcreateContext>();
		}
		public DeckcreateContext deckcreate(int i) {
			return GetRuleContext<DeckcreateContext>(i);
		}
		public SetupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSetup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSetup(this);
		}
	}

	[RuleVersion(0)]
	public SetupContext setup() {
		SetupContext _localctx = new SetupContext(Context, State);
		EnterRule(_localctx, 2, RULE_setup);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 151; Match(OPEN);
			State = 152; Match(T__1);
			State = 153; playercreate();
			State = 154; Match(OPEN);
			State = 155; teamcreate();
			State = 156; Match(CLOSE);
			State = 158;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 157; deckcreate();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 160;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 162; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public EndconditionContext endcondition() {
			return GetRuleContext<EndconditionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ComputermovesContext[] computermoves() {
			return GetRuleContexts<ComputermovesContext>();
		}
		public ComputermovesContext computermoves(int i) {
			return GetRuleContext<ComputermovesContext>(i);
		}
		public PlayermovesContext[] playermoves() {
			return GetRuleContexts<PlayermovesContext>();
		}
		public PlayermovesContext playermoves(int i) {
			return GetRuleContext<PlayermovesContext>(i);
		}
		public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public StageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterStage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitStage(this);
		}
	}

	[RuleVersion(0)]
	public StageContext stage() {
		StageContext _localctx = new StageContext(Context, State);
		EnterRule(_localctx, 4, RULE_stage);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; Match(OPEN);
			State = 165; Match(T__2);
			State = 166;
			_la = TokenStream.La(1);
			if ( !(_la==T__3 || _la==T__4) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 167; endcondition();
			State = 171;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 171;
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						State = 168; computermoves();
						}
						break;
					case 2:
						{
						State = 169; playermoves();
						}
						break;
					case 3:
						{
						State = 170; stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 173;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 175; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoringContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ScoringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scoring; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterScoring(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitScoring(this);
		}
	}

	[RuleVersion(0)]
	public ScoringContext scoring() {
		ScoringContext _localctx = new ScoringContext(Context, State);
		EnterRule(_localctx, 6, RULE_scoring);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177; Match(OPEN);
			State = 178; Match(T__5);
			State = 179;
			_la = TokenStream.La(1);
			if ( !(_la==T__6 || _la==T__7) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 180; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndconditionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public EndconditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endcondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterEndcondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitEndcondition(this);
		}
	}

	[RuleVersion(0)]
	public EndconditionContext endcondition() {
		EndconditionContext _localctx = new EndconditionContext(Context, State);
		EnterRule(_localctx, 8, RULE_endcondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; Match(OPEN);
			State = 183; Match(T__8);
			State = 184; boolean();
			State = 185; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComputermovesContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public MultigameactionContext multigameaction() {
			return GetRuleContext<MultigameactionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ComputermovesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_computermoves; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterComputermoves(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitComputermoves(this);
		}
	}

	[RuleVersion(0)]
	public ComputermovesContext computermoves() {
		ComputermovesContext _localctx = new ComputermovesContext(Context, State);
		EnterRule(_localctx, 10, RULE_computermoves);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187; Match(OPEN);
			State = 188; Match(T__9);
			State = 189; multigameaction();
			State = 190; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayermovesContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public MultigameactionContext multigameaction() {
			return GetRuleContext<MultigameactionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public PlayermovesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playermoves; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterPlayermoves(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitPlayermoves(this);
		}
	}

	[RuleVersion(0)]
	public PlayermovesContext playermoves() {
		PlayermovesContext _localctx = new PlayermovesContext(Context, State);
		EnterRule(_localctx, 12, RULE_playermoves);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192; Match(OPEN);
			State = 193; Match(T__10);
			State = 194; multigameaction();
			State = 195; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultigameactionContext : ParserRuleContext {
		public GameactionContext[] gameaction() {
			return GetRuleContexts<GameactionContext>();
		}
		public GameactionContext gameaction(int i) {
			return GetRuleContext<GameactionContext>(i);
		}
		public MultigameactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multigameaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMultigameaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMultigameaction(this);
		}
	}

	[RuleVersion(0)]
	public MultigameactionContext multigameaction() {
		MultigameactionContext _localctx = new MultigameactionContext(Context, State);
		EnterRule(_localctx, 14, RULE_multigameaction);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 197; gameaction();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 200;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GameactionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public MultiactionContext multiaction() {
			return GetRuleContext<MultiactionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public GameactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gameaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterGameaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitGameaction(this);
		}
	}

	[RuleVersion(0)]
	public GameactionContext gameaction() {
		GameactionContext _localctx = new GameactionContext(Context, State);
		EnterRule(_localctx, 16, RULE_gameaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202; Match(OPEN);
			State = 203; boolean();
			State = 204; multiaction();
			State = 205; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiactionContext : ParserRuleContext {
		public ActionContext[] action() {
			return GetRuleContexts<ActionContext>();
		}
		public ActionContext action(int i) {
			return GetRuleContext<ActionContext>(i);
		}
		public MultiactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMultiaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMultiaction(this);
		}
	}

	[RuleVersion(0)]
	public MultiactionContext multiaction() {
		MultiactionContext _localctx = new MultiactionContext(Context, State);
		EnterRule(_localctx, 18, RULE_multiaction);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 207; action();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 210;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public InitpointsContext initpoints() {
			return GetRuleContext<InitpointsContext>(0);
		}
		public TeamcreateContext teamcreate() {
			return GetRuleContext<TeamcreateContext>(0);
		}
		public CycleactionContext cycleaction() {
			return GetRuleContext<CycleactionContext>(0);
		}
		public SetactionContext setaction() {
			return GetRuleContext<SetactionContext>(0);
		}
		public MoveactionContext moveaction() {
			return GetRuleContext<MoveactionContext>(0);
		}
		public CopyactionContext copyaction() {
			return GetRuleContext<CopyactionContext>(0);
		}
		public IncactionContext incaction() {
			return GetRuleContext<IncactionContext>(0);
		}
		public DecactionContext decaction() {
			return GetRuleContext<DecactionContext>(0);
		}
		public RemoveactionContext removeaction() {
			return GetRuleContext<RemoveactionContext>(0);
		}
		public TurnactionContext turnaction() {
			return GetRuleContext<TurnactionContext>(0);
		}
		public ShuffleactionContext shuffleaction() {
			return GetRuleContext<ShuffleactionContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 20, RULE_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; Match(OPEN);
			State = 224;
			switch (TokenStream.La(1)) {
			case T__16:
				{
				State = 213; initpoints();
				}
				break;
			case T__11:
				{
				State = 214; teamcreate();
				}
				break;
			case T__18:
				{
				State = 215; cycleaction();
				}
				break;
			case T__22:
				{
				State = 216; setaction();
				}
				break;
			case T__25:
				{
				State = 217; moveaction();
				}
				break;
			case T__27:
				{
				State = 218; copyaction();
				}
				break;
			case T__23:
				{
				State = 219; incaction();
				}
				break;
			case T__24:
				{
				State = 220; decaction();
				}
				break;
			case T__28:
				{
				State = 221; removeaction();
				}
				break;
			case T__30:
				{
				State = 222; turnaction();
				}
				break;
			case T__29:
				{
				State = 223; shuffleaction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 226; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayercreateContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public PlayercreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playercreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterPlayercreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitPlayercreate(this);
		}
	}

	[RuleVersion(0)]
	public PlayercreateContext playercreate() {
		PlayercreateContext _localctx = new PlayercreateContext(Context, State);
		EnterRule(_localctx, 22, RULE_playercreate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228; Match(OPEN);
			State = 229; Match(T__11);
			State = 230; Match(T__12);
			State = 231; @int();
			State = 232; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamcreateContext : ParserRuleContext {
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public TeamcreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamcreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeamcreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeamcreate(this);
		}
	}

	[RuleVersion(0)]
	public TeamcreateContext teamcreate() {
		TeamcreateContext _localctx = new TeamcreateContext(Context, State);
		EnterRule(_localctx, 24, RULE_teamcreate);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 234; Match(T__11);
			State = 235; Match(T__13);
			State = 237;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 236; attribute();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 239;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckcreateContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public LocstorageContext locstorage() {
			return GetRuleContext<LocstorageContext>(0);
		}
		public DeckContext deck() {
			return GetRuleContext<DeckContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DeckcreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deckcreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeckcreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeckcreate(this);
		}
	}

	[RuleVersion(0)]
	public DeckcreateContext deckcreate() {
		DeckcreateContext _localctx = new DeckcreateContext(Context, State);
		EnterRule(_localctx, 26, RULE_deckcreate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241; Match(OPEN);
			State = 242; Match(T__11);
			State = 243; Match(T__14);
			State = 244; locstorage();
			State = 245; deck();
			State = 246; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public DeckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deck; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeck(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeck(this);
		}
	}

	[RuleVersion(0)]
	public DeckContext deck() {
		DeckContext _localctx = new DeckContext(Context, State);
		EnterRule(_localctx, 28, RULE_deck);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 248; Match(OPEN);
			State = 249; Match(T__14);
			State = 251;
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 250; @int();
				}
				break;
			}
			State = 254;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 253; attribute();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 256;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 258; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public TrueanyContext[] trueany() {
			return GetRuleContexts<TrueanyContext>();
		}
		public TrueanyContext trueany(int i) {
			return GetRuleContext<TrueanyContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 30, RULE_attribute);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 260; Match(OPEN);
			State = 266;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 261; trueany();
					State = 262; Match(T__15);
					}
					} 
				}
				State = 268;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			State = 269; trueany();
			State = 273;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 270; attribute();
					}
					} 
				}
				State = 275;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			State = 276; Match(CLOSE);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitpointsContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AwardsContext[] awards() {
			return GetRuleContexts<AwardsContext>();
		}
		public AwardsContext awards(int i) {
			return GetRuleContext<AwardsContext>(i);
		}
		public InitpointsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initpoints; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterInitpoints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitInitpoints(this);
		}
	}

	[RuleVersion(0)]
	public InitpointsContext initpoints() {
		InitpointsContext _localctx = new InitpointsContext(Context, State);
		EnterRule(_localctx, 32, RULE_initpoints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 278; Match(T__16);
			State = 279; Match(T__17);
			State = 280; name();
			State = 281; Match(OPEN);
			State = 283;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 282; awards();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 285;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 287; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwardsContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public PosqContext posq() {
			return GetRuleContext<PosqContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubawardContext[] subaward() {
			return GetRuleContexts<SubawardContext>();
		}
		public SubawardContext subaward(int i) {
			return GetRuleContext<SubawardContext>(i);
		}
		public AwardsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awards; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAwards(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAwards(this);
		}
	}

	[RuleVersion(0)]
	public AwardsContext awards() {
		AwardsContext _localctx = new AwardsContext(Context, State);
		EnterRule(_localctx, 34, RULE_awards);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 289; Match(OPEN);
			State = 290; posq();
			State = 292;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 291; subaward();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 294;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 296; @int();
			State = 297; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubawardContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public TrueanyContext trueany() {
			return GetRuleContext<TrueanyContext>(0);
		}
		public CardattContext cardatt() {
			return GetRuleContext<CardattContext>(0);
		}
		public SubawardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subaward; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSubaward(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSubaward(this);
		}
	}

	[RuleVersion(0)]
	public SubawardContext subaward() {
		SubawardContext _localctx = new SubawardContext(Context, State);
		EnterRule(_localctx, 36, RULE_subaward);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299; Match(OPEN);
			State = 300; name();
			State = 306;
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				{
				State = 301; Match(OPEN);
				State = 302; trueany();
				State = 303; Match(CLOSE);
				}
				}
				break;
			case 2:
				{
				{
				State = 305; cardatt();
				}
				}
				break;
			}
			State = 308; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CycleactionContext : ParserRuleContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CycleactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cycleaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCycleaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCycleaction(this);
		}
	}

	[RuleVersion(0)]
	public CycleactionContext cycleaction() {
		CycleactionContext _localctx = new CycleactionContext(Context, State);
		EnterRule(_localctx, 38, RULE_cycleaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310; Match(T__18);
			State = 311;
			_la = TokenStream.La(1);
			if ( !(_la==T__19 || _la==T__20) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 316;
			switch (TokenStream.La(1)) {
			case INTNUM:
			case OPEN:
				{
				State = 312; @int();
				}
				break;
			case T__20:
				{
				State = 313; Match(T__20);
				}
				break;
			case T__19:
				{
				State = 314; Match(T__19);
				}
				break;
			case T__21:
				{
				State = 315; Match(T__21);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public SetactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSetaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSetaction(this);
		}
	}

	[RuleVersion(0)]
	public SetactionContext setaction() {
		SetactionContext _localctx = new SetactionContext(Context, State);
		EnterRule(_localctx, 40, RULE_setaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318; Match(T__22);
			State = 319; rawstorage();
			State = 320; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public IncactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterIncaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitIncaction(this);
		}
	}

	[RuleVersion(0)]
	public IncactionContext incaction() {
		IncactionContext _localctx = new IncactionContext(Context, State);
		EnterRule(_localctx, 42, RULE_incaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322; Match(T__23);
			State = 323; rawstorage();
			State = 324; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public DecactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDecaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDecaction(this);
		}
	}

	[RuleVersion(0)]
	public DecactionContext decaction() {
		DecactionContext _localctx = new DecactionContext(Context, State);
		EnterRule(_localctx, 44, RULE_decaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326; Match(T__24);
			State = 327; rawstorage();
			State = 328; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveactionContext : ParserRuleContext {
		public CardpContext[] cardp() {
			return GetRuleContexts<CardpContext>();
		}
		public CardpContext cardp(int i) {
			return GetRuleContext<CardpContext>(i);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public MoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMoveaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMoveaction(this);
		}
	}

	[RuleVersion(0)]
	public MoveactionContext moveaction() {
		MoveactionContext _localctx = new MoveactionContext(Context, State);
		EnterRule(_localctx, 46, RULE_moveaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330; Match(T__25);
			State = 331; cardp();
			State = 332; cardp();
			State = 335;
			switch (TokenStream.La(1)) {
			case INTNUM:
			case OPEN:
				{
				State = 333; @int();
				}
				break;
			case T__26:
				{
				State = 334; Match(T__26);
				}
				break;
			case CLOSE:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyactionContext : ParserRuleContext {
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public CardmContext cardm() {
			return GetRuleContext<CardmContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CopyactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCopyaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCopyaction(this);
		}
	}

	[RuleVersion(0)]
	public CopyactionContext copyaction() {
		CopyactionContext _localctx = new CopyactionContext(Context, State);
		EnterRule(_localctx, 48, RULE_copyaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337; Match(T__27);
			State = 338; card();
			State = 339; cardm();
			State = 342;
			switch (TokenStream.La(1)) {
			case INTNUM:
			case OPEN:
				{
				State = 340; @int();
				}
				break;
			case T__26:
				{
				State = 341; Match(T__26);
				}
				break;
			case CLOSE:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveactionContext : ParserRuleContext {
		public CardmContext cardm() {
			return GetRuleContext<CardmContext>(0);
		}
		public RemoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRemoveaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRemoveaction(this);
		}
	}

	[RuleVersion(0)]
	public RemoveactionContext removeaction() {
		RemoveactionContext _localctx = new RemoveactionContext(Context, State);
		EnterRule(_localctx, 50, RULE_removeaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344; Match(T__28);
			State = 345; cardm();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShuffleactionContext : ParserRuleContext {
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public ShuffleactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shuffleaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterShuffleaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitShuffleaction(this);
		}
	}

	[RuleVersion(0)]
	public ShuffleactionContext shuffleaction() {
		ShuffleactionContext _localctx = new ShuffleactionContext(Context, State);
		EnterRule(_localctx, 52, RULE_shuffleaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347; Match(T__29);
			State = 348; cstorage();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TurnactionContext : ParserRuleContext {
		public TurnactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_turnaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTurnaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTurnaction(this);
		}
	}

	[RuleVersion(0)]
	public TurnactionContext turnaction() {
		TurnactionContext _localctx = new TurnactionContext(Context, State);
		EnterRule(_localctx, 54, RULE_turnaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350; Match(T__30);
			State = 351; Match(T__31);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardContext : ParserRuleContext {
		public MaxofContext maxof() {
			return GetRuleContext<MaxofContext>(0);
		}
		public MinofContext minof() {
			return GetRuleContext<MinofContext>(0);
		}
		public CardpContext cardp() {
			return GetRuleContext<CardpContext>(0);
		}
		public CardmContext cardm() {
			return GetRuleContext<CardmContext>(0);
		}
		public CardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_card; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCard(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCard(this);
		}
	}

	[RuleVersion(0)]
	public CardContext card() {
		CardContext _localctx = new CardContext(Context, State);
		EnterRule(_localctx, 56, RULE_card);
		try {
			State = 359;
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 353; maxof();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 354; minof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 357;
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 355; cardp();
					}
					break;
				case 2:
					{
					State = 356; cardm();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardpContext : ParserRuleContext {
		public ActualContext actual() {
			return GetRuleContext<ActualContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public LocstorageContext locstorage() {
			return GetRuleContext<LocstorageContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CardpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cardp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCardp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCardp(this);
		}
	}

	[RuleVersion(0)]
	public CardpContext cardp() {
		CardpContext _localctx = new CardpContext(Context, State);
		EnterRule(_localctx, 58, RULE_cardp);
		try {
			State = 372;
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 361; actual();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 362; Match(OPEN);
				State = 367;
				switch (TokenStream.La(1)) {
				case T__32:
					{
					State = 363; Match(T__32);
					}
					break;
				case T__33:
					{
					State = 364; Match(T__33);
					}
					break;
				case INTNUM:
				case OPEN:
					{
					State = 365; @int();
					}
					break;
				case T__34:
					{
					State = 366; Match(T__34);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 369; locstorage();
				State = 370; Match(CLOSE);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardmContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public MemstorageContext memstorage() {
			return GetRuleContext<MemstorageContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CardmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cardm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCardm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCardm(this);
		}
	}

	[RuleVersion(0)]
	public CardmContext cardm() {
		CardmContext _localctx = new CardmContext(Context, State);
		EnterRule(_localctx, 60, RULE_cardm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 374; Match(OPEN);
			State = 379;
			switch (TokenStream.La(1)) {
			case T__32:
				{
				State = 375; Match(T__32);
				}
				break;
			case T__33:
				{
				State = 376; Match(T__33);
				}
				break;
			case INTNUM:
			case OPEN:
				{
				State = 377; @int();
				}
				break;
			case T__34:
				{
				State = 378; Match(T__34);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 381; memstorage();
			State = 382; Match(CLOSE);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OwnerContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OwnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_owner; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterOwner(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitOwner(this);
		}
	}

	[RuleVersion(0)]
	public OwnerContext owner() {
		OwnerContext _localctx = new OwnerContext(Context, State);
		EnterRule(_localctx, 62, RULE_owner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384; Match(OPEN);
			State = 385; Match(T__35);
			State = 386; card();
			State = 387; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ActualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actual; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterActual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitActual(this);
		}
	}

	[RuleVersion(0)]
	public ActualContext actual() {
		ActualContext _localctx = new ActualContext(Context, State);
		EnterRule(_localctx, 64, RULE_actual);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389; Match(OPEN);
			State = 390; Match(T__36);
			State = 391; card();
			State = 392; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RawstorageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public Who2Context who2() {
			return GetRuleContext<Who2Context>(0);
		}
		public RawstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rawstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRawstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRawstorage(this);
		}
	}

	[RuleVersion(0)]
	public RawstorageContext rawstorage() {
		RawstorageContext _localctx = new RawstorageContext(Context, State);
		EnterRule(_localctx, 66, RULE_rawstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394; Match(OPEN);
			State = 397;
			switch (TokenStream.La(1)) {
			case T__0:
				{
				State = 395; who();
				}
				break;
			case OPEN:
				{
				State = 396; who2();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 399; Match(T__37);
			State = 400; namegr();
			State = 401; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CstorageContext : ParserRuleContext {
		public UnionofContext unionof() {
			return GetRuleContext<UnionofContext>(0);
		}
		public LocstorageContext locstorage() {
			return GetRuleContext<LocstorageContext>(0);
		}
		public MemstorageContext memstorage() {
			return GetRuleContext<MemstorageContext>(0);
		}
		public CstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCstorage(this);
		}
	}

	[RuleVersion(0)]
	public CstorageContext cstorage() {
		CstorageContext _localctx = new CstorageContext(Context, State);
		EnterRule(_localctx, 68, RULE_cstorage);
		try {
			State = 408;
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 403; unionof();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 406;
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 404; locstorage();
					}
					break;
				case 2:
					{
					State = 405; memstorage();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocstorageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public LocpreContext locpre() {
			return GetRuleContext<LocpreContext>(0);
		}
		public LocpostContext locpost() {
			return GetRuleContext<LocpostContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public LocstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLocstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLocstorage(this);
		}
	}

	[RuleVersion(0)]
	public LocstorageContext locstorage() {
		LocstorageContext _localctx = new LocstorageContext(Context, State);
		EnterRule(_localctx, 70, RULE_locstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410; Match(OPEN);
			State = 411; locpre();
			State = 412; Match(T__38);
			State = 413; locpost();
			State = 414; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemstorageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public LocpreContext locpre() {
			return GetRuleContext<LocpreContext>(0);
		}
		public LocpostContext locpost() {
			return GetRuleContext<LocpostContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MemstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMemstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMemstorage(this);
		}
	}

	[RuleVersion(0)]
	public MemstorageContext memstorage() {
		MemstorageContext _localctx = new MemstorageContext(Context, State);
		EnterRule(_localctx, 72, RULE_memstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416; Match(OPEN);
			State = 417; locpre();
			State = 418; Match(T__39);
			State = 419; locpost();
			State = 420; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocpreContext : ParserRuleContext {
		public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public Who2Context who2() {
			return GetRuleContext<Who2Context>(0);
		}
		public LocpreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locpre; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLocpre(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLocpre(this);
		}
	}

	[RuleVersion(0)]
	public LocpreContext locpre() {
		LocpreContext _localctx = new LocpreContext(Context, State);
		EnterRule(_localctx, 74, RULE_locpre);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424;
			switch (TokenStream.La(1)) {
			case T__0:
				{
				State = 422; who();
				}
				break;
			case OPEN:
				{
				State = 423; who2();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocpostContext : ParserRuleContext {
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public WhereclauseContext whereclause() {
			return GetRuleContext<WhereclauseContext>(0);
		}
		public LocpostContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locpost; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLocpost(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLocpost(this);
		}
	}

	[RuleVersion(0)]
	public LocpostContext locpost() {
		LocpostContext _localctx = new LocpostContext(Context, State);
		EnterRule(_localctx, 76, RULE_locpost);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426; namegr();
			State = 428;
			_la = TokenStream.La(1);
			if (_la==T__40) {
				{
				State = 427; whereclause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhoContext : ParserRuleContext {
		public WhoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_who; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWho(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWho(this);
		}
	}

	[RuleVersion(0)]
	public WhoContext who() {
		WhoContext _localctx = new WhoContext(Context, State);
		EnterRule(_localctx, 78, RULE_who);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Who2Context : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public PosqContext posq() {
			return GetRuleContext<PosqContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public Who2Context who2() {
			return GetRuleContext<Who2Context>(0);
		}
		public Who2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_who2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWho2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWho2(this);
		}
	}

	[RuleVersion(0)]
	public Who2Context who2() {
		Who2Context _localctx = new Who2Context(Context, State);
		EnterRule(_localctx, 80, RULE_who2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432; Match(OPEN);
			State = 439;
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 433; posq();
				}
				break;
			case 2:
				{
				State = 434; @int();
				}
				break;
			case 3:
				{
				State = 435; Match(T__21);
				}
				break;
			case 4:
				{
				State = 436; Match(T__19);
				}
				break;
			case 5:
				{
				State = 437; Match(T__20);
				}
				break;
			case 6:
				{
				State = 438; who2();
				}
				break;
			}
			State = 441;
			_la = TokenStream.La(1);
			if ( !(_la==T__3 || _la==T__4) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 442; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrueanyContext : ParserRuleContext {
		public ITerminalNode[] ANY() { return GetTokens(RecycleParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(RecycleParser.ANY, i);
		}
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode[] BOOLOP() { return GetTokens(RecycleParser.BOOLOP); }
		public ITerminalNode BOOLOP(int i) {
			return GetToken(RecycleParser.BOOLOP, i);
		}
		public TrueanyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trueany; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTrueany(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTrueany(this);
		}
	}

	[RuleVersion(0)]
	public TrueanyContext trueany() {
		TrueanyContext _localctx = new TrueanyContext(Context, State);
		EnterRule(_localctx, 82, RULE_trueany);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 447;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 447;
					switch (TokenStream.La(1)) {
					case ANY:
						{
						State = 444; Match(ANY);
						}
						break;
					case INTNUM:
					case OPEN:
						{
						State = 445; @int();
						}
						break;
					case BOOLOP:
						{
						State = 446; Match(BOOLOP);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 449;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereclauseContext : ParserRuleContext {
		public BooleanwhereContext booleanwhere() {
			return GetRuleContext<BooleanwhereContext>(0);
		}
		public WhereclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereclause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhereclause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhereclause(this);
		}
	}

	[RuleVersion(0)]
	public WhereclauseContext whereclause() {
		WhereclauseContext _localctx = new WhereclauseContext(Context, State);
		EnterRule(_localctx, 84, RULE_whereclause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451; Match(T__40);
			State = 452; booleanwhere();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrcompContext : ParserRuleContext {
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public CardattContext[] cardatt() {
			return GetRuleContexts<CardattContext>();
		}
		public CardattContext cardatt(int i) {
			return GetRuleContext<CardattContext>(i);
		}
		public AttrcompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrcomp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAttrcomp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAttrcomp(this);
		}
	}

	[RuleVersion(0)]
	public AttrcompContext attrcomp() {
		AttrcompContext _localctx = new AttrcompContext(Context, State);
		EnterRule(_localctx, 86, RULE_attrcomp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454; Match(EQOP);
			State = 455; cardatt();
			State = 456; cardatt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrcompwhereContext : ParserRuleContext {
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public CardattContext[] cardatt() {
			return GetRuleContexts<CardattContext>();
		}
		public CardattContext cardatt(int i) {
			return GetRuleContext<CardattContext>(i);
		}
		public CardattwhereContext[] cardattwhere() {
			return GetRuleContexts<CardattwhereContext>();
		}
		public CardattwhereContext cardattwhere(int i) {
			return GetRuleContext<CardattwhereContext>(i);
		}
		public AttrcompwhereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrcompwhere; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAttrcompwhere(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAttrcompwhere(this);
		}
	}

	[RuleVersion(0)]
	public AttrcompwhereContext attrcompwhere() {
		AttrcompwhereContext _localctx = new AttrcompwhereContext(Context, State);
		EnterRule(_localctx, 88, RULE_attrcompwhere);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458; Match(EQOP);
			State = 461;
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 459; cardatt();
				}
				break;
			case 2:
				{
				State = 460; cardattwhere();
				}
				break;
			}
			State = 465;
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 463; cardatt();
				}
				break;
			case 2:
				{
				State = 464; cardattwhere();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardattContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public CardattContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cardatt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCardatt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCardatt(this);
		}
	}

	[RuleVersion(0)]
	public CardattContext cardatt() {
		CardattContext _localctx = new CardattContext(Context, State);
		EnterRule(_localctx, 90, RULE_cardatt);
		try {
			State = 474;
			switch (TokenStream.La(1)) {
			case ANY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 467; name();
				}
				break;
			case OPEN:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 468; Match(OPEN);
				State = 469; Match(T__41);
				State = 470; name();
				State = 471; card();
				State = 472; Match(CLOSE);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardattwhereContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public TrueanyContext trueany() {
			return GetRuleContext<TrueanyContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public CardattwhereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cardattwhere; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCardattwhere(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCardattwhere(this);
		}
	}

	[RuleVersion(0)]
	public CardattwhereContext cardattwhere() {
		CardattwhereContext _localctx = new CardattwhereContext(Context, State);
		EnterRule(_localctx, 92, RULE_cardattwhere);
		try {
			State = 483;
			switch (TokenStream.La(1)) {
			case ANY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 476; name();
				}
				break;
			case OPEN:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 477; Match(OPEN);
				State = 478; Match(T__41);
				State = 479; trueany();
				State = 480; Match(T__42);
				State = 481; Match(CLOSE);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PosqContext : ParserRuleContext {
		public PosqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_posq; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterPosq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitPosq(this);
		}
	}

	[RuleVersion(0)]
	public PosqContext posq() {
		PosqContext _localctx = new PosqContext(Context, State);
		EnterRule(_localctx, 94, RULE_posq);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 485;
			_la = TokenStream.La(1);
			if ( !(_la==T__26 || _la==T__34) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegqContext : ParserRuleContext {
		public NegqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negq; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterNegq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitNegq(this);
		}
	}

	[RuleVersion(0)]
	public NegqContext negq() {
		NegqContext _localctx = new NegqContext(Context, State);
		EnterRule(_localctx, 96, RULE_negq);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 487; Match(T__43);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanwhereContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public PosqContext posq() {
			return GetRuleContext<PosqContext>(0);
		}
		public NegqContext negq() {
			return GetRuleContext<NegqContext>(0);
		}
		public WhereconditionsContext[] whereconditions() {
			return GetRuleContexts<WhereconditionsContext>();
		}
		public WhereconditionsContext whereconditions(int i) {
			return GetRuleContext<WhereconditionsContext>(i);
		}
		public BooleanwhereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanwhere; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterBooleanwhere(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitBooleanwhere(this);
		}
	}

	[RuleVersion(0)]
	public BooleanwhereContext booleanwhere() {
		BooleanwhereContext _localctx = new BooleanwhereContext(Context, State);
		EnterRule(_localctx, 98, RULE_booleanwhere);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 489; Match(OPEN);
			State = 492;
			switch (TokenStream.La(1)) {
			case T__26:
			case T__34:
				{
				State = 490; posq();
				}
				break;
			case T__43:
				{
				State = 491; negq();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 495;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 494; whereconditions();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 497;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 499; Match(CLOSE);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereconditionsContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AttrcompwhereContext attrcompwhere() {
			return GetRuleContext<AttrcompwhereContext>(0);
		}
		public IntopContext intop() {
			return GetRuleContext<IntopContext>(0);
		}
		public ScorewhereContext scorewhere() {
			return GetRuleContext<ScorewhereContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public WhereconditionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereconditions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhereconditions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhereconditions(this);
		}
	}

	[RuleVersion(0)]
	public WhereconditionsContext whereconditions() {
		WhereconditionsContext _localctx = new WhereconditionsContext(Context, State);
		EnterRule(_localctx, 100, RULE_whereconditions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501; Match(OPEN);
			State = 507;
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 502; attrcompwhere();
				}
				break;
			case 2:
				{
				{
				State = 503; intop();
				State = 504; scorewhere();
				State = 505; @int();
				}
				}
				break;
			}
			State = 509; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AttrcompContext attrcomp() {
			return GetRuleContext<AttrcompContext>(0);
		}
		public ITerminalNode BOOLOP() { return GetToken(RecycleParser.BOOLOP, 0); }
		public BooleanContext[] boolean() {
			return GetRuleContexts<BooleanContext>();
		}
		public BooleanContext boolean(int i) {
			return GetRuleContext<BooleanContext>(i);
		}
		public IntopContext intop() {
			return GetRuleContext<IntopContext>(0);
		}
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public ITerminalNode UNOP() { return GetToken(RecycleParser.UNOP, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 102, RULE_boolean);
		try {
			int _alt;
			State = 536;
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 511; Match(OPEN);
				State = 530;
				switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
				case 1:
					{
					{
					State = 512; Match(BOOLOP);
					State = 513; boolean();
					State = 515;
					ErrorHandler.Sync(this);
					_alt = 1+1;
					do {
						switch (_alt) {
						case 1+1:
							{
							{
							State = 514; boolean();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 517;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
					} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					}
					break;
				case 2:
					{
					{
					State = 519; intop();
					State = 520; @int();
					State = 521; @int();
					}
					}
					break;
				case 3:
					{
					State = 523; attrcomp();
					}
					break;
				case 4:
					{
					{
					State = 524; Match(EQOP);
					State = 525; card();
					State = 526; card();
					}
					}
					break;
				case 5:
					{
					{
					State = 528; Match(UNOP);
					State = 529; boolean();
					}
					}
					break;
				}
				State = 532; Match(CLOSE);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 534; Match(OPEN);
				State = 535; Match(CLOSE);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntopContext : ParserRuleContext {
		public ITerminalNode COMPOP() { return GetToken(RecycleParser.COMPOP, 0); }
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public IntopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterIntop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitIntop(this);
		}
	}

	[RuleVersion(0)]
	public IntopContext intop() {
		IntopContext _localctx = new IntopContext(Context, State);
		EnterRule(_localctx, 104, RULE_intop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538;
			_la = TokenStream.La(1);
			if ( !(_la==COMPOP || _la==EQOP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
	}

	[RuleVersion(0)]
	public AddContext add() {
		AddContext _localctx = new AddContext(Context, State);
		EnterRule(_localctx, 106, RULE_add);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540; Match(OPEN);
			State = 541; Match(T__44);
			State = 542; @int();
			State = 543; @int();
			State = 544; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMult(this);
		}
	}

	[RuleVersion(0)]
	public MultContext mult() {
		MultContext _localctx = new MultContext(Context, State);
		EnterRule(_localctx, 108, RULE_mult);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 546; Match(OPEN);
			State = 547; Match(T__45);
			State = 548; @int();
			State = 549; @int();
			State = 550; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtractContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubtractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtract; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSubtract(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSubtract(this);
		}
	}

	[RuleVersion(0)]
	public SubtractContext subtract() {
		SubtractContext _localctx = new SubtractContext(Context, State);
		EnterRule(_localctx, 110, RULE_subtract);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552; Match(OPEN);
			State = 553; Match(T__46);
			State = 554; @int();
			State = 555; @int();
			State = 556; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMod(this);
		}
	}

	[RuleVersion(0)]
	public ModContext mod() {
		ModContext _localctx = new ModContext(Context, State);
		EnterRule(_localctx, 112, RULE_mod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 558; Match(OPEN);
			State = 559; Match(T__47);
			State = 560; @int();
			State = 561; @int();
			State = 562; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivideContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divide; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDivide(this);
		}
	}

	[RuleVersion(0)]
	public DivideContext divide() {
		DivideContext _localctx = new DivideContext(Context, State);
		EnterRule(_localctx, 114, RULE_divide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 564; Match(OPEN);
			State = 565; Match(T__48);
			State = 566; @int();
			State = 567; @int();
			State = 568; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SizeofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSizeof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSizeof(this);
		}
	}

	[RuleVersion(0)]
	public SizeofContext @sizeof() {
		SizeofContext _localctx = new SizeofContext(Context, State);
		EnterRule(_localctx, 116, RULE_sizeof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 570; Match(OPEN);
			State = 571; Match(T__49);
			State = 572; cstorage();
			State = 573; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaxofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MaxofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMaxof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMaxof(this);
		}
	}

	[RuleVersion(0)]
	public MaxofContext maxof() {
		MaxofContext _localctx = new MaxofContext(Context, State);
		EnterRule(_localctx, 118, RULE_maxof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 575; Match(OPEN);
			State = 576; Match(T__7);
			State = 577; cstorage();
			State = 578; Match(T__50);
			State = 579; namegr();
			State = 580; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MinofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMinof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMinof(this);
		}
	}

	[RuleVersion(0)]
	public MinofContext minof() {
		MinofContext _localctx = new MinofContext(Context, State);
		EnterRule(_localctx, 120, RULE_minof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 582; Match(OPEN);
			State = 583; Match(T__6);
			State = 584; cstorage();
			State = 585; Match(T__50);
			State = 586; namegr();
			State = 587; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public CstorageContext[] cstorage() {
			return GetRuleContexts<CstorageContext>();
		}
		public CstorageContext cstorage(int i) {
			return GetRuleContext<CstorageContext>(i);
		}
		public UnionofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterUnionof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitUnionof(this);
		}
	}

	[RuleVersion(0)]
	public UnionofContext unionof() {
		UnionofContext _localctx = new UnionofContext(Context, State);
		EnterRule(_localctx, 122, RULE_unionof);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 589; Match(OPEN);
			State = 590; Match(T__51);
			State = 592;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 591; cstorage();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 594;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 596; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public SumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSum(this);
		}
	}

	[RuleVersion(0)]
	public SumContext sum() {
		SumContext _localctx = new SumContext(Context, State);
		EnterRule(_localctx, 124, RULE_sum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 598; Match(OPEN);
			State = 599; Match(T__52);
			State = 605;
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				State = 600; rawstorage();
				}
				break;
			case 2:
				{
				{
				State = 601; cstorage();
				State = 602; Match(T__50);
				State = 603; namegr();
				}
				}
				break;
			}
			State = 607; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScorewhereContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ScorewhereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scorewhere; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterScorewhere(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitScorewhere(this);
		}
	}

	[RuleVersion(0)]
	public ScorewhereContext scorewhere() {
		ScorewhereContext _localctx = new ScorewhereContext(Context, State);
		EnterRule(_localctx, 126, RULE_scorewhere);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 609; Match(OPEN);
			State = 610; Match(T__53);
			State = 611; Match(T__42);
			State = 612; Match(T__50);
			State = 613; namegr();
			State = 614; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoreContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ScoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_score; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterScore(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitScore(this);
		}
	}

	[RuleVersion(0)]
	public ScoreContext score() {
		ScoreContext _localctx = new ScoreContext(Context, State);
		EnterRule(_localctx, 128, RULE_score);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 616; Match(OPEN);
			State = 617; Match(T__53);
			State = 618; card();
			State = 619; Match(T__50);
			State = 620; namegr();
			State = 621; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntwhereContext : ParserRuleContext {
		public ScorewhereContext scorewhere() {
			return GetRuleContext<ScorewhereContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public IntwhereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intwhere; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterIntwhere(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitIntwhere(this);
		}
	}

	[RuleVersion(0)]
	public IntwhereContext intwhere() {
		IntwhereContext _localctx = new IntwhereContext(Context, State);
		EnterRule(_localctx, 130, RULE_intwhere);
		try {
			State = 625;
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 623; scorewhere();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 624; @int();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		public OwnerContext owner() {
			return GetRuleContext<OwnerContext>(0);
		}
		public SizeofContext @sizeof() {
			return GetRuleContext<SizeofContext>(0);
		}
		public MultContext mult() {
			return GetRuleContext<MultContext>(0);
		}
		public SubtractContext subtract() {
			return GetRuleContext<SubtractContext>(0);
		}
		public ModContext mod() {
			return GetRuleContext<ModContext>(0);
		}
		public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public ScoreContext score() {
			return GetRuleContext<ScoreContext>(0);
		}
		public ITerminalNode[] INTNUM() { return GetTokens(RecycleParser.INTNUM); }
		public ITerminalNode INTNUM(int i) {
			return GetToken(RecycleParser.INTNUM, i);
		}
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 132, RULE_int);
		try {
			int _alt;
			State = 642;
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 627; owner();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 628; @sizeof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 629; mult();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 630; subtract();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 631; mod();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 632; add();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 633; divide();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 634; sum();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 635; rawstorage();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 636; score();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 638;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 637; Match(INTNUM);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 640;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamegrContext : ParserRuleContext {
		public ITerminalNode[] ANY() { return GetTokens(RecycleParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(RecycleParser.ANY, i);
		}
		public NamegrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namegr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterNamegr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitNamegr(this);
		}
	}

	[RuleVersion(0)]
	public NamegrContext namegr() {
		NamegrContext _localctx = new NamegrContext(Context, State);
		EnterRule(_localctx, 134, RULE_namegr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 645;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 644; Match(ANY);
				}
				}
				State = 647;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==ANY );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode[] ANY() { return GetTokens(RecycleParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(RecycleParser.ANY, i);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 136, RULE_name);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 650;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 649; Match(ANY);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 652;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x41\x291\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x6\x2\x93\n\x2\r\x2"+
		"\xE\x2\x94\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x6\x3\xA1\n\x3\r\x3\xE\x3\xA2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x6\x4\xAE\n\x4\r\x4\xE\x4\xAF\x3\x4\x3\x4\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x6\t\xC9\n\t\r\t\xE\t\xCA\x3\n\x3\n\x3"+
		"\n\x3\n\x3\n\x3\v\x6\v\xD3\n\v\r\v\xE\v\xD4\x3\f\x3\f\x3\f\x3\f\x3\f\x3"+
		"\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\xE3\n\f\x3\f\x3\f\x3\r\x3\r\x3\r"+
		"\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x6\xE\xF0\n\xE\r\xE\xE\xE\xF1\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x5\x10\xFE\n"+
		"\x10\x3\x10\x6\x10\x101\n\x10\r\x10\xE\x10\x102\x3\x10\x3\x10\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\a\x11\x10B\n\x11\f\x11\xE\x11\x10E\v\x11\x3\x11\x3"+
		"\x11\a\x11\x112\n\x11\f\x11\xE\x11\x115\v\x11\x3\x11\x3\x11\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x6\x12\x11E\n\x12\r\x12\xE\x12\x11F\x3\x12\x3"+
		"\x12\x3\x13\x3\x13\x3\x13\x6\x13\x127\n\x13\r\x13\xE\x13\x128\x3\x13\x3"+
		"\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x135"+
		"\n\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15"+
		"\x13F\n\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x152"+
		"\n\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x159\n\x1A\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x5\x1E\x168\n\x1E\x5\x1E\x16A\n\x1E\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x5\x1F\x172\n\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x177"+
		"\n\x1F\x3 \x3 \x3 \x3 \x3 \x5 \x17E\n \x3 \x3 \x3 \x3!\x3!\x3!\x3!\x3"+
		"!\x3\"\x3\"\x3\"\x3\"\x3\"\x3#\x3#\x3#\x5#\x190\n#\x3#\x3#\x3#\x3#\x3"+
		"$\x3$\x3$\x5$\x199\n$\x5$\x19B\n$\x3%\x3%\x3%\x3%\x3%\x3%\x3&\x3&\x3&"+
		"\x3&\x3&\x3&\x3\'\x3\'\x5\'\x1AB\n\'\x3(\x3(\x5(\x1AF\n(\x3)\x3)\x3*\x3"+
		"*\x3*\x3*\x3*\x3*\x3*\x5*\x1BA\n*\x3*\x3*\x3*\x3+\x3+\x3+\x6+\x1C2\n+"+
		"\r+\xE+\x1C3\x3,\x3,\x3,\x3-\x3-\x3-\x3-\x3.\x3.\x3.\x5.\x1D0\n.\x3.\x3"+
		".\x5.\x1D4\n.\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x5/\x1DD\n/\x3\x30\x3\x30\x3"+
		"\x30\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30\x1E6\n\x30\x3\x31\x3\x31\x3\x32"+
		"\x3\x32\x3\x33\x3\x33\x3\x33\x5\x33\x1EF\n\x33\x3\x33\x6\x33\x1F2\n\x33"+
		"\r\x33\xE\x33\x1F3\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3"+
		"\x34\x5\x34\x1FE\n\x34\x3\x34\x3\x34\x3\x35\x3\x35\x3\x35\x3\x35\x6\x35"+
		"\x206\n\x35\r\x35\xE\x35\x207\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35"+
		"\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x215\n\x35\x3\x35\x3\x35\x3"+
		"\x35\x3\x35\x5\x35\x21B\n\x35\x3\x36\x3\x36\x3\x37\x3\x37\x3\x37\x3\x37"+
		"\x3\x37\x3\x37\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x39\x3\x39"+
		"\x3\x39\x3\x39\x3\x39\x3\x39\x3:\x3:\x3:\x3:\x3:\x3:\x3;\x3;\x3;\x3;\x3"+
		";\x3;\x3<\x3<\x3<\x3<\x3<\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3>\x3>\x3>\x3>"+
		"\x3>\x3>\x3>\x3?\x3?\x3?\x6?\x253\n?\r?\xE?\x254\x3?\x3?\x3@\x3@\x3@\x3"+
		"@\x3@\x3@\x3@\x5@\x260\n@\x3@\x3@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3"+
		"\x41\x3\x41\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x43\x3"+
		"\x43\x5\x43\x274\n\x43\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44"+
		"\x3\x44\x3\x44\x3\x44\x3\x44\x6\x44\x281\n\x44\r\x44\xE\x44\x282\x5\x44"+
		"\x285\n\x44\x3\x45\x6\x45\x288\n\x45\r\x45\xE\x45\x289\x3\x46\x6\x46\x28D"+
		"\n\x46\r\x46\xE\x46\x28E\x3\x46\x12\x94\xA2\xAF\xCA\xD4\xF1\x102\x10C"+
		"\x113\x11F\x128\x1C3\x1F3\x207\x254\x28E\x2G\x2\x4\x6\b\n\f\xE\x10\x12"+
		"\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46"+
		"HJLNPRTVXZ\\^`\x62\x64\x66hjlnprtvxz|~\x80\x82\x84\x86\x88\x8A\x2\a\x3"+
		"\x2\x6\a\x3\x2\t\n\x3\x2\x16\x17\x4\x2\x1D\x1D%%\x3\x2:;\x2A1\x2\x8C\x3"+
		"\x2\x2\x2\x4\x99\x3\x2\x2\x2\x6\xA6\x3\x2\x2\x2\b\xB3\x3\x2\x2\x2\n\xB8"+
		"\x3\x2\x2\x2\f\xBD\x3\x2\x2\x2\xE\xC2\x3\x2\x2\x2\x10\xC8\x3\x2\x2\x2"+
		"\x12\xCC\x3\x2\x2\x2\x14\xD2\x3\x2\x2\x2\x16\xD6\x3\x2\x2\x2\x18\xE6\x3"+
		"\x2\x2\x2\x1A\xEC\x3\x2\x2\x2\x1C\xF3\x3\x2\x2\x2\x1E\xFA\x3\x2\x2\x2"+
		" \x106\x3\x2\x2\x2\"\x118\x3\x2\x2\x2$\x123\x3\x2\x2\x2&\x12D\x3\x2\x2"+
		"\x2(\x138\x3\x2\x2\x2*\x140\x3\x2\x2\x2,\x144\x3\x2\x2\x2.\x148\x3\x2"+
		"\x2\x2\x30\x14C\x3\x2\x2\x2\x32\x153\x3\x2\x2\x2\x34\x15A\x3\x2\x2\x2"+
		"\x36\x15D\x3\x2\x2\x2\x38\x160\x3\x2\x2\x2:\x169\x3\x2\x2\x2<\x176\x3"+
		"\x2\x2\x2>\x178\x3\x2\x2\x2@\x182\x3\x2\x2\x2\x42\x187\x3\x2\x2\x2\x44"+
		"\x18C\x3\x2\x2\x2\x46\x19A\x3\x2\x2\x2H\x19C\x3\x2\x2\x2J\x1A2\x3\x2\x2"+
		"\x2L\x1AA\x3\x2\x2\x2N\x1AC\x3\x2\x2\x2P\x1B0\x3\x2\x2\x2R\x1B2\x3\x2"+
		"\x2\x2T\x1C1\x3\x2\x2\x2V\x1C5\x3\x2\x2\x2X\x1C8\x3\x2\x2\x2Z\x1CC\x3"+
		"\x2\x2\x2\\\x1DC\x3\x2\x2\x2^\x1E5\x3\x2\x2\x2`\x1E7\x3\x2\x2\x2\x62\x1E9"+
		"\x3\x2\x2\x2\x64\x1EB\x3\x2\x2\x2\x66\x1F7\x3\x2\x2\x2h\x21A\x3\x2\x2"+
		"\x2j\x21C\x3\x2\x2\x2l\x21E\x3\x2\x2\x2n\x224\x3\x2\x2\x2p\x22A\x3\x2"+
		"\x2\x2r\x230\x3\x2\x2\x2t\x236\x3\x2\x2\x2v\x23C\x3\x2\x2\x2x\x241\x3"+
		"\x2\x2\x2z\x248\x3\x2\x2\x2|\x24F\x3\x2\x2\x2~\x258\x3\x2\x2\x2\x80\x263"+
		"\x3\x2\x2\x2\x82\x26A\x3\x2\x2\x2\x84\x273\x3\x2\x2\x2\x86\x284\x3\x2"+
		"\x2\x2\x88\x287\x3\x2\x2\x2\x8A\x28C\x3\x2\x2\x2\x8C\x8D\a>\x2\x2\x8D"+
		"\x8E\a\x3\x2\x2\x8E\x92\x5\x4\x3\x2\x8F\x93\x5\f\a\x2\x90\x93\x5\xE\b"+
		"\x2\x91\x93\x5\x6\x4\x2\x92\x8F\x3\x2\x2\x2\x92\x90\x3\x2\x2\x2\x92\x91"+
		"\x3\x2\x2\x2\x93\x94\x3\x2\x2\x2\x94\x95\x3\x2\x2\x2\x94\x92\x3\x2\x2"+
		"\x2\x95\x96\x3\x2\x2\x2\x96\x97\x5\b\x5\x2\x97\x98\a?\x2\x2\x98\x3\x3"+
		"\x2\x2\x2\x99\x9A\a>\x2\x2\x9A\x9B\a\x4\x2\x2\x9B\x9C\x5\x18\r\x2\x9C"+
		"\x9D\a>\x2\x2\x9D\x9E\x5\x1A\xE\x2\x9E\xA0\a?\x2\x2\x9F\xA1\x5\x1C\xF"+
		"\x2\xA0\x9F\x3\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2\xA3\x3\x2\x2\x2\xA2\xA0"+
		"\x3\x2\x2\x2\xA3\xA4\x3\x2\x2\x2\xA4\xA5\a?\x2\x2\xA5\x5\x3\x2\x2\x2\xA6"+
		"\xA7\a>\x2\x2\xA7\xA8\a\x5\x2\x2\xA8\xA9\t\x2\x2\x2\xA9\xAD\x5\n\x6\x2"+
		"\xAA\xAE\x5\f\a\x2\xAB\xAE\x5\xE\b\x2\xAC\xAE\x5\x6\x4\x2\xAD\xAA\x3\x2"+
		"\x2\x2\xAD\xAB\x3\x2\x2\x2\xAD\xAC\x3\x2\x2\x2\xAE\xAF\x3\x2\x2\x2\xAF"+
		"\xB0\x3\x2\x2\x2\xAF\xAD\x3\x2\x2\x2\xB0\xB1\x3\x2\x2\x2\xB1\xB2\a?\x2"+
		"\x2\xB2\a\x3\x2\x2\x2\xB3\xB4\a>\x2\x2\xB4\xB5\a\b\x2\x2\xB5\xB6\t\x3"+
		"\x2\x2\xB6\xB7\x5\x86\x44\x2\xB7\t\x3\x2\x2\x2\xB8\xB9\a>\x2\x2\xB9\xBA"+
		"\a\v\x2\x2\xBA\xBB\x5h\x35\x2\xBB\xBC\a?\x2\x2\xBC\v\x3\x2\x2\x2\xBD\xBE"+
		"\a>\x2\x2\xBE\xBF\a\f\x2\x2\xBF\xC0\x5\x10\t\x2\xC0\xC1\a?\x2\x2\xC1\r"+
		"\x3\x2\x2\x2\xC2\xC3\a>\x2\x2\xC3\xC4\a\r\x2\x2\xC4\xC5\x5\x10\t\x2\xC5"+
		"\xC6\a?\x2\x2\xC6\xF\x3\x2\x2\x2\xC7\xC9\x5\x12\n\x2\xC8\xC7\x3\x2\x2"+
		"\x2\xC9\xCA\x3\x2\x2\x2\xCA\xCB\x3\x2\x2\x2\xCA\xC8\x3\x2\x2\x2\xCB\x11"+
		"\x3\x2\x2\x2\xCC\xCD\a>\x2\x2\xCD\xCE\x5h\x35\x2\xCE\xCF\x5\x14\v\x2\xCF"+
		"\xD0\a?\x2\x2\xD0\x13\x3\x2\x2\x2\xD1\xD3\x5\x16\f\x2\xD2\xD1\x3\x2\x2"+
		"\x2\xD3\xD4\x3\x2\x2\x2\xD4\xD5\x3\x2\x2\x2\xD4\xD2\x3\x2\x2\x2\xD5\x15"+
		"\x3\x2\x2\x2\xD6\xE2\a>\x2\x2\xD7\xE3\x5\"\x12\x2\xD8\xE3\x5\x1A\xE\x2"+
		"\xD9\xE3\x5(\x15\x2\xDA\xE3\x5*\x16\x2\xDB\xE3\x5\x30\x19\x2\xDC\xE3\x5"+
		"\x32\x1A\x2\xDD\xE3\x5,\x17\x2\xDE\xE3\x5.\x18\x2\xDF\xE3\x5\x34\x1B\x2"+
		"\xE0\xE3\x5\x38\x1D\x2\xE1\xE3\x5\x36\x1C\x2\xE2\xD7\x3\x2\x2\x2\xE2\xD8"+
		"\x3\x2\x2\x2\xE2\xD9\x3\x2\x2\x2\xE2\xDA\x3\x2\x2\x2\xE2\xDB\x3\x2\x2"+
		"\x2\xE2\xDC\x3\x2\x2\x2\xE2\xDD\x3\x2\x2\x2\xE2\xDE\x3\x2\x2\x2\xE2\xDF"+
		"\x3\x2\x2\x2\xE2\xE0\x3\x2\x2\x2\xE2\xE1\x3\x2\x2\x2\xE3\xE4\x3\x2\x2"+
		"\x2\xE4\xE5\a?\x2\x2\xE5\x17\x3\x2\x2\x2\xE6\xE7\a>\x2\x2\xE7\xE8\a\xE"+
		"\x2\x2\xE8\xE9\a\xF\x2\x2\xE9\xEA\x5\x86\x44\x2\xEA\xEB\a?\x2\x2\xEB\x19"+
		"\x3\x2\x2\x2\xEC\xED\a\xE\x2\x2\xED\xEF\a\x10\x2\x2\xEE\xF0\x5 \x11\x2"+
		"\xEF\xEE\x3\x2\x2\x2\xF0\xF1\x3\x2\x2\x2\xF1\xF2\x3\x2\x2\x2\xF1\xEF\x3"+
		"\x2\x2\x2\xF2\x1B\x3\x2\x2\x2\xF3\xF4\a>\x2\x2\xF4\xF5\a\xE\x2\x2\xF5"+
		"\xF6\a\x11\x2\x2\xF6\xF7\x5H%\x2\xF7\xF8\x5\x1E\x10\x2\xF8\xF9\a?\x2\x2"+
		"\xF9\x1D\x3\x2\x2\x2\xFA\xFB\a>\x2\x2\xFB\xFD\a\x11\x2\x2\xFC\xFE\x5\x86"+
		"\x44\x2\xFD\xFC\x3\x2\x2\x2\xFD\xFE\x3\x2\x2\x2\xFE\x100\x3\x2\x2\x2\xFF"+
		"\x101\x5 \x11\x2\x100\xFF\x3\x2\x2\x2\x101\x102\x3\x2\x2\x2\x102\x103"+
		"\x3\x2\x2\x2\x102\x100\x3\x2\x2\x2\x103\x104\x3\x2\x2\x2\x104\x105\a?"+
		"\x2\x2\x105\x1F\x3\x2\x2\x2\x106\x10C\a>\x2\x2\x107\x108\x5T+\x2\x108"+
		"\x109\a\x12\x2\x2\x109\x10B\x3\x2\x2\x2\x10A\x107\x3\x2\x2\x2\x10B\x10E"+
		"\x3\x2\x2\x2\x10C\x10D\x3\x2\x2\x2\x10C\x10A\x3\x2\x2\x2\x10D\x10F\x3"+
		"\x2\x2\x2\x10E\x10C\x3\x2\x2\x2\x10F\x113\x5T+\x2\x110\x112\x5 \x11\x2"+
		"\x111\x110\x3\x2\x2\x2\x112\x115\x3\x2\x2\x2\x113\x114\x3\x2\x2\x2\x113"+
		"\x111\x3\x2\x2\x2\x114\x116\x3\x2\x2\x2\x115\x113\x3\x2\x2\x2\x116\x117"+
		"\a?\x2\x2\x117!\x3\x2\x2\x2\x118\x119\a\x13\x2\x2\x119\x11A\a\x14\x2\x2"+
		"\x11A\x11B\x5\x8A\x46\x2\x11B\x11D\a>\x2\x2\x11C\x11E\x5$\x13\x2\x11D"+
		"\x11C\x3\x2\x2\x2\x11E\x11F\x3\x2\x2\x2\x11F\x120\x3\x2\x2\x2\x11F\x11D"+
		"\x3\x2\x2\x2\x120\x121\x3\x2\x2\x2\x121\x122\a?\x2\x2\x122#\x3\x2\x2\x2"+
		"\x123\x124\a>\x2\x2\x124\x126\x5`\x31\x2\x125\x127\x5&\x14\x2\x126\x125"+
		"\x3\x2\x2\x2\x127\x128\x3\x2\x2\x2\x128\x129\x3\x2\x2\x2\x128\x126\x3"+
		"\x2\x2\x2\x129\x12A\x3\x2\x2\x2\x12A\x12B\x5\x86\x44\x2\x12B\x12C\a?\x2"+
		"\x2\x12C%\x3\x2\x2\x2\x12D\x12E\a>\x2\x2\x12E\x134\x5\x8A\x46\x2\x12F"+
		"\x130\a>\x2\x2\x130\x131\x5T+\x2\x131\x132\a?\x2\x2\x132\x135\x3\x2\x2"+
		"\x2\x133\x135\x5\\/\x2\x134\x12F\x3\x2\x2\x2\x134\x133\x3\x2\x2\x2\x135"+
		"\x136\x3\x2\x2\x2\x136\x137\a?\x2\x2\x137\'\x3\x2\x2\x2\x138\x139\a\x15"+
		"\x2\x2\x139\x13E\t\x4\x2\x2\x13A\x13F\x5\x86\x44\x2\x13B\x13F\a\x17\x2"+
		"\x2\x13C\x13F\a\x16\x2\x2\x13D\x13F\a\x18\x2\x2\x13E\x13A\x3\x2\x2\x2"+
		"\x13E\x13B\x3\x2\x2\x2\x13E\x13C\x3\x2\x2\x2\x13E\x13D\x3\x2\x2\x2\x13F"+
		")\x3\x2\x2\x2\x140\x141\a\x19\x2\x2\x141\x142\x5\x44#\x2\x142\x143\x5"+
		"\x86\x44\x2\x143+\x3\x2\x2\x2\x144\x145\a\x1A\x2\x2\x145\x146\x5\x44#"+
		"\x2\x146\x147\x5\x86\x44\x2\x147-\x3\x2\x2\x2\x148\x149\a\x1B\x2\x2\x149"+
		"\x14A\x5\x44#\x2\x14A\x14B\x5\x86\x44\x2\x14B/\x3\x2\x2\x2\x14C\x14D\a"+
		"\x1C\x2\x2\x14D\x14E\x5<\x1F\x2\x14E\x151\x5<\x1F\x2\x14F\x152\x5\x86"+
		"\x44\x2\x150\x152\a\x1D\x2\x2\x151\x14F\x3\x2\x2\x2\x151\x150\x3\x2\x2"+
		"\x2\x151\x152\x3\x2\x2\x2\x152\x31\x3\x2\x2\x2\x153\x154\a\x1E\x2\x2\x154"+
		"\x155\x5:\x1E\x2\x155\x158\x5> \x2\x156\x159\x5\x86\x44\x2\x157\x159\a"+
		"\x1D\x2\x2\x158\x156\x3\x2\x2\x2\x158\x157\x3\x2\x2\x2\x158\x159\x3\x2"+
		"\x2\x2\x159\x33\x3\x2\x2\x2\x15A\x15B\a\x1F\x2\x2\x15B\x15C\x5> \x2\x15C"+
		"\x35\x3\x2\x2\x2\x15D\x15E\a \x2\x2\x15E\x15F\x5\x46$\x2\x15F\x37\x3\x2"+
		"\x2\x2\x160\x161\a!\x2\x2\x161\x162\a\"\x2\x2\x162\x39\x3\x2\x2\x2\x163"+
		"\x16A\x5x=\x2\x164\x16A\x5z>\x2\x165\x168\x5<\x1F\x2\x166\x168\x5> \x2"+
		"\x167\x165\x3\x2\x2\x2\x167\x166\x3\x2\x2\x2\x168\x16A\x3\x2\x2\x2\x169"+
		"\x163\x3\x2\x2\x2\x169\x164\x3\x2\x2\x2\x169\x167\x3\x2\x2\x2\x16A;\x3"+
		"\x2\x2\x2\x16B\x177\x5\x42\"\x2\x16C\x171\a>\x2\x2\x16D\x172\a#\x2\x2"+
		"\x16E\x172\a$\x2\x2\x16F\x172\x5\x86\x44\x2\x170\x172\a%\x2\x2\x171\x16D"+
		"\x3\x2\x2\x2\x171\x16E\x3\x2\x2\x2\x171\x16F\x3\x2\x2\x2\x171\x170\x3"+
		"\x2\x2\x2\x172\x173\x3\x2\x2\x2\x173\x174\x5H%\x2\x174\x175\a?\x2\x2\x175"+
		"\x177\x3\x2\x2\x2\x176\x16B\x3\x2\x2\x2\x176\x16C\x3\x2\x2\x2\x177=\x3"+
		"\x2\x2\x2\x178\x17D\a>\x2\x2\x179\x17E\a#\x2\x2\x17A\x17E\a$\x2\x2\x17B"+
		"\x17E\x5\x86\x44\x2\x17C\x17E\a%\x2\x2\x17D\x179\x3\x2\x2\x2\x17D\x17A"+
		"\x3\x2\x2\x2\x17D\x17B\x3\x2\x2\x2\x17D\x17C\x3\x2\x2\x2\x17E\x17F\x3"+
		"\x2\x2\x2\x17F\x180\x5J&\x2\x180\x181\a?\x2\x2\x181?\x3\x2\x2\x2\x182"+
		"\x183\a>\x2\x2\x183\x184\a&\x2\x2\x184\x185\x5:\x1E\x2\x185\x186\a?\x2"+
		"\x2\x186\x41\x3\x2\x2\x2\x187\x188\a>\x2\x2\x188\x189\a\'\x2\x2\x189\x18A"+
		"\x5:\x1E\x2\x18A\x18B\a?\x2\x2\x18B\x43\x3\x2\x2\x2\x18C\x18F\a>\x2\x2"+
		"\x18D\x190\x5P)\x2\x18E\x190\x5R*\x2\x18F\x18D\x3\x2\x2\x2\x18F\x18E\x3"+
		"\x2\x2\x2\x190\x191\x3\x2\x2\x2\x191\x192\a(\x2\x2\x192\x193\x5\x88\x45"+
		"\x2\x193\x194\a?\x2\x2\x194\x45\x3\x2\x2\x2\x195\x19B\x5|?\x2\x196\x199"+
		"\x5H%\x2\x197\x199\x5J&\x2\x198\x196\x3\x2\x2\x2\x198\x197\x3\x2\x2\x2"+
		"\x199\x19B\x3\x2\x2\x2\x19A\x195\x3\x2\x2\x2\x19A\x198\x3\x2\x2\x2\x19B"+
		"G\x3\x2\x2\x2\x19C\x19D\a>\x2\x2\x19D\x19E\x5L\'\x2\x19E\x19F\a)\x2\x2"+
		"\x19F\x1A0\x5N(\x2\x1A0\x1A1\a?\x2\x2\x1A1I\x3\x2\x2\x2\x1A2\x1A3\a>\x2"+
		"\x2\x1A3\x1A4\x5L\'\x2\x1A4\x1A5\a*\x2\x2\x1A5\x1A6\x5N(\x2\x1A6\x1A7"+
		"\a?\x2\x2\x1A7K\x3\x2\x2\x2\x1A8\x1AB\x5P)\x2\x1A9\x1AB\x5R*\x2\x1AA\x1A8"+
		"\x3\x2\x2\x2\x1AA\x1A9\x3\x2\x2\x2\x1ABM\x3\x2\x2\x2\x1AC\x1AE\x5\x88"+
		"\x45\x2\x1AD\x1AF\x5V,\x2\x1AE\x1AD\x3\x2\x2\x2\x1AE\x1AF\x3\x2\x2\x2"+
		"\x1AFO\x3\x2\x2\x2\x1B0\x1B1\a\x3\x2\x2\x1B1Q\x3\x2\x2\x2\x1B2\x1B9\a"+
		">\x2\x2\x1B3\x1BA\x5`\x31\x2\x1B4\x1BA\x5\x86\x44\x2\x1B5\x1BA\a\x18\x2"+
		"\x2\x1B6\x1BA\a\x16\x2\x2\x1B7\x1BA\a\x17\x2\x2\x1B8\x1BA\x5R*\x2\x1B9"+
		"\x1B3\x3\x2\x2\x2\x1B9\x1B4\x3\x2\x2\x2\x1B9\x1B5\x3\x2\x2\x2\x1B9\x1B6"+
		"\x3\x2\x2\x2\x1B9\x1B7\x3\x2\x2\x2\x1B9\x1B8\x3\x2\x2\x2\x1BA\x1BB\x3"+
		"\x2\x2\x2\x1BB\x1BC\t\x2\x2\x2\x1BC\x1BD\a?\x2\x2\x1BDS\x3\x2\x2\x2\x1BE"+
		"\x1C2\a\x41\x2\x2\x1BF\x1C2\x5\x86\x44\x2\x1C0\x1C2\a\x39\x2\x2\x1C1\x1BE"+
		"\x3\x2\x2\x2\x1C1\x1BF\x3\x2\x2\x2\x1C1\x1C0\x3\x2\x2\x2\x1C2\x1C3\x3"+
		"\x2\x2\x2\x1C3\x1C4\x3\x2\x2\x2\x1C3\x1C1\x3\x2\x2\x2\x1C4U\x3\x2\x2\x2"+
		"\x1C5\x1C6\a+\x2\x2\x1C6\x1C7\x5\x64\x33\x2\x1C7W\x3\x2\x2\x2\x1C8\x1C9"+
		"\a;\x2\x2\x1C9\x1CA\x5\\/\x2\x1CA\x1CB\x5\\/\x2\x1CBY\x3\x2\x2\x2\x1CC"+
		"\x1CF\a;\x2\x2\x1CD\x1D0\x5\\/\x2\x1CE\x1D0\x5^\x30\x2\x1CF\x1CD\x3\x2"+
		"\x2\x2\x1CF\x1CE\x3\x2\x2\x2\x1D0\x1D3\x3\x2\x2\x2\x1D1\x1D4\x5\\/\x2"+
		"\x1D2\x1D4\x5^\x30\x2\x1D3\x1D1\x3\x2\x2\x2\x1D3\x1D2\x3\x2\x2\x2\x1D4"+
		"[\x3\x2\x2\x2\x1D5\x1DD\x5\x8A\x46\x2\x1D6\x1D7\a>\x2\x2\x1D7\x1D8\a,"+
		"\x2\x2\x1D8\x1D9\x5\x8A\x46\x2\x1D9\x1DA\x5:\x1E\x2\x1DA\x1DB\a?\x2\x2"+
		"\x1DB\x1DD\x3\x2\x2\x2\x1DC\x1D5\x3\x2\x2\x2\x1DC\x1D6\x3\x2\x2\x2\x1DD"+
		"]\x3\x2\x2\x2\x1DE\x1E6\x5\x8A\x46\x2\x1DF\x1E0\a>\x2\x2\x1E0\x1E1\a,"+
		"\x2\x2\x1E1\x1E2\x5T+\x2\x1E2\x1E3\a-\x2\x2\x1E3\x1E4\a?\x2\x2\x1E4\x1E6"+
		"\x3\x2\x2\x2\x1E5\x1DE\x3\x2\x2\x2\x1E5\x1DF\x3\x2\x2\x2\x1E6_\x3\x2\x2"+
		"\x2\x1E7\x1E8\t\x5\x2\x2\x1E8\x61\x3\x2\x2\x2\x1E9\x1EA\a.\x2\x2\x1EA"+
		"\x63\x3\x2\x2\x2\x1EB\x1EE\a>\x2\x2\x1EC\x1EF\x5`\x31\x2\x1ED\x1EF\x5"+
		"\x62\x32\x2\x1EE\x1EC\x3\x2\x2\x2\x1EE\x1ED\x3\x2\x2\x2\x1EF\x1F1\x3\x2"+
		"\x2\x2\x1F0\x1F2\x5\x66\x34\x2\x1F1\x1F0\x3\x2\x2\x2\x1F2\x1F3\x3\x2\x2"+
		"\x2\x1F3\x1F4\x3\x2\x2\x2\x1F3\x1F1\x3\x2\x2\x2\x1F4\x1F5\x3\x2\x2\x2"+
		"\x1F5\x1F6\a?\x2\x2\x1F6\x65\x3\x2\x2\x2\x1F7\x1FD\a>\x2\x2\x1F8\x1FE"+
		"\x5Z.\x2\x1F9\x1FA\x5j\x36\x2\x1FA\x1FB\x5\x80\x41\x2\x1FB\x1FC\x5\x86"+
		"\x44\x2\x1FC\x1FE\x3\x2\x2\x2\x1FD\x1F8\x3\x2\x2\x2\x1FD\x1F9\x3\x2\x2"+
		"\x2\x1FE\x1FF\x3\x2\x2\x2\x1FF\x200\a?\x2\x2\x200g\x3\x2\x2\x2\x201\x214"+
		"\a>\x2\x2\x202\x203\a\x39\x2\x2\x203\x205\x5h\x35\x2\x204\x206\x5h\x35"+
		"\x2\x205\x204\x3\x2\x2\x2\x206\x207\x3\x2\x2\x2\x207\x208\x3\x2\x2\x2"+
		"\x207\x205\x3\x2\x2\x2\x208\x215\x3\x2\x2\x2\x209\x20A\x5j\x36\x2\x20A"+
		"\x20B\x5\x86\x44\x2\x20B\x20C\x5\x86\x44\x2\x20C\x215\x3\x2\x2\x2\x20D"+
		"\x215\x5X-\x2\x20E\x20F\a;\x2\x2\x20F\x210\x5:\x1E\x2\x210\x211\x5:\x1E"+
		"\x2\x211\x215\x3\x2\x2\x2\x212\x213\a<\x2\x2\x213\x215\x5h\x35\x2\x214"+
		"\x202\x3\x2\x2\x2\x214\x209\x3\x2\x2\x2\x214\x20D\x3\x2\x2\x2\x214\x20E"+
		"\x3\x2\x2\x2\x214\x212\x3\x2\x2\x2\x215\x216\x3\x2\x2\x2\x216\x217\a?"+
		"\x2\x2\x217\x21B\x3\x2\x2\x2\x218\x219\a>\x2\x2\x219\x21B\a?\x2\x2\x21A"+
		"\x201\x3\x2\x2\x2\x21A\x218\x3\x2\x2\x2\x21Bi\x3\x2\x2\x2\x21C\x21D\t"+
		"\x6\x2\x2\x21Dk\x3\x2\x2\x2\x21E\x21F\a>\x2\x2\x21F\x220\a/\x2\x2\x220"+
		"\x221\x5\x86\x44\x2\x221\x222\x5\x86\x44\x2\x222\x223\a?\x2\x2\x223m\x3"+
		"\x2\x2\x2\x224\x225\a>\x2\x2\x225\x226\a\x30\x2\x2\x226\x227\x5\x86\x44"+
		"\x2\x227\x228\x5\x86\x44\x2\x228\x229\a?\x2\x2\x229o\x3\x2\x2\x2\x22A"+
		"\x22B\a>\x2\x2\x22B\x22C\a\x31\x2\x2\x22C\x22D\x5\x86\x44\x2\x22D\x22E"+
		"\x5\x86\x44\x2\x22E\x22F\a?\x2\x2\x22Fq\x3\x2\x2\x2\x230\x231\a>\x2\x2"+
		"\x231\x232\a\x32\x2\x2\x232\x233\x5\x86\x44\x2\x233\x234\x5\x86\x44\x2"+
		"\x234\x235\a?\x2\x2\x235s\x3\x2\x2\x2\x236\x237\a>\x2\x2\x237\x238\a\x33"+
		"\x2\x2\x238\x239\x5\x86\x44\x2\x239\x23A\x5\x86\x44\x2\x23A\x23B\a?\x2"+
		"\x2\x23Bu\x3\x2\x2\x2\x23C\x23D\a>\x2\x2\x23D\x23E\a\x34\x2\x2\x23E\x23F"+
		"\x5\x46$\x2\x23F\x240\a?\x2\x2\x240w\x3\x2\x2\x2\x241\x242\a>\x2\x2\x242"+
		"\x243\a\n\x2\x2\x243\x244\x5\x46$\x2\x244\x245\a\x35\x2\x2\x245\x246\x5"+
		"\x88\x45\x2\x246\x247\a?\x2\x2\x247y\x3\x2\x2\x2\x248\x249\a>\x2\x2\x249"+
		"\x24A\a\t\x2\x2\x24A\x24B\x5\x46$\x2\x24B\x24C\a\x35\x2\x2\x24C\x24D\x5"+
		"\x88\x45\x2\x24D\x24E\a?\x2\x2\x24E{\x3\x2\x2\x2\x24F\x250\a>\x2\x2\x250"+
		"\x252\a\x36\x2\x2\x251\x253\x5\x46$\x2\x252\x251\x3\x2\x2\x2\x253\x254"+
		"\x3\x2\x2\x2\x254\x255\x3\x2\x2\x2\x254\x252\x3\x2\x2\x2\x255\x256\x3"+
		"\x2\x2\x2\x256\x257\a?\x2\x2\x257}\x3\x2\x2\x2\x258\x259\a>\x2\x2\x259"+
		"\x25F\a\x37\x2\x2\x25A\x260\x5\x44#\x2\x25B\x25C\x5\x46$\x2\x25C\x25D"+
		"\a\x35\x2\x2\x25D\x25E\x5\x88\x45\x2\x25E\x260\x3\x2\x2\x2\x25F\x25A\x3"+
		"\x2\x2\x2\x25F\x25B\x3\x2\x2\x2\x260\x261\x3\x2\x2\x2\x261\x262\a?\x2"+
		"\x2\x262\x7F\x3\x2\x2\x2\x263\x264\a>\x2\x2\x264\x265\a\x38\x2\x2\x265"+
		"\x266\a-\x2\x2\x266\x267\a\x35\x2\x2\x267\x268\x5\x88\x45\x2\x268\x269"+
		"\a?\x2\x2\x269\x81\x3\x2\x2\x2\x26A\x26B\a>\x2\x2\x26B\x26C\a\x38\x2\x2"+
		"\x26C\x26D\x5:\x1E\x2\x26D\x26E\a\x35\x2\x2\x26E\x26F\x5\x88\x45\x2\x26F"+
		"\x270\a?\x2\x2\x270\x83\x3\x2\x2\x2\x271\x274\x5\x80\x41\x2\x272\x274"+
		"\x5\x86\x44\x2\x273\x271\x3\x2\x2\x2\x273\x272\x3\x2\x2\x2\x274\x85\x3"+
		"\x2\x2\x2\x275\x285\x5@!\x2\x276\x285\x5v<\x2\x277\x285\x5n\x38\x2\x278"+
		"\x285\x5p\x39\x2\x279\x285\x5r:\x2\x27A\x285\x5l\x37\x2\x27B\x285\x5t"+
		";\x2\x27C\x285\x5~@\x2\x27D\x285\x5\x44#\x2\x27E\x285\x5\x82\x42\x2\x27F"+
		"\x281\a=\x2\x2\x280\x27F\x3\x2\x2\x2\x281\x282\x3\x2\x2\x2\x282\x280\x3"+
		"\x2\x2\x2\x282\x283\x3\x2\x2\x2\x283\x285\x3\x2\x2\x2\x284\x275\x3\x2"+
		"\x2\x2\x284\x276\x3\x2\x2\x2\x284\x277\x3\x2\x2\x2\x284\x278\x3\x2\x2"+
		"\x2\x284\x279\x3\x2\x2\x2\x284\x27A\x3\x2\x2\x2\x284\x27B\x3\x2\x2\x2"+
		"\x284\x27C\x3\x2\x2\x2\x284\x27D\x3\x2\x2\x2\x284\x27E\x3\x2\x2\x2\x284"+
		"\x280\x3\x2\x2\x2\x285\x87\x3\x2\x2\x2\x286\x288\a\x41\x2\x2\x287\x286"+
		"\x3\x2\x2\x2\x288\x289\x3\x2\x2\x2\x289\x287\x3\x2\x2\x2\x289\x28A\x3"+
		"\x2\x2\x2\x28A\x89\x3\x2\x2\x2\x28B\x28D\a\x41\x2\x2\x28C\x28B\x3\x2\x2"+
		"\x2\x28D\x28E\x3\x2\x2\x2\x28E\x28F\x3\x2\x2\x2\x28E\x28C\x3\x2\x2\x2"+
		"\x28F\x8B\x3\x2\x2\x2\x33\x92\x94\xA2\xAD\xAF\xCA\xD4\xE2\xF1\xFD\x102"+
		"\x10C\x113\x11F\x128\x134\x13E\x151\x158\x167\x169\x171\x176\x17D\x18F"+
		"\x198\x19A\x1AA\x1AE\x1B9\x1C1\x1C3\x1CF\x1D3\x1DC\x1E5\x1EE\x1F3\x1FD"+
		"\x207\x214\x21A\x254\x25F\x273\x282\x284\x289\x28E";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
