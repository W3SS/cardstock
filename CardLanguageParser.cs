//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CardLanguage.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class CardLanguageParser : Parser {
	public const int
		T__0=1, T__1=2, ANY=3;
	public const int
		RULE_body = 0, RULE_childNode = 1, RULE_open = 2, RULE_many = 3, RULE_close = 4;
	public static readonly string[] ruleNames = {
		"body", "childNode", "open", "many", "close"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CardLanguage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CardLanguageParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class BodyContext : ParserRuleContext {
		public OpenContext open() {
			return GetRuleContext<OpenContext>(0);
		}
		public ChildNodeContext childNode() {
			return GetRuleContext<ChildNodeContext>(0);
		}
		public CloseContext close() {
			return GetRuleContext<CloseContext>(0);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 0, RULE_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10; open();
			State = 11; childNode();
			State = 12; close();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChildNodeContext : ParserRuleContext {
		public OpenContext open() {
			return GetRuleContext<OpenContext>(0);
		}
		public ChildNodeContext[] childNode() {
			return GetRuleContexts<ChildNodeContext>();
		}
		public ChildNodeContext childNode(int i) {
			return GetRuleContext<ChildNodeContext>(i);
		}
		public CloseContext close() {
			return GetRuleContext<CloseContext>(0);
		}
		public ManyContext many() {
			return GetRuleContext<ManyContext>(0);
		}
		public ChildNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_childNode; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterChildNode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitChildNode(this);
		}
	}

	[RuleVersion(0)]
	public ChildNodeContext childNode() {
		ChildNodeContext _localctx = new ChildNodeContext(Context, State);
		EnterRule(_localctx, 2, RULE_childNode);
		try {
			State = 24;
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 14; open();
				State = 15; childNode();
				State = 16; close();
				State = 17; childNode();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 19; open();
				State = 20; childNode();
				State = 21; close();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 23; many();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenContext : ParserRuleContext {
		public OpenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterOpen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitOpen(this);
		}
	}

	[RuleVersion(0)]
	public OpenContext open() {
		OpenContext _localctx = new OpenContext(Context, State);
		EnterRule(_localctx, 4, RULE_open);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ManyContext : ParserRuleContext {
		public ITerminalNode[] ANY() { return GetTokens(CardLanguageParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(CardLanguageParser.ANY, i);
		}
		public ManyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_many; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterMany(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitMany(this);
		}
	}

	[RuleVersion(0)]
	public ManyContext many() {
		ManyContext _localctx = new ManyContext(Context, State);
		EnterRule(_localctx, 6, RULE_many);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 28; Match(ANY);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 31;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseContext : ParserRuleContext {
		public CloseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_close; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterClose(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitClose(this);
		}
	}

	[RuleVersion(0)]
	public CloseContext close() {
		CloseContext _localctx = new CloseContext(Context, State);
		EnterRule(_localctx, 8, RULE_close);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x5&\x4\x2\t\x2\x4"+
		"\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x1B\n\x3"+
		"\x3\x4\x3\x4\x3\x5\x6\x5 \n\x5\r\x5\xE\x5!\x3\x6\x3\x6\x3\x6\x3!\x2\a"+
		"\x2\x4\x6\b\n\x2\x2#\x2\f\x3\x2\x2\x2\x4\x1A\x3\x2\x2\x2\x6\x1C\x3\x2"+
		"\x2\x2\b\x1F\x3\x2\x2\x2\n#\x3\x2\x2\x2\f\r\x5\x6\x4\x2\r\xE\x5\x4\x3"+
		"\x2\xE\xF\x5\n\x6\x2\xF\x3\x3\x2\x2\x2\x10\x11\x5\x6\x4\x2\x11\x12\x5"+
		"\x4\x3\x2\x12\x13\x5\n\x6\x2\x13\x14\x5\x4\x3\x2\x14\x1B\x3\x2\x2\x2\x15"+
		"\x16\x5\x6\x4\x2\x16\x17\x5\x4\x3\x2\x17\x18\x5\n\x6\x2\x18\x1B\x3\x2"+
		"\x2\x2\x19\x1B\x5\b\x5\x2\x1A\x10\x3\x2\x2\x2\x1A\x15\x3\x2\x2\x2\x1A"+
		"\x19\x3\x2\x2\x2\x1B\x5\x3\x2\x2\x2\x1C\x1D\a\x3\x2\x2\x1D\a\x3\x2\x2"+
		"\x2\x1E \a\x5\x2\x2\x1F\x1E\x3\x2\x2\x2 !\x3\x2\x2\x2!\"\x3\x2\x2\x2!"+
		"\x1F\x3\x2\x2\x2\"\t\x3\x2\x2\x2#$\a\x4\x2\x2$\v\x3\x2\x2\x2\x4\x1A!";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
