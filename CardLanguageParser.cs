//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CardLanguage.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class CardLanguageParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		BOOLOP=53, COMPOP=54, EQOP=55, UNOP=56, INTNUM=57, OPEN=58, CLOSE=59, 
		WS=60, ANY=61;
	public const int
		RULE_game = 0, RULE_stage = 1, RULE_endcondition = 2, RULE_computermoves = 3, 
		RULE_playermoves = 4, RULE_multigameaction = 5, RULE_gameaction = 6, RULE_multiaction = 7, 
		RULE_action = 8, RULE_loccreate = 9, RULE_locationdef = 10, RULE_storagecreate = 11, 
		RULE_playercreate = 12, RULE_teamcreate = 13, RULE_obj = 14, RULE_init = 15, 
		RULE_playerinit = 16, RULE_deckinit = 17, RULE_deck = 18, RULE_attribute = 19, 
		RULE_pointsinit = 20, RULE_awards = 21, RULE_subaward = 22, RULE_setaction = 23, 
		RULE_incaction = 24, RULE_decaction = 25, RULE_moveaction = 26, RULE_copyaction = 27, 
		RULE_turnaction = 28, RULE_removeaction = 29, RULE_shuffleaction = 30, 
		RULE_namelist = 31, RULE_loclist = 32, RULE_loc = 33, RULE_imag = 34, 
		RULE_card = 35, RULE_owner = 36, RULE_rawstorage = 37, RULE_locstorage = 38, 
		RULE_who = 39, RULE_who2 = 40, RULE_trueany = 41, RULE_whereclause = 42, 
		RULE_boolatt = 43, RULE_attrcomp = 44, RULE_cardatt = 45, RULE_posq = 46, 
		RULE_boolean = 47, RULE_intop = 48, RULE_add = 49, RULE_mult = 50, RULE_subtract = 51, 
		RULE_mod = 52, RULE_divide = 53, RULE_sizeof = 54, RULE_maxof = 55, RULE_unionof = 56, 
		RULE_sum = 57, RULE_int = 58, RULE_namegr = 59, RULE_name = 60;
	public static readonly string[] ruleNames = {
		"game", "stage", "endcondition", "computermoves", "playermoves", "multigameaction", 
		"gameaction", "multiaction", "action", "loccreate", "locationdef", "storagecreate", 
		"playercreate", "teamcreate", "obj", "init", "playerinit", "deckinit", 
		"deck", "attribute", "pointsinit", "awards", "subaward", "setaction", 
		"incaction", "decaction", "moveaction", "copyaction", "turnaction", "removeaction", 
		"shuffleaction", "namelist", "loclist", "loc", "imag", "card", "owner", 
		"rawstorage", "locstorage", "who", "who2", "trueany", "whereclause", "boolatt", 
		"attrcomp", "cardatt", "posq", "boolean", "intop", "add", "mult", "subtract", 
		"mod", "divide", "sizeof", "maxof", "unionof", "sum", "int", "namegr", 
		"name"
	};

	private static readonly string[] _LiteralNames = {
		null, "'game'", "'stage'", "'player'", "'team'", "'end'", "'comp'", "'choice'", 
		"'create'", "'loc'", "'Stack'", "'List'", "'Queue'", "'Memory'", "'sto'", 
		"','", "'players'", "'teams'", "'alternate'", "'initialize'", "'sequential'", 
		"'permdeck'", "'points'", "'set'", "'next'", "'current'", "'inc'", "'dec'", 
		"'move'", "'all'", "'copy'", "'turn'", "'over'", "'pass'", "'remove'", 
		"'shuffle'", "'top'", "'bottom'", "'any'", "'owner'", "'where'", "'cardatt'", 
		"'this'", "'+'", "'*'", "'-'", "'%'", "'//'", "'size'", "'max'", "'using'", 
		"'union'", "'sum'", null, null, null, "'not'", null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "BOOLOP", "COMPOP", "EQOP", "UNOP", "INTNUM", 
		"OPEN", "CLOSE", "WS", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CardLanguage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CardLanguageParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class GameContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public ComputermovesContext[] computermoves() {
			return GetRuleContexts<ComputermovesContext>();
		}
		public ComputermovesContext computermoves(int i) {
			return GetRuleContext<ComputermovesContext>(i);
		}
		public PlayermovesContext[] playermoves() {
			return GetRuleContexts<PlayermovesContext>();
		}
		public PlayermovesContext playermoves(int i) {
			return GetRuleContext<PlayermovesContext>(i);
		}
		public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public GameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_game; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterGame(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitGame(this);
		}
	}

	[RuleVersion(0)]
	public GameContext game() {
		GameContext _localctx = new GameContext(Context, State);
		EnterRule(_localctx, 0, RULE_game);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 122; Match(OPEN);
			State = 123; Match(T__0);
			State = 127;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 127;
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 124; computermoves();
						}
						break;
					case 2:
						{
						State = 125; playermoves();
						}
						break;
					case 3:
						{
						State = 126; stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 129;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 131; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public EndconditionContext endcondition() {
			return GetRuleContext<EndconditionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public ComputermovesContext[] computermoves() {
			return GetRuleContexts<ComputermovesContext>();
		}
		public ComputermovesContext computermoves(int i) {
			return GetRuleContext<ComputermovesContext>(i);
		}
		public PlayermovesContext[] playermoves() {
			return GetRuleContexts<PlayermovesContext>();
		}
		public PlayermovesContext playermoves(int i) {
			return GetRuleContext<PlayermovesContext>(i);
		}
		public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public StageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stage; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterStage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitStage(this);
		}
	}

	[RuleVersion(0)]
	public StageContext stage() {
		StageContext _localctx = new StageContext(Context, State);
		EnterRule(_localctx, 2, RULE_stage);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; Match(OPEN);
			State = 134; Match(T__1);
			State = 135;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 136; endcondition();
			State = 140;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 140;
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						State = 137; computermoves();
						}
						break;
					case 2:
						{
						State = 138; playermoves();
						}
						break;
					case 3:
						{
						State = 139; stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 142;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 144; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndconditionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public EndconditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endcondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterEndcondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitEndcondition(this);
		}
	}

	[RuleVersion(0)]
	public EndconditionContext endcondition() {
		EndconditionContext _localctx = new EndconditionContext(Context, State);
		EnterRule(_localctx, 4, RULE_endcondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; Match(OPEN);
			State = 147; Match(T__4);
			State = 148; boolean();
			State = 149; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComputermovesContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public MultigameactionContext multigameaction() {
			return GetRuleContext<MultigameactionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public ComputermovesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_computermoves; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterComputermoves(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitComputermoves(this);
		}
	}

	[RuleVersion(0)]
	public ComputermovesContext computermoves() {
		ComputermovesContext _localctx = new ComputermovesContext(Context, State);
		EnterRule(_localctx, 6, RULE_computermoves);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151; Match(OPEN);
			State = 152; Match(T__5);
			State = 153; multigameaction();
			State = 154; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayermovesContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public MultigameactionContext multigameaction() {
			return GetRuleContext<MultigameactionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public PlayermovesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playermoves; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterPlayermoves(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitPlayermoves(this);
		}
	}

	[RuleVersion(0)]
	public PlayermovesContext playermoves() {
		PlayermovesContext _localctx = new PlayermovesContext(Context, State);
		EnterRule(_localctx, 8, RULE_playermoves);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; Match(OPEN);
			State = 157; Match(T__6);
			State = 158; multigameaction();
			State = 159; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultigameactionContext : ParserRuleContext {
		public GameactionContext[] gameaction() {
			return GetRuleContexts<GameactionContext>();
		}
		public GameactionContext gameaction(int i) {
			return GetRuleContext<GameactionContext>(i);
		}
		public MultigameactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multigameaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterMultigameaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitMultigameaction(this);
		}
	}

	[RuleVersion(0)]
	public MultigameactionContext multigameaction() {
		MultigameactionContext _localctx = new MultigameactionContext(Context, State);
		EnterRule(_localctx, 10, RULE_multigameaction);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 161; gameaction();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 164;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GameactionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public MultiactionContext multiaction() {
			return GetRuleContext<MultiactionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public GameactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gameaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterGameaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitGameaction(this);
		}
	}

	[RuleVersion(0)]
	public GameactionContext gameaction() {
		GameactionContext _localctx = new GameactionContext(Context, State);
		EnterRule(_localctx, 12, RULE_gameaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; Match(OPEN);
			State = 167; boolean();
			State = 168; multiaction();
			State = 169; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiactionContext : ParserRuleContext {
		public ActionContext[] action() {
			return GetRuleContexts<ActionContext>();
		}
		public ActionContext action(int i) {
			return GetRuleContext<ActionContext>(i);
		}
		public MultiactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterMultiaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitMultiaction(this);
		}
	}

	[RuleVersion(0)]
	public MultiactionContext multiaction() {
		MultiactionContext _localctx = new MultiactionContext(Context, State);
		EnterRule(_localctx, 14, RULE_multiaction);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 171; action();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 174;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public InitContext init() {
			return GetRuleContext<InitContext>(0);
		}
		public LoccreateContext loccreate() {
			return GetRuleContext<LoccreateContext>(0);
		}
		public StoragecreateContext storagecreate() {
			return GetRuleContext<StoragecreateContext>(0);
		}
		public PlayercreateContext playercreate() {
			return GetRuleContext<PlayercreateContext>(0);
		}
		public TeamcreateContext teamcreate() {
			return GetRuleContext<TeamcreateContext>(0);
		}
		public SetactionContext setaction() {
			return GetRuleContext<SetactionContext>(0);
		}
		public MoveactionContext moveaction() {
			return GetRuleContext<MoveactionContext>(0);
		}
		public CopyactionContext copyaction() {
			return GetRuleContext<CopyactionContext>(0);
		}
		public IncactionContext incaction() {
			return GetRuleContext<IncactionContext>(0);
		}
		public DecactionContext decaction() {
			return GetRuleContext<DecactionContext>(0);
		}
		public RemoveactionContext removeaction() {
			return GetRuleContext<RemoveactionContext>(0);
		}
		public TurnactionContext turnaction() {
			return GetRuleContext<TurnactionContext>(0);
		}
		public ShuffleactionContext shuffleaction() {
			return GetRuleContext<ShuffleactionContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 16, RULE_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176; Match(OPEN);
			State = 190;
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 177; init();
				}
				break;
			case 2:
				{
				State = 178; loccreate();
				}
				break;
			case 3:
				{
				State = 179; storagecreate();
				}
				break;
			case 4:
				{
				State = 180; playercreate();
				}
				break;
			case 5:
				{
				State = 181; teamcreate();
				}
				break;
			case 6:
				{
				State = 182; setaction();
				}
				break;
			case 7:
				{
				State = 183; moveaction();
				}
				break;
			case 8:
				{
				State = 184; copyaction();
				}
				break;
			case 9:
				{
				State = 185; incaction();
				}
				break;
			case 10:
				{
				State = 186; decaction();
				}
				break;
			case 11:
				{
				State = 187; removeaction();
				}
				break;
			case 12:
				{
				State = 188; turnaction();
				}
				break;
			case 13:
				{
				State = 189; shuffleaction();
				}
				break;
			}
			State = 192; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoccreateContext : ParserRuleContext {
		public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		public LocationdefContext[] locationdef() {
			return GetRuleContexts<LocationdefContext>();
		}
		public LocationdefContext locationdef(int i) {
			return GetRuleContext<LocationdefContext>(i);
		}
		public LoccreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loccreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterLoccreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitLoccreate(this);
		}
	}

	[RuleVersion(0)]
	public LoccreateContext loccreate() {
		LoccreateContext _localctx = new LoccreateContext(Context, State);
		EnterRule(_localctx, 18, RULE_loccreate);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 194; Match(T__7);
			State = 195; Match(T__8);
			State = 196; obj();
			State = 198;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 197; locationdef();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 200;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocationdefContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public LocationdefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locationdef; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterLocationdef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitLocationdef(this);
		}
	}

	[RuleVersion(0)]
	public LocationdefContext locationdef() {
		LocationdefContext _localctx = new LocationdefContext(Context, State);
		EnterRule(_localctx, 20, RULE_locationdef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202; Match(OPEN);
			State = 203; name();
			State = 204;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__10) | (1L << T__11))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 206;
			_la = TokenStream.La(1);
			if (_la==T__12) {
				{
				State = 205; Match(T__12);
				}
			}

			State = 208; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoragecreateContext : ParserRuleContext {
		public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public StoragecreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storagecreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterStoragecreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitStoragecreate(this);
		}
	}

	[RuleVersion(0)]
	public StoragecreateContext storagecreate() {
		StoragecreateContext _localctx = new StoragecreateContext(Context, State);
		EnterRule(_localctx, 22, RULE_storagecreate);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 210; Match(T__7);
			State = 211; Match(T__13);
			State = 212; obj();
			State = 213; Match(OPEN);
			State = 219;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 214; namegr();
					State = 215; Match(T__14);
					}
					} 
				}
				State = 221;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			State = 222; namegr();
			State = 223; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayercreateContext : ParserRuleContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public PlayercreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playercreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterPlayercreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitPlayercreate(this);
		}
	}

	[RuleVersion(0)]
	public PlayercreateContext playercreate() {
		PlayercreateContext _localctx = new PlayercreateContext(Context, State);
		EnterRule(_localctx, 24, RULE_playercreate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225; Match(T__7);
			State = 226; Match(T__15);
			State = 227; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamcreateContext : ParserRuleContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public TeamcreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamcreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterTeamcreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitTeamcreate(this);
		}
	}

	[RuleVersion(0)]
	public TeamcreateContext teamcreate() {
		TeamcreateContext _localctx = new TeamcreateContext(Context, State);
		EnterRule(_localctx, 26, RULE_teamcreate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229; Match(T__7);
			State = 230; Match(T__16);
			State = 231; @int();
			State = 233;
			_la = TokenStream.La(1);
			if (_la==T__17) {
				{
				State = 232; Match(T__17);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjContext : ParserRuleContext {
		public ObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterObj(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitObj(this);
		}
	}

	[RuleVersion(0)]
	public ObjContext obj() {
		ObjContext _localctx = new ObjContext(Context, State);
		EnterRule(_localctx, 28, RULE_obj);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitContext : ParserRuleContext {
		public PlayerinitContext playerinit() {
			return GetRuleContext<PlayerinitContext>(0);
		}
		public DeckinitContext deckinit() {
			return GetRuleContext<DeckinitContext>(0);
		}
		public PointsinitContext pointsinit() {
			return GetRuleContext<PointsinitContext>(0);
		}
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_init; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitInit(this);
		}
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(Context, State);
		EnterRule(_localctx, 30, RULE_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237; Match(T__18);
			State = 241;
			switch (TokenStream.La(1)) {
			case T__15:
				{
				State = 238; playerinit();
				}
				break;
			case OPEN:
				{
				State = 239; deckinit();
				}
				break;
			case T__21:
				{
				State = 240; pointsinit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayerinitContext : ParserRuleContext {
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public PlayerinitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playerinit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterPlayerinit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitPlayerinit(this);
		}
	}

	[RuleVersion(0)]
	public PlayerinitContext playerinit() {
		PlayerinitContext _localctx = new PlayerinitContext(Context, State);
		EnterRule(_localctx, 32, RULE_playerinit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243; Match(T__15);
			State = 244; @int();
			State = 245; @int();
			State = 246;
			_la = TokenStream.La(1);
			if ( !(_la==T__17 || _la==T__19) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckinitContext : ParserRuleContext {
		public LocstorageContext locstorage() {
			return GetRuleContext<LocstorageContext>(0);
		}
		public DeckContext deck() {
			return GetRuleContext<DeckContext>(0);
		}
		public DeckinitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deckinit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterDeckinit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitDeckinit(this);
		}
	}

	[RuleVersion(0)]
	public DeckinitContext deckinit() {
		DeckinitContext _localctx = new DeckinitContext(Context, State);
		EnterRule(_localctx, 34, RULE_deckinit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248; locstorage();
			State = 249; deck();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public DeckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deck; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterDeck(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitDeck(this);
		}
	}

	[RuleVersion(0)]
	public DeckContext deck() {
		DeckContext _localctx = new DeckContext(Context, State);
		EnterRule(_localctx, 36, RULE_deck);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 251; Match(OPEN);
			State = 252; Match(T__20);
			State = 254;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 253; attribute();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 256;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 258; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public TrueanyContext[] trueany() {
			return GetRuleContexts<TrueanyContext>();
		}
		public TrueanyContext trueany(int i) {
			return GetRuleContext<TrueanyContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 38, RULE_attribute);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 260; Match(OPEN);
			State = 266;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 261; trueany();
					State = 262; Match(T__14);
					}
					} 
				}
				State = 268;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			State = 269; trueany();
			State = 273;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 270; attribute();
					}
					} 
				}
				State = 275;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 276; Match(CLOSE);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointsinitContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public AwardsContext[] awards() {
			return GetRuleContexts<AwardsContext>();
		}
		public AwardsContext awards(int i) {
			return GetRuleContext<AwardsContext>(i);
		}
		public PointsinitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointsinit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterPointsinit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitPointsinit(this);
		}
	}

	[RuleVersion(0)]
	public PointsinitContext pointsinit() {
		PointsinitContext _localctx = new PointsinitContext(Context, State);
		EnterRule(_localctx, 40, RULE_pointsinit);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 278; Match(T__21);
			State = 279; name();
			State = 280; Match(OPEN);
			State = 282;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 281; awards();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 284;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 286; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwardsContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public PosqContext posq() {
			return GetRuleContext<PosqContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public SubawardContext[] subaward() {
			return GetRuleContexts<SubawardContext>();
		}
		public SubawardContext subaward(int i) {
			return GetRuleContext<SubawardContext>(i);
		}
		public AwardsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awards; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterAwards(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitAwards(this);
		}
	}

	[RuleVersion(0)]
	public AwardsContext awards() {
		AwardsContext _localctx = new AwardsContext(Context, State);
		EnterRule(_localctx, 42, RULE_awards);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 288; Match(OPEN);
			State = 289; posq();
			State = 291;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 290; subaward();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 293;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 295; @int();
			State = 296; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubawardContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(CardLanguageParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(CardLanguageParser.OPEN, i);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(CardLanguageParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(CardLanguageParser.CLOSE, i);
		}
		public TrueanyContext trueany() {
			return GetRuleContext<TrueanyContext>(0);
		}
		public CardattContext cardatt() {
			return GetRuleContext<CardattContext>(0);
		}
		public SubawardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subaward; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterSubaward(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitSubaward(this);
		}
	}

	[RuleVersion(0)]
	public SubawardContext subaward() {
		SubawardContext _localctx = new SubawardContext(Context, State);
		EnterRule(_localctx, 44, RULE_subaward);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298; Match(OPEN);
			State = 299; name();
			State = 305;
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				{
				State = 300; Match(OPEN);
				State = 301; trueany();
				State = 302; Match(CLOSE);
				}
				}
				break;
			case 2:
				{
				{
				State = 304; cardatt();
				}
				}
				break;
			}
			State = 307; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetactionContext : ParserRuleContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public SetactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterSetaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitSetaction(this);
		}
	}

	[RuleVersion(0)]
	public SetactionContext setaction() {
		SetactionContext _localctx = new SetactionContext(Context, State);
		EnterRule(_localctx, 46, RULE_setaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309; Match(T__22);
			State = 313;
			switch (TokenStream.La(1)) {
			case T__23:
				{
				State = 310; Match(T__23);
				}
				break;
			case T__24:
				{
				State = 311; Match(T__24);
				}
				break;
			case OPEN:
				{
				State = 312; rawstorage();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 315; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public IncactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterIncaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitIncaction(this);
		}
	}

	[RuleVersion(0)]
	public IncactionContext incaction() {
		IncactionContext _localctx = new IncactionContext(Context, State);
		EnterRule(_localctx, 48, RULE_incaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317; Match(T__25);
			State = 318; rawstorage();
			State = 319; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public DecactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterDecaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitDecaction(this);
		}
	}

	[RuleVersion(0)]
	public DecactionContext decaction() {
		DecactionContext _localctx = new DecactionContext(Context, State);
		EnterRule(_localctx, 50, RULE_decaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321; Match(T__26);
			State = 322; rawstorage();
			State = 323; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveactionContext : ParserRuleContext {
		public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public MoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterMoveaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitMoveaction(this);
		}
	}

	[RuleVersion(0)]
	public MoveactionContext moveaction() {
		MoveactionContext _localctx = new MoveactionContext(Context, State);
		EnterRule(_localctx, 52, RULE_moveaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325; Match(T__27);
			State = 326; card();
			State = 327; card();
			State = 330;
			switch (TokenStream.La(1)) {
			case INTNUM:
			case OPEN:
				{
				State = 328; @int();
				}
				break;
			case T__28:
				{
				State = 329; Match(T__28);
				}
				break;
			case CLOSE:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyactionContext : ParserRuleContext {
		public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CopyactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterCopyaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitCopyaction(this);
		}
	}

	[RuleVersion(0)]
	public CopyactionContext copyaction() {
		CopyactionContext _localctx = new CopyactionContext(Context, State);
		EnterRule(_localctx, 54, RULE_copyaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332; Match(T__29);
			State = 333; card();
			State = 334; card();
			State = 337;
			switch (TokenStream.La(1)) {
			case INTNUM:
			case OPEN:
				{
				State = 335; @int();
				}
				break;
			case T__28:
				{
				State = 336; Match(T__28);
				}
				break;
			case CLOSE:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TurnactionContext : ParserRuleContext {
		public TurnactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_turnaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterTurnaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitTurnaction(this);
		}
	}

	[RuleVersion(0)]
	public TurnactionContext turnaction() {
		TurnactionContext _localctx = new TurnactionContext(Context, State);
		EnterRule(_localctx, 56, RULE_turnaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339; Match(T__30);
			State = 340;
			_la = TokenStream.La(1);
			if ( !(_la==T__31 || _la==T__32) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveactionContext : ParserRuleContext {
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public RemoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterRemoveaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitRemoveaction(this);
		}
	}

	[RuleVersion(0)]
	public RemoveactionContext removeaction() {
		RemoveactionContext _localctx = new RemoveactionContext(Context, State);
		EnterRule(_localctx, 58, RULE_removeaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342; Match(T__33);
			State = 343; card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShuffleactionContext : ParserRuleContext {
		public LocstorageContext locstorage() {
			return GetRuleContext<LocstorageContext>(0);
		}
		public ShuffleactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shuffleaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterShuffleaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitShuffleaction(this);
		}
	}

	[RuleVersion(0)]
	public ShuffleactionContext shuffleaction() {
		ShuffleactionContext _localctx = new ShuffleactionContext(Context, State);
		EnterRule(_localctx, 60, RULE_shuffleaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345; Match(T__34);
			State = 346; locstorage();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamelistContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public NamelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namelist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterNamelist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitNamelist(this);
		}
	}

	[RuleVersion(0)]
	public NamelistContext namelist() {
		NamelistContext _localctx = new NamelistContext(Context, State);
		EnterRule(_localctx, 62, RULE_namelist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 348; Match(OPEN);
			State = 350;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 349; name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 352;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 354; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoclistContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public LocContext[] loc() {
			return GetRuleContexts<LocContext>();
		}
		public LocContext loc(int i) {
			return GetRuleContext<LocContext>(i);
		}
		public LoclistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loclist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterLoclist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitLoclist(this);
		}
	}

	[RuleVersion(0)]
	public LoclistContext loclist() {
		LoclistContext _localctx = new LoclistContext(Context, State);
		EnterRule(_localctx, 64, RULE_loclist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 356; Match(OPEN);
			State = 358;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 357; loc();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 360;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 362; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public ImagContext imag() {
			return GetRuleContext<ImagContext>(0);
		}
		public LocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loc; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterLoc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitLoc(this);
		}
	}

	[RuleVersion(0)]
	public LocContext loc() {
		LocContext _localctx = new LocContext(Context, State);
		EnterRule(_localctx, 66, RULE_loc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364; Match(OPEN);
			State = 365; name();
			State = 366;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__10) | (1L << T__11))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 368;
			_la = TokenStream.La(1);
			if (_la==T__12) {
				{
				State = 367; imag();
				}
			}

			State = 370; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImagContext : ParserRuleContext {
		public ImagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imag; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterImag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitImag(this);
		}
	}

	[RuleVersion(0)]
	public ImagContext imag() {
		ImagContext _localctx = new ImagContext(Context, State);
		EnterRule(_localctx, 68, RULE_imag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372; Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardContext : ParserRuleContext {
		public MaxofContext maxof() {
			return GetRuleContext<MaxofContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public LocstorageContext locstorage() {
			return GetRuleContext<LocstorageContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_card; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterCard(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitCard(this);
		}
	}

	[RuleVersion(0)]
	public CardContext card() {
		CardContext _localctx = new CardContext(Context, State);
		EnterRule(_localctx, 70, RULE_card);
		try {
			State = 385;
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 374; maxof();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 375; Match(OPEN);
				State = 380;
				switch (TokenStream.La(1)) {
				case T__35:
					{
					State = 376; Match(T__35);
					}
					break;
				case T__36:
					{
					State = 377; Match(T__36);
					}
					break;
				case INTNUM:
				case OPEN:
					{
					State = 378; @int();
					}
					break;
				case T__37:
					{
					State = 379; Match(T__37);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 382; locstorage();
				State = 383; Match(CLOSE);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OwnerContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public OwnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_owner; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterOwner(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitOwner(this);
		}
	}

	[RuleVersion(0)]
	public OwnerContext owner() {
		OwnerContext _localctx = new OwnerContext(Context, State);
		EnterRule(_localctx, 72, RULE_owner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387; Match(OPEN);
			State = 388; Match(T__38);
			State = 389; card();
			State = 390; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RawstorageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public Who2Context who2() {
			return GetRuleContext<Who2Context>(0);
		}
		public RawstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rawstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterRawstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitRawstorage(this);
		}
	}

	[RuleVersion(0)]
	public RawstorageContext rawstorage() {
		RawstorageContext _localctx = new RawstorageContext(Context, State);
		EnterRule(_localctx, 74, RULE_rawstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392; Match(OPEN);
			State = 395;
			switch (TokenStream.La(1)) {
			case T__0:
				{
				State = 393; who();
				}
				break;
			case OPEN:
				{
				State = 394; who2();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 397; Match(T__13);
			State = 398; namegr();
			State = 399; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocstorageContext : ParserRuleContext {
		public UnionofContext unionof() {
			return GetRuleContext<UnionofContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public Who2Context who2() {
			return GetRuleContext<Who2Context>(0);
		}
		public WhereclauseContext whereclause() {
			return GetRuleContext<WhereclauseContext>(0);
		}
		public LocstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterLocstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitLocstorage(this);
		}
	}

	[RuleVersion(0)]
	public LocstorageContext locstorage() {
		LocstorageContext _localctx = new LocstorageContext(Context, State);
		EnterRule(_localctx, 76, RULE_locstorage);
		int _la;
		try {
			State = 414;
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 401; unionof();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 402; Match(OPEN);
				State = 405;
				switch (TokenStream.La(1)) {
				case T__0:
					{
					State = 403; who();
					}
					break;
				case OPEN:
					{
					State = 404; who2();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 407; Match(T__8);
				State = 408; namegr();
				State = 410;
				_la = TokenStream.La(1);
				if (_la==T__39) {
					{
					State = 409; whereclause();
					}
				}

				State = 412; Match(CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhoContext : ParserRuleContext {
		public WhoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_who; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterWho(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitWho(this);
		}
	}

	[RuleVersion(0)]
	public WhoContext who() {
		WhoContext _localctx = new WhoContext(Context, State);
		EnterRule(_localctx, 78, RULE_who);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Who2Context : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public PosqContext posq() {
			return GetRuleContext<PosqContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public Who2Context who2() {
			return GetRuleContext<Who2Context>(0);
		}
		public Who2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_who2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterWho2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitWho2(this);
		}
	}

	[RuleVersion(0)]
	public Who2Context who2() {
		Who2Context _localctx = new Who2Context(Context, State);
		EnterRule(_localctx, 80, RULE_who2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418; Match(OPEN);
			State = 424;
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 419; posq();
				}
				break;
			case 2:
				{
				State = 420; @int();
				}
				break;
			case 3:
				{
				State = 421; Match(T__23);
				}
				break;
			case 4:
				{
				State = 422; Match(T__24);
				}
				break;
			case 5:
				{
				State = 423; who2();
				}
				break;
			}
			State = 426;
			_la = TokenStream.La(1);
			if ( !(_la==T__2 || _la==T__3) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 427; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrueanyContext : ParserRuleContext {
		public ITerminalNode[] ANY() { return GetTokens(CardLanguageParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(CardLanguageParser.ANY, i);
		}
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode[] BOOLOP() { return GetTokens(CardLanguageParser.BOOLOP); }
		public ITerminalNode BOOLOP(int i) {
			return GetToken(CardLanguageParser.BOOLOP, i);
		}
		public TrueanyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trueany; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterTrueany(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitTrueany(this);
		}
	}

	[RuleVersion(0)]
	public TrueanyContext trueany() {
		TrueanyContext _localctx = new TrueanyContext(Context, State);
		EnterRule(_localctx, 82, RULE_trueany);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 432;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 432;
					switch (TokenStream.La(1)) {
					case ANY:
						{
						State = 429; Match(ANY);
						}
						break;
					case INTNUM:
					case OPEN:
						{
						State = 430; @int();
						}
						break;
					case BOOLOP:
						{
						State = 431; Match(BOOLOP);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 434;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereclauseContext : ParserRuleContext {
		public BoolattContext boolatt() {
			return GetRuleContext<BoolattContext>(0);
		}
		public WhereclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereclause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterWhereclause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitWhereclause(this);
		}
	}

	[RuleVersion(0)]
	public WhereclauseContext whereclause() {
		WhereclauseContext _localctx = new WhereclauseContext(Context, State);
		EnterRule(_localctx, 84, RULE_whereclause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436; Match(T__39);
			State = 437; boolatt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolattContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public AttrcompContext attrcomp() {
			return GetRuleContext<AttrcompContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public BoolattContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolatt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterBoolatt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitBoolatt(this);
		}
	}

	[RuleVersion(0)]
	public BoolattContext boolatt() {
		BoolattContext _localctx = new BoolattContext(Context, State);
		EnterRule(_localctx, 86, RULE_boolatt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439; Match(OPEN);
			State = 440; attrcomp();
			State = 441; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrcompContext : ParserRuleContext {
		public ITerminalNode EQOP() { return GetToken(CardLanguageParser.EQOP, 0); }
		public CardattContext[] cardatt() {
			return GetRuleContexts<CardattContext>();
		}
		public CardattContext cardatt(int i) {
			return GetRuleContext<CardattContext>(i);
		}
		public AttrcompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrcomp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterAttrcomp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitAttrcomp(this);
		}
	}

	[RuleVersion(0)]
	public AttrcompContext attrcomp() {
		AttrcompContext _localctx = new AttrcompContext(Context, State);
		EnterRule(_localctx, 88, RULE_attrcomp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 443; Match(EQOP);
			State = 444; cardatt();
			State = 445; cardatt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardattContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public CardattContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cardatt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterCardatt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitCardatt(this);
		}
	}

	[RuleVersion(0)]
	public CardattContext cardatt() {
		CardattContext _localctx = new CardattContext(Context, State);
		EnterRule(_localctx, 90, RULE_cardatt);
		try {
			State = 457;
			switch (TokenStream.La(1)) {
			case ANY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 447; name();
				}
				break;
			case OPEN:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 448; Match(OPEN);
				State = 449; Match(T__40);
				State = 450; name();
				State = 453;
				switch (TokenStream.La(1)) {
				case T__41:
					{
					State = 451; Match(T__41);
					}
					break;
				case OPEN:
					{
					State = 452; card();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 455; Match(CLOSE);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PosqContext : ParserRuleContext {
		public PosqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_posq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterPosq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitPosq(this);
		}
	}

	[RuleVersion(0)]
	public PosqContext posq() {
		PosqContext _localctx = new PosqContext(Context, State);
		EnterRule(_localctx, 92, RULE_posq);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			_la = TokenStream.La(1);
			if ( !(_la==T__28 || _la==T__37) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public AttrcompContext attrcomp() {
			return GetRuleContext<AttrcompContext>(0);
		}
		public ITerminalNode BOOLOP() { return GetToken(CardLanguageParser.BOOLOP, 0); }
		public BooleanContext[] boolean() {
			return GetRuleContexts<BooleanContext>();
		}
		public BooleanContext boolean(int i) {
			return GetRuleContext<BooleanContext>(i);
		}
		public IntopContext intop() {
			return GetRuleContext<IntopContext>(0);
		}
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode UNOP() { return GetToken(CardLanguageParser.UNOP, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 94, RULE_boolean);
		try {
			int _alt;
			State = 482;
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 461; Match(OPEN);
				State = 476;
				switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
				case 1:
					{
					{
					State = 462; Match(BOOLOP);
					State = 463; boolean();
					State = 465;
					ErrorHandler.Sync(this);
					_alt = 1+1;
					do {
						switch (_alt) {
						case 1+1:
							{
							{
							State = 464; boolean();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 467;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
					} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					}
					break;
				case 2:
					{
					State = 469; attrcomp();
					}
					break;
				case 3:
					{
					{
					State = 470; intop();
					State = 471; @int();
					State = 472; @int();
					}
					}
					break;
				case 4:
					{
					{
					State = 474; Match(UNOP);
					State = 475; boolean();
					}
					}
					break;
				}
				State = 478; Match(CLOSE);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 480; Match(OPEN);
				State = 481; Match(CLOSE);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntopContext : ParserRuleContext {
		public ITerminalNode COMPOP() { return GetToken(CardLanguageParser.COMPOP, 0); }
		public ITerminalNode EQOP() { return GetToken(CardLanguageParser.EQOP, 0); }
		public IntopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterIntop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitIntop(this);
		}
	}

	[RuleVersion(0)]
	public IntopContext intop() {
		IntopContext _localctx = new IntopContext(Context, State);
		EnterRule(_localctx, 96, RULE_intop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484;
			_la = TokenStream.La(1);
			if ( !(_la==COMPOP || _la==EQOP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
	}

	[RuleVersion(0)]
	public AddContext add() {
		AddContext _localctx = new AddContext(Context, State);
		EnterRule(_localctx, 98, RULE_add);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486; Match(OPEN);
			State = 487; Match(T__42);
			State = 488; @int();
			State = 489; @int();
			State = 490; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public MultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitMult(this);
		}
	}

	[RuleVersion(0)]
	public MultContext mult() {
		MultContext _localctx = new MultContext(Context, State);
		EnterRule(_localctx, 100, RULE_mult);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492; Match(OPEN);
			State = 493; Match(T__43);
			State = 494; @int();
			State = 495; @int();
			State = 496; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtractContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public SubtractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtract; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterSubtract(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitSubtract(this);
		}
	}

	[RuleVersion(0)]
	public SubtractContext subtract() {
		SubtractContext _localctx = new SubtractContext(Context, State);
		EnterRule(_localctx, 102, RULE_subtract);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498; Match(OPEN);
			State = 499; Match(T__44);
			State = 500; @int();
			State = 501; @int();
			State = 502; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public ModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mod; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitMod(this);
		}
	}

	[RuleVersion(0)]
	public ModContext mod() {
		ModContext _localctx = new ModContext(Context, State);
		EnterRule(_localctx, 104, RULE_mod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504; Match(OPEN);
			State = 505; Match(T__45);
			State = 506; @int();
			State = 507; @int();
			State = 508; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivideContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public DivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divide; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitDivide(this);
		}
	}

	[RuleVersion(0)]
	public DivideContext divide() {
		DivideContext _localctx = new DivideContext(Context, State);
		EnterRule(_localctx, 106, RULE_divide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 510; Match(OPEN);
			State = 511; Match(T__46);
			State = 512; @int();
			State = 513; @int();
			State = 514; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public LocstorageContext locstorage() {
			return GetRuleContext<LocstorageContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public SizeofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeof; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterSizeof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitSizeof(this);
		}
	}

	[RuleVersion(0)]
	public SizeofContext @sizeof() {
		SizeofContext _localctx = new SizeofContext(Context, State);
		EnterRule(_localctx, 108, RULE_sizeof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516; Match(OPEN);
			State = 517; Match(T__47);
			State = 518; locstorage();
			State = 519; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaxofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public LocstorageContext locstorage() {
			return GetRuleContext<LocstorageContext>(0);
		}
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public MaxofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxof; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterMaxof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitMaxof(this);
		}
	}

	[RuleVersion(0)]
	public MaxofContext maxof() {
		MaxofContext _localctx = new MaxofContext(Context, State);
		EnterRule(_localctx, 110, RULE_maxof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 521; Match(OPEN);
			State = 522; Match(T__48);
			State = 523; locstorage();
			State = 524; Match(T__49);
			State = 525; namegr();
			State = 526; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public LocstorageContext[] locstorage() {
			return GetRuleContexts<LocstorageContext>();
		}
		public LocstorageContext locstorage(int i) {
			return GetRuleContext<LocstorageContext>(i);
		}
		public UnionofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionof; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterUnionof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitUnionof(this);
		}
	}

	[RuleVersion(0)]
	public UnionofContext unionof() {
		UnionofContext _localctx = new UnionofContext(Context, State);
		EnterRule(_localctx, 112, RULE_unionof);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 528; Match(OPEN);
			State = 529; Match(T__50);
			State = 531;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 530; locstorage();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 533;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 535; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public SumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterSum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitSum(this);
		}
	}

	[RuleVersion(0)]
	public SumContext sum() {
		SumContext _localctx = new SumContext(Context, State);
		EnterRule(_localctx, 114, RULE_sum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537; Match(OPEN);
			State = 538; Match(T__51);
			State = 539; rawstorage();
			State = 540; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		public OwnerContext owner() {
			return GetRuleContext<OwnerContext>(0);
		}
		public SizeofContext @sizeof() {
			return GetRuleContext<SizeofContext>(0);
		}
		public MultContext mult() {
			return GetRuleContext<MultContext>(0);
		}
		public SubtractContext subtract() {
			return GetRuleContext<SubtractContext>(0);
		}
		public ModContext mod() {
			return GetRuleContext<ModContext>(0);
		}
		public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public ITerminalNode[] INTNUM() { return GetTokens(CardLanguageParser.INTNUM); }
		public ITerminalNode INTNUM(int i) {
			return GetToken(CardLanguageParser.INTNUM, i);
		}
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 116, RULE_int);
		try {
			int _alt;
			State = 555;
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 542; owner();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 543; @sizeof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 544; mult();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 545; subtract();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 546; mod();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 547; divide();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 548; sum();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 549; rawstorage();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 551;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 550; Match(INTNUM);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 553;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamegrContext : ParserRuleContext {
		public ITerminalNode[] ANY() { return GetTokens(CardLanguageParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(CardLanguageParser.ANY, i);
		}
		public NamegrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namegr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterNamegr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitNamegr(this);
		}
	}

	[RuleVersion(0)]
	public NamegrContext namegr() {
		NamegrContext _localctx = new NamegrContext(Context, State);
		EnterRule(_localctx, 118, RULE_namegr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 558;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 557; Match(ANY);
				}
				}
				State = 560;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==ANY );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode[] ANY() { return GetTokens(CardLanguageParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(CardLanguageParser.ANY, i);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 120, RULE_name);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 563;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 562; Match(ANY);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 565;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3?\x23A\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x3\x2\x3"+
		"\x2\x3\x2\x3\x2\x3\x2\x6\x2\x82\n\x2\r\x2\xE\x2\x83\x3\x2\x3\x2\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x6\x3\x8F\n\x3\r\x3\xE\x3\x90\x3"+
		"\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x6\a\xA5\n\a\r\a\xE\a\xA6\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\t\x6\t\xAF\n\t\r\t\xE\t\xB0\x3\n\x3\n\x3\n\x3\n\x3"+
		"\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\xC1\n\n\x3\n\x3\n"+
		"\x3\v\x3\v\x3\v\x3\v\x6\v\xC9\n\v\r\v\xE\v\xCA\x3\f\x3\f\x3\f\x3\f\x5"+
		"\f\xD1\n\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\a\r\xDC\n\r\f"+
		"\r\xE\r\xDF\v\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x5\xF\xEC\n\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x5"+
		"\x11\xF4\n\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13"+
		"\x3\x14\x3\x14\x3\x14\x6\x14\x101\n\x14\r\x14\xE\x14\x102\x3\x14\x3\x14"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\a\x15\x10B\n\x15\f\x15\xE\x15\x10E\v\x15"+
		"\x3\x15\x3\x15\a\x15\x112\n\x15\f\x15\xE\x15\x115\v\x15\x3\x15\x3\x15"+
		"\x3\x16\x3\x16\x3\x16\x3\x16\x6\x16\x11D\n\x16\r\x16\xE\x16\x11E\x3\x16"+
		"\x3\x16\x3\x17\x3\x17\x3\x17\x6\x17\x126\n\x17\r\x17\xE\x17\x127\x3\x17"+
		"\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18"+
		"\x134\n\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x13C\n\x19"+
		"\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x14D\n\x1C\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x5\x1D\x154\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F"+
		"\x3\x1F\x3 \x3 \x3 \x3!\x3!\x6!\x161\n!\r!\xE!\x162\x3!\x3!\x3\"\x3\""+
		"\x6\"\x169\n\"\r\"\xE\"\x16A\x3\"\x3\"\x3#\x3#\x3#\x3#\x5#\x173\n#\x3"+
		"#\x3#\x3$\x3$\x3%\x3%\x3%\x3%\x3%\x3%\x5%\x17F\n%\x3%\x3%\x3%\x5%\x184"+
		"\n%\x3&\x3&\x3&\x3&\x3&\x3\'\x3\'\x3\'\x5\'\x18E\n\'\x3\'\x3\'\x3\'\x3"+
		"\'\x3(\x3(\x3(\x3(\x5(\x198\n(\x3(\x3(\x3(\x5(\x19D\n(\x3(\x3(\x5(\x1A1"+
		"\n(\x3)\x3)\x3*\x3*\x3*\x3*\x3*\x3*\x5*\x1AB\n*\x3*\x3*\x3*\x3+\x3+\x3"+
		"+\x6+\x1B3\n+\r+\xE+\x1B4\x3,\x3,\x3,\x3-\x3-\x3-\x3-\x3.\x3.\x3.\x3."+
		"\x3/\x3/\x3/\x3/\x3/\x3/\x5/\x1C8\n/\x3/\x3/\x5/\x1CC\n/\x3\x30\x3\x30"+
		"\x3\x31\x3\x31\x3\x31\x3\x31\x6\x31\x1D4\n\x31\r\x31\xE\x31\x1D5\x3\x31"+
		"\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x5\x31\x1DF\n\x31\x3\x31\x3"+
		"\x31\x3\x31\x3\x31\x5\x31\x1E5\n\x31\x3\x32\x3\x32\x3\x33\x3\x33\x3\x33"+
		"\x3\x33\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x35"+
		"\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36"+
		"\x3\x36\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x38\x3\x38\x3\x38"+
		"\x3\x38\x3\x38\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3:\x3"+
		":\x3:\x6:\x216\n:\r:\xE:\x217\x3:\x3:\x3;\x3;\x3;\x3;\x3;\x3<\x3<\x3<"+
		"\x3<\x3<\x3<\x3<\x3<\x3<\x6<\x22A\n<\r<\xE<\x22B\x5<\x22E\n<\x3=\x6=\x231"+
		"\n=\r=\xE=\x232\x3>\x6>\x236\n>\r>\xE>\x237\x3>\x13\x83\x90\xA6\xB0\xCA"+
		"\xDD\x102\x10C\x113\x11E\x127\x162\x16A\x1B4\x1D5\x217\x237\x2?\x2\x4"+
		"\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36"+
		"\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66hjlnprtvxz\x2\t\x4\x2\x3"+
		"\x3\x5\x6\x3\x2\f\xE\x4\x2\x14\x14\x16\x16\x3\x2\"#\x3\x2\x5\x6\x4\x2"+
		"\x1F\x1F((\x3\x2\x38\x39\x247\x2|\x3\x2\x2\x2\x4\x87\x3\x2\x2\x2\x6\x94"+
		"\x3\x2\x2\x2\b\x99\x3\x2\x2\x2\n\x9E\x3\x2\x2\x2\f\xA4\x3\x2\x2\x2\xE"+
		"\xA8\x3\x2\x2\x2\x10\xAE\x3\x2\x2\x2\x12\xB2\x3\x2\x2\x2\x14\xC4\x3\x2"+
		"\x2\x2\x16\xCC\x3\x2\x2\x2\x18\xD4\x3\x2\x2\x2\x1A\xE3\x3\x2\x2\x2\x1C"+
		"\xE7\x3\x2\x2\x2\x1E\xED\x3\x2\x2\x2 \xEF\x3\x2\x2\x2\"\xF5\x3\x2\x2\x2"+
		"$\xFA\x3\x2\x2\x2&\xFD\x3\x2\x2\x2(\x106\x3\x2\x2\x2*\x118\x3\x2\x2\x2"+
		",\x122\x3\x2\x2\x2.\x12C\x3\x2\x2\x2\x30\x137\x3\x2\x2\x2\x32\x13F\x3"+
		"\x2\x2\x2\x34\x143\x3\x2\x2\x2\x36\x147\x3\x2\x2\x2\x38\x14E\x3\x2\x2"+
		"\x2:\x155\x3\x2\x2\x2<\x158\x3\x2\x2\x2>\x15B\x3\x2\x2\x2@\x15E\x3\x2"+
		"\x2\x2\x42\x166\x3\x2\x2\x2\x44\x16E\x3\x2\x2\x2\x46\x176\x3\x2\x2\x2"+
		"H\x183\x3\x2\x2\x2J\x185\x3\x2\x2\x2L\x18A\x3\x2\x2\x2N\x1A0\x3\x2\x2"+
		"\x2P\x1A2\x3\x2\x2\x2R\x1A4\x3\x2\x2\x2T\x1B2\x3\x2\x2\x2V\x1B6\x3\x2"+
		"\x2\x2X\x1B9\x3\x2\x2\x2Z\x1BD\x3\x2\x2\x2\\\x1CB\x3\x2\x2\x2^\x1CD\x3"+
		"\x2\x2\x2`\x1E4\x3\x2\x2\x2\x62\x1E6\x3\x2\x2\x2\x64\x1E8\x3\x2\x2\x2"+
		"\x66\x1EE\x3\x2\x2\x2h\x1F4\x3\x2\x2\x2j\x1FA\x3\x2\x2\x2l\x200\x3\x2"+
		"\x2\x2n\x206\x3\x2\x2\x2p\x20B\x3\x2\x2\x2r\x212\x3\x2\x2\x2t\x21B\x3"+
		"\x2\x2\x2v\x22D\x3\x2\x2\x2x\x230\x3\x2\x2\x2z\x235\x3\x2\x2\x2|}\a<\x2"+
		"\x2}\x81\a\x3\x2\x2~\x82\x5\b\x5\x2\x7F\x82\x5\n\x6\x2\x80\x82\x5\x4\x3"+
		"\x2\x81~\x3\x2\x2\x2\x81\x7F\x3\x2\x2\x2\x81\x80\x3\x2\x2\x2\x82\x83\x3"+
		"\x2\x2\x2\x83\x84\x3\x2\x2\x2\x83\x81\x3\x2\x2\x2\x84\x85\x3\x2\x2\x2"+
		"\x85\x86\a=\x2\x2\x86\x3\x3\x2\x2\x2\x87\x88\a<\x2\x2\x88\x89\a\x4\x2"+
		"\x2\x89\x8A\t\x2\x2\x2\x8A\x8E\x5\x6\x4\x2\x8B\x8F\x5\b\x5\x2\x8C\x8F"+
		"\x5\n\x6\x2\x8D\x8F\x5\x4\x3\x2\x8E\x8B\x3\x2\x2\x2\x8E\x8C\x3\x2\x2\x2"+
		"\x8E\x8D\x3\x2\x2\x2\x8F\x90\x3\x2\x2\x2\x90\x91\x3\x2\x2\x2\x90\x8E\x3"+
		"\x2\x2\x2\x91\x92\x3\x2\x2\x2\x92\x93\a=\x2\x2\x93\x5\x3\x2\x2\x2\x94"+
		"\x95\a<\x2\x2\x95\x96\a\a\x2\x2\x96\x97\x5`\x31\x2\x97\x98\a=\x2\x2\x98"+
		"\a\x3\x2\x2\x2\x99\x9A\a<\x2\x2\x9A\x9B\a\b\x2\x2\x9B\x9C\x5\f\a\x2\x9C"+
		"\x9D\a=\x2\x2\x9D\t\x3\x2\x2\x2\x9E\x9F\a<\x2\x2\x9F\xA0\a\t\x2\x2\xA0"+
		"\xA1\x5\f\a\x2\xA1\xA2\a=\x2\x2\xA2\v\x3\x2\x2\x2\xA3\xA5\x5\xE\b\x2\xA4"+
		"\xA3\x3\x2\x2\x2\xA5\xA6\x3\x2\x2\x2\xA6\xA7\x3\x2\x2\x2\xA6\xA4\x3\x2"+
		"\x2\x2\xA7\r\x3\x2\x2\x2\xA8\xA9\a<\x2\x2\xA9\xAA\x5`\x31\x2\xAA\xAB\x5"+
		"\x10\t\x2\xAB\xAC\a=\x2\x2\xAC\xF\x3\x2\x2\x2\xAD\xAF\x5\x12\n\x2\xAE"+
		"\xAD\x3\x2\x2\x2\xAF\xB0\x3\x2\x2\x2\xB0\xB1\x3\x2\x2\x2\xB0\xAE\x3\x2"+
		"\x2\x2\xB1\x11\x3\x2\x2\x2\xB2\xC0\a<\x2\x2\xB3\xC1\x5 \x11\x2\xB4\xC1"+
		"\x5\x14\v\x2\xB5\xC1\x5\x18\r\x2\xB6\xC1\x5\x1A\xE\x2\xB7\xC1\x5\x1C\xF"+
		"\x2\xB8\xC1\x5\x30\x19\x2\xB9\xC1\x5\x36\x1C\x2\xBA\xC1\x5\x38\x1D\x2"+
		"\xBB\xC1\x5\x32\x1A\x2\xBC\xC1\x5\x34\x1B\x2\xBD\xC1\x5<\x1F\x2\xBE\xC1"+
		"\x5:\x1E\x2\xBF\xC1\x5> \x2\xC0\xB3\x3\x2\x2\x2\xC0\xB4\x3\x2\x2\x2\xC0"+
		"\xB5\x3\x2\x2\x2\xC0\xB6\x3\x2\x2\x2\xC0\xB7\x3\x2\x2\x2\xC0\xB8\x3\x2"+
		"\x2\x2\xC0\xB9\x3\x2\x2\x2\xC0\xBA\x3\x2\x2\x2\xC0\xBB\x3\x2\x2\x2\xC0"+
		"\xBC\x3\x2\x2\x2\xC0\xBD\x3\x2\x2\x2\xC0\xBE\x3\x2\x2\x2\xC0\xBF\x3\x2"+
		"\x2\x2\xC1\xC2\x3\x2\x2\x2\xC2\xC3\a=\x2\x2\xC3\x13\x3\x2\x2\x2\xC4\xC5"+
		"\a\n\x2\x2\xC5\xC6\a\v\x2\x2\xC6\xC8\x5\x1E\x10\x2\xC7\xC9\x5\x16\f\x2"+
		"\xC8\xC7\x3\x2\x2\x2\xC9\xCA\x3\x2\x2\x2\xCA\xCB\x3\x2\x2\x2\xCA\xC8\x3"+
		"\x2\x2\x2\xCB\x15\x3\x2\x2\x2\xCC\xCD\a<\x2\x2\xCD\xCE\x5z>\x2\xCE\xD0"+
		"\t\x3\x2\x2\xCF\xD1\a\xF\x2\x2\xD0\xCF\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2"+
		"\xD1\xD2\x3\x2\x2\x2\xD2\xD3\a=\x2\x2\xD3\x17\x3\x2\x2\x2\xD4\xD5\a\n"+
		"\x2\x2\xD5\xD6\a\x10\x2\x2\xD6\xD7\x5\x1E\x10\x2\xD7\xDD\a<\x2\x2\xD8"+
		"\xD9\x5x=\x2\xD9\xDA\a\x11\x2\x2\xDA\xDC\x3\x2\x2\x2\xDB\xD8\x3\x2\x2"+
		"\x2\xDC\xDF\x3\x2\x2\x2\xDD\xDE\x3\x2\x2\x2\xDD\xDB\x3\x2\x2\x2\xDE\xE0"+
		"\x3\x2\x2\x2\xDF\xDD\x3\x2\x2\x2\xE0\xE1\x5x=\x2\xE1\xE2\a=\x2\x2\xE2"+
		"\x19\x3\x2\x2\x2\xE3\xE4\a\n\x2\x2\xE4\xE5\a\x12\x2\x2\xE5\xE6\x5v<\x2"+
		"\xE6\x1B\x3\x2\x2\x2\xE7\xE8\a\n\x2\x2\xE8\xE9\a\x13\x2\x2\xE9\xEB\x5"+
		"v<\x2\xEA\xEC\a\x14\x2\x2\xEB\xEA\x3\x2\x2\x2\xEB\xEC\x3\x2\x2\x2\xEC"+
		"\x1D\x3\x2\x2\x2\xED\xEE\t\x2\x2\x2\xEE\x1F\x3\x2\x2\x2\xEF\xF3\a\x15"+
		"\x2\x2\xF0\xF4\x5\"\x12\x2\xF1\xF4\x5$\x13\x2\xF2\xF4\x5*\x16\x2\xF3\xF0"+
		"\x3\x2\x2\x2\xF3\xF1\x3\x2\x2\x2\xF3\xF2\x3\x2\x2\x2\xF4!\x3\x2\x2\x2"+
		"\xF5\xF6\a\x12\x2\x2\xF6\xF7\x5v<\x2\xF7\xF8\x5v<\x2\xF8\xF9\t\x4\x2\x2"+
		"\xF9#\x3\x2\x2\x2\xFA\xFB\x5N(\x2\xFB\xFC\x5&\x14\x2\xFC%\x3\x2\x2\x2"+
		"\xFD\xFE\a<\x2\x2\xFE\x100\a\x17\x2\x2\xFF\x101\x5(\x15\x2\x100\xFF\x3"+
		"\x2\x2\x2\x101\x102\x3\x2\x2\x2\x102\x103\x3\x2\x2\x2\x102\x100\x3\x2"+
		"\x2\x2\x103\x104\x3\x2\x2\x2\x104\x105\a=\x2\x2\x105\'\x3\x2\x2\x2\x106"+
		"\x10C\a<\x2\x2\x107\x108\x5T+\x2\x108\x109\a\x11\x2\x2\x109\x10B\x3\x2"+
		"\x2\x2\x10A\x107\x3\x2\x2\x2\x10B\x10E\x3\x2\x2\x2\x10C\x10D\x3\x2\x2"+
		"\x2\x10C\x10A\x3\x2\x2\x2\x10D\x10F\x3\x2\x2\x2\x10E\x10C\x3\x2\x2\x2"+
		"\x10F\x113\x5T+\x2\x110\x112\x5(\x15\x2\x111\x110\x3\x2\x2\x2\x112\x115"+
		"\x3\x2\x2\x2\x113\x114\x3\x2\x2\x2\x113\x111\x3\x2\x2\x2\x114\x116\x3"+
		"\x2\x2\x2\x115\x113\x3\x2\x2\x2\x116\x117\a=\x2\x2\x117)\x3\x2\x2\x2\x118"+
		"\x119\a\x18\x2\x2\x119\x11A\x5z>\x2\x11A\x11C\a<\x2\x2\x11B\x11D\x5,\x17"+
		"\x2\x11C\x11B\x3\x2\x2\x2\x11D\x11E\x3\x2\x2\x2\x11E\x11F\x3\x2\x2\x2"+
		"\x11E\x11C\x3\x2\x2\x2\x11F\x120\x3\x2\x2\x2\x120\x121\a=\x2\x2\x121+"+
		"\x3\x2\x2\x2\x122\x123\a<\x2\x2\x123\x125\x5^\x30\x2\x124\x126\x5.\x18"+
		"\x2\x125\x124\x3\x2\x2\x2\x126\x127\x3\x2\x2\x2\x127\x128\x3\x2\x2\x2"+
		"\x127\x125\x3\x2\x2\x2\x128\x129\x3\x2\x2\x2\x129\x12A\x5v<\x2\x12A\x12B"+
		"\a=\x2\x2\x12B-\x3\x2\x2\x2\x12C\x12D\a<\x2\x2\x12D\x133\x5z>\x2\x12E"+
		"\x12F\a<\x2\x2\x12F\x130\x5T+\x2\x130\x131\a=\x2\x2\x131\x134\x3\x2\x2"+
		"\x2\x132\x134\x5\\/\x2\x133\x12E\x3\x2\x2\x2\x133\x132\x3\x2\x2\x2\x134"+
		"\x135\x3\x2\x2\x2\x135\x136\a=\x2\x2\x136/\x3\x2\x2\x2\x137\x13B\a\x19"+
		"\x2\x2\x138\x13C\a\x1A\x2\x2\x139\x13C\a\x1B\x2\x2\x13A\x13C\x5L\'\x2"+
		"\x13B\x138\x3\x2\x2\x2\x13B\x139\x3\x2\x2\x2\x13B\x13A\x3\x2\x2\x2\x13C"+
		"\x13D\x3\x2\x2\x2\x13D\x13E\x5v<\x2\x13E\x31\x3\x2\x2\x2\x13F\x140\a\x1C"+
		"\x2\x2\x140\x141\x5L\'\x2\x141\x142\x5v<\x2\x142\x33\x3\x2\x2\x2\x143"+
		"\x144\a\x1D\x2\x2\x144\x145\x5L\'\x2\x145\x146\x5v<\x2\x146\x35\x3\x2"+
		"\x2\x2\x147\x148\a\x1E\x2\x2\x148\x149\x5H%\x2\x149\x14C\x5H%\x2\x14A"+
		"\x14D\x5v<\x2\x14B\x14D\a\x1F\x2\x2\x14C\x14A\x3\x2\x2\x2\x14C\x14B\x3"+
		"\x2\x2\x2\x14C\x14D\x3\x2\x2\x2\x14D\x37\x3\x2\x2\x2\x14E\x14F\a \x2\x2"+
		"\x14F\x150\x5H%\x2\x150\x153\x5H%\x2\x151\x154\x5v<\x2\x152\x154\a\x1F"+
		"\x2\x2\x153\x151\x3\x2\x2\x2\x153\x152\x3\x2\x2\x2\x153\x154\x3\x2\x2"+
		"\x2\x154\x39\x3\x2\x2\x2\x155\x156\a!\x2\x2\x156\x157\t\x5\x2\x2\x157"+
		";\x3\x2\x2\x2\x158\x159\a$\x2\x2\x159\x15A\x5H%\x2\x15A=\x3\x2\x2\x2\x15B"+
		"\x15C\a%\x2\x2\x15C\x15D\x5N(\x2\x15D?\x3\x2\x2\x2\x15E\x160\a<\x2\x2"+
		"\x15F\x161\x5z>\x2\x160\x15F\x3\x2\x2\x2\x161\x162\x3\x2\x2\x2\x162\x163"+
		"\x3\x2\x2\x2\x162\x160\x3\x2\x2\x2\x163\x164\x3\x2\x2\x2\x164\x165\a="+
		"\x2\x2\x165\x41\x3\x2\x2\x2\x166\x168\a<\x2\x2\x167\x169\x5\x44#\x2\x168"+
		"\x167\x3\x2\x2\x2\x169\x16A\x3\x2\x2\x2\x16A\x16B\x3\x2\x2\x2\x16A\x168"+
		"\x3\x2\x2\x2\x16B\x16C\x3\x2\x2\x2\x16C\x16D\a=\x2\x2\x16D\x43\x3\x2\x2"+
		"\x2\x16E\x16F\a<\x2\x2\x16F\x170\x5z>\x2\x170\x172\t\x3\x2\x2\x171\x173"+
		"\x5\x46$\x2\x172\x171\x3\x2\x2\x2\x172\x173\x3\x2\x2\x2\x173\x174\x3\x2"+
		"\x2\x2\x174\x175\a=\x2\x2\x175\x45\x3\x2\x2\x2\x176\x177\a\xF\x2\x2\x177"+
		"G\x3\x2\x2\x2\x178\x184\x5p\x39\x2\x179\x17E\a<\x2\x2\x17A\x17F\a&\x2"+
		"\x2\x17B\x17F\a\'\x2\x2\x17C\x17F\x5v<\x2\x17D\x17F\a(\x2\x2\x17E\x17A"+
		"\x3\x2\x2\x2\x17E\x17B\x3\x2\x2\x2\x17E\x17C\x3\x2\x2\x2\x17E\x17D\x3"+
		"\x2\x2\x2\x17F\x180\x3\x2\x2\x2\x180\x181\x5N(\x2\x181\x182\a=\x2\x2\x182"+
		"\x184\x3\x2\x2\x2\x183\x178\x3\x2\x2\x2\x183\x179\x3\x2\x2\x2\x184I\x3"+
		"\x2\x2\x2\x185\x186\a<\x2\x2\x186\x187\a)\x2\x2\x187\x188\x5H%\x2\x188"+
		"\x189\a=\x2\x2\x189K\x3\x2\x2\x2\x18A\x18D\a<\x2\x2\x18B\x18E\x5P)\x2"+
		"\x18C\x18E\x5R*\x2\x18D\x18B\x3\x2\x2\x2\x18D\x18C\x3\x2\x2\x2\x18E\x18F"+
		"\x3\x2\x2\x2\x18F\x190\a\x10\x2\x2\x190\x191\x5x=\x2\x191\x192\a=\x2\x2"+
		"\x192M\x3\x2\x2\x2\x193\x1A1\x5r:\x2\x194\x197\a<\x2\x2\x195\x198\x5P"+
		")\x2\x196\x198\x5R*\x2\x197\x195\x3\x2\x2\x2\x197\x196\x3\x2\x2\x2\x198"+
		"\x199\x3\x2\x2\x2\x199\x19A\a\v\x2\x2\x19A\x19C\x5x=\x2\x19B\x19D\x5V"+
		",\x2\x19C\x19B\x3\x2\x2\x2\x19C\x19D\x3\x2\x2\x2\x19D\x19E\x3\x2\x2\x2"+
		"\x19E\x19F\a=\x2\x2\x19F\x1A1\x3\x2\x2\x2\x1A0\x193\x3\x2\x2\x2\x1A0\x194"+
		"\x3\x2\x2\x2\x1A1O\x3\x2\x2\x2\x1A2\x1A3\a\x3\x2\x2\x1A3Q\x3\x2\x2\x2"+
		"\x1A4\x1AA\a<\x2\x2\x1A5\x1AB\x5^\x30\x2\x1A6\x1AB\x5v<\x2\x1A7\x1AB\a"+
		"\x1A\x2\x2\x1A8\x1AB\a\x1B\x2\x2\x1A9\x1AB\x5R*\x2\x1AA\x1A5\x3\x2\x2"+
		"\x2\x1AA\x1A6\x3\x2\x2\x2\x1AA\x1A7\x3\x2\x2\x2\x1AA\x1A8\x3\x2\x2\x2"+
		"\x1AA\x1A9\x3\x2\x2\x2\x1AB\x1AC\x3\x2\x2\x2\x1AC\x1AD\t\x6\x2\x2\x1AD"+
		"\x1AE\a=\x2\x2\x1AES\x3\x2\x2\x2\x1AF\x1B3\a?\x2\x2\x1B0\x1B3\x5v<\x2"+
		"\x1B1\x1B3\a\x37\x2\x2\x1B2\x1AF\x3\x2\x2\x2\x1B2\x1B0\x3\x2\x2\x2\x1B2"+
		"\x1B1\x3\x2\x2\x2\x1B3\x1B4\x3\x2\x2\x2\x1B4\x1B5\x3\x2\x2\x2\x1B4\x1B2"+
		"\x3\x2\x2\x2\x1B5U\x3\x2\x2\x2\x1B6\x1B7\a*\x2\x2\x1B7\x1B8\x5X-\x2\x1B8"+
		"W\x3\x2\x2\x2\x1B9\x1BA\a<\x2\x2\x1BA\x1BB\x5Z.\x2\x1BB\x1BC\a=\x2\x2"+
		"\x1BCY\x3\x2\x2\x2\x1BD\x1BE\a\x39\x2\x2\x1BE\x1BF\x5\\/\x2\x1BF\x1C0"+
		"\x5\\/\x2\x1C0[\x3\x2\x2\x2\x1C1\x1CC\x5z>\x2\x1C2\x1C3\a<\x2\x2\x1C3"+
		"\x1C4\a+\x2\x2\x1C4\x1C7\x5z>\x2\x1C5\x1C8\a,\x2\x2\x1C6\x1C8\x5H%\x2"+
		"\x1C7\x1C5\x3\x2\x2\x2\x1C7\x1C6\x3\x2\x2\x2\x1C8\x1C9\x3\x2\x2\x2\x1C9"+
		"\x1CA\a=\x2\x2\x1CA\x1CC\x3\x2\x2\x2\x1CB\x1C1\x3\x2\x2\x2\x1CB\x1C2\x3"+
		"\x2\x2\x2\x1CC]\x3\x2\x2\x2\x1CD\x1CE\t\a\x2\x2\x1CE_\x3\x2\x2\x2\x1CF"+
		"\x1DE\a<\x2\x2\x1D0\x1D1\a\x37\x2\x2\x1D1\x1D3\x5`\x31\x2\x1D2\x1D4\x5"+
		"`\x31\x2\x1D3\x1D2\x3\x2\x2\x2\x1D4\x1D5\x3\x2\x2\x2\x1D5\x1D6\x3\x2\x2"+
		"\x2\x1D5\x1D3\x3\x2\x2\x2\x1D6\x1DF\x3\x2\x2\x2\x1D7\x1DF\x5Z.\x2\x1D8"+
		"\x1D9\x5\x62\x32\x2\x1D9\x1DA\x5v<\x2\x1DA\x1DB\x5v<\x2\x1DB\x1DF\x3\x2"+
		"\x2\x2\x1DC\x1DD\a:\x2\x2\x1DD\x1DF\x5`\x31\x2\x1DE\x1D0\x3\x2\x2\x2\x1DE"+
		"\x1D7\x3\x2\x2\x2\x1DE\x1D8\x3\x2\x2\x2\x1DE\x1DC\x3\x2\x2\x2\x1DF\x1E0"+
		"\x3\x2\x2\x2\x1E0\x1E1\a=\x2\x2\x1E1\x1E5\x3\x2\x2\x2\x1E2\x1E3\a<\x2"+
		"\x2\x1E3\x1E5\a=\x2\x2\x1E4\x1CF\x3\x2\x2\x2\x1E4\x1E2\x3\x2\x2\x2\x1E5"+
		"\x61\x3\x2\x2\x2\x1E6\x1E7\t\b\x2\x2\x1E7\x63\x3\x2\x2\x2\x1E8\x1E9\a"+
		"<\x2\x2\x1E9\x1EA\a-\x2\x2\x1EA\x1EB\x5v<\x2\x1EB\x1EC\x5v<\x2\x1EC\x1ED"+
		"\a=\x2\x2\x1ED\x65\x3\x2\x2\x2\x1EE\x1EF\a<\x2\x2\x1EF\x1F0\a.\x2\x2\x1F0"+
		"\x1F1\x5v<\x2\x1F1\x1F2\x5v<\x2\x1F2\x1F3\a=\x2\x2\x1F3g\x3\x2\x2\x2\x1F4"+
		"\x1F5\a<\x2\x2\x1F5\x1F6\a/\x2\x2\x1F6\x1F7\x5v<\x2\x1F7\x1F8\x5v<\x2"+
		"\x1F8\x1F9\a=\x2\x2\x1F9i\x3\x2\x2\x2\x1FA\x1FB\a<\x2\x2\x1FB\x1FC\a\x30"+
		"\x2\x2\x1FC\x1FD\x5v<\x2\x1FD\x1FE\x5v<\x2\x1FE\x1FF\a=\x2\x2\x1FFk\x3"+
		"\x2\x2\x2\x200\x201\a<\x2\x2\x201\x202\a\x31\x2\x2\x202\x203\x5v<\x2\x203"+
		"\x204\x5v<\x2\x204\x205\a=\x2\x2\x205m\x3\x2\x2\x2\x206\x207\a<\x2\x2"+
		"\x207\x208\a\x32\x2\x2\x208\x209\x5N(\x2\x209\x20A\a=\x2\x2\x20Ao\x3\x2"+
		"\x2\x2\x20B\x20C\a<\x2\x2\x20C\x20D\a\x33\x2\x2\x20D\x20E\x5N(\x2\x20E"+
		"\x20F\a\x34\x2\x2\x20F\x210\x5x=\x2\x210\x211\a=\x2\x2\x211q\x3\x2\x2"+
		"\x2\x212\x213\a<\x2\x2\x213\x215\a\x35\x2\x2\x214\x216\x5N(\x2\x215\x214"+
		"\x3\x2\x2\x2\x216\x217\x3\x2\x2\x2\x217\x218\x3\x2\x2\x2\x217\x215\x3"+
		"\x2\x2\x2\x218\x219\x3\x2\x2\x2\x219\x21A\a=\x2\x2\x21As\x3\x2\x2\x2\x21B"+
		"\x21C\a<\x2\x2\x21C\x21D\a\x36\x2\x2\x21D\x21E\x5L\'\x2\x21E\x21F\a=\x2"+
		"\x2\x21Fu\x3\x2\x2\x2\x220\x22E\x5J&\x2\x221\x22E\x5n\x38\x2\x222\x22E"+
		"\x5\x66\x34\x2\x223\x22E\x5h\x35\x2\x224\x22E\x5j\x36\x2\x225\x22E\x5"+
		"l\x37\x2\x226\x22E\x5t;\x2\x227\x22E\x5L\'\x2\x228\x22A\a;\x2\x2\x229"+
		"\x228\x3\x2\x2\x2\x22A\x22B\x3\x2\x2\x2\x22B\x229\x3\x2\x2\x2\x22B\x22C"+
		"\x3\x2\x2\x2\x22C\x22E\x3\x2\x2\x2\x22D\x220\x3\x2\x2\x2\x22D\x221\x3"+
		"\x2\x2\x2\x22D\x222\x3\x2\x2\x2\x22D\x223\x3\x2\x2\x2\x22D\x224\x3\x2"+
		"\x2\x2\x22D\x225\x3\x2\x2\x2\x22D\x226\x3\x2\x2\x2\x22D\x227\x3\x2\x2"+
		"\x2\x22D\x229\x3\x2\x2\x2\x22Ew\x3\x2\x2\x2\x22F\x231\a?\x2\x2\x230\x22F"+
		"\x3\x2\x2\x2\x231\x232\x3\x2\x2\x2\x232\x230\x3\x2\x2\x2\x232\x233\x3"+
		"\x2\x2\x2\x233y\x3\x2\x2\x2\x234\x236\a?\x2\x2\x235\x234\x3\x2\x2\x2\x236"+
		"\x237\x3\x2\x2\x2\x237\x238\x3\x2\x2\x2\x237\x235\x3\x2\x2\x2\x238{\x3"+
		"\x2\x2\x2-\x81\x83\x8E\x90\xA6\xB0\xC0\xCA\xD0\xDD\xEB\xF3\x102\x10C\x113"+
		"\x11E\x127\x133\x13B\x14C\x153\x162\x16A\x172\x17E\x183\x18D\x197\x19C"+
		"\x1A0\x1AA\x1B2\x1B4\x1C7\x1CB\x1D5\x1DE\x1E4\x217\x22B\x22D\x232\x237";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
