//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CardLanguage.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class CardLanguageParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, BOOLOP=50, COMPOP=51, EQOP=52, 
		UNOP=53, INTNUM=54, OPEN=55, CLOSE=56, WS=57, ANY=58;
	public const int
		RULE_stage = 0, RULE_endcondition = 1, RULE_computermoves = 2, RULE_playermoves = 3, 
		RULE_multigameaction = 4, RULE_gameaction = 5, RULE_multiaction = 6, RULE_action = 7, 
		RULE_loccreate = 8, RULE_locationdef = 9, RULE_storagecreate = 10, RULE_obj = 11, 
		RULE_init = 12, RULE_playerinit = 13, RULE_deckinit = 14, RULE_deck = 15, 
		RULE_attribute = 16, RULE_pointsinit = 17, RULE_awards = 18, RULE_setaction = 19, 
		RULE_incaction = 20, RULE_decaction = 21, RULE_moveaction = 22, RULE_copyaction = 23, 
		RULE_turnaction = 24, RULE_removeaction = 25, RULE_shuffleaction = 26, 
		RULE_createaction = 27, RULE_createsto = 28, RULE_namelist = 29, RULE_loclist = 30, 
		RULE_loc = 31, RULE_imag = 32, RULE_card = 33, RULE_owner = 34, RULE_rawstorage = 35, 
		RULE_locstorage = 36, RULE_who = 37, RULE_who2 = 38, RULE_trueany = 39, 
		RULE_whereclause = 40, RULE_boolatt = 41, RULE_attrcomp = 42, RULE_cardatt = 43, 
		RULE_posq = 44, RULE_boolean = 45, RULE_intop = 46, RULE_mult = 47, RULE_subtract = 48, 
		RULE_mod = 49, RULE_divide = 50, RULE_sizeof = 51, RULE_maxof = 52, RULE_unionof = 53, 
		RULE_sum = 54, RULE_int = 55, RULE_namegr = 56, RULE_name = 57;
	public static readonly string[] ruleNames = {
		"stage", "endcondition", "computermoves", "playermoves", "multigameaction", 
		"gameaction", "multiaction", "action", "loccreate", "locationdef", "storagecreate", 
		"obj", "init", "playerinit", "deckinit", "deck", "attribute", "pointsinit", 
		"awards", "setaction", "incaction", "decaction", "moveaction", "copyaction", 
		"turnaction", "removeaction", "shuffleaction", "createaction", "createsto", 
		"namelist", "loclist", "loc", "imag", "card", "owner", "rawstorage", "locstorage", 
		"who", "who2", "trueany", "whereclause", "boolatt", "attrcomp", "cardatt", 
		"posq", "boolean", "intop", "mult", "subtract", "mod", "divide", "sizeof", 
		"maxof", "unionof", "sum", "int", "namegr", "name"
	};

	private static readonly string[] _LiteralNames = {
		null, "'stage'", "'game'", "'player'", "'team'", "'end'", "'comp'", "'choice'", 
		"'create'", "'loc'", "'Stack'", "'List'", "'Queue'", "'Memory'", "'sto'", 
		"'initialize'", "'players'", "'alternate'", "'sequential'", "'permdeck'", 
		"'points'", "'set'", "'next'", "'current'", "'inc'", "'dec'", "'move'", 
		"'all'", "'copy'", "'turn'", "'over'", "'pass'", "'remove'", "'shuffle'", 
		"'top'", "'bottom'", "'any'", "'owner'", "'where'", "'cardatt'", "'this'", 
		"'*'", "'-'", "'%'", "'//'", "'size'", "'max'", "'using'", "'union'", 
		"'sum'", null, null, null, "'not'", null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "BOOLOP", "COMPOP", "EQOP", "UNOP", "INTNUM", "OPEN", "CLOSE", 
		"WS", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CardLanguage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CardLanguageParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class StageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public EndconditionContext endcondition() {
			return GetRuleContext<EndconditionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public ComputermovesContext[] computermoves() {
			return GetRuleContexts<ComputermovesContext>();
		}
		public ComputermovesContext computermoves(int i) {
			return GetRuleContext<ComputermovesContext>(i);
		}
		public PlayermovesContext[] playermoves() {
			return GetRuleContexts<PlayermovesContext>();
		}
		public PlayermovesContext playermoves(int i) {
			return GetRuleContext<PlayermovesContext>(i);
		}
		public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public StageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stage; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterStage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitStage(this);
		}
	}

	[RuleVersion(0)]
	public StageContext stage() {
		StageContext _localctx = new StageContext(Context, State);
		EnterRule(_localctx, 0, RULE_stage);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(OPEN);
			State = 117; Match(T__0);
			State = 118;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__3))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 119; endcondition();
			State = 123;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 123;
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 120; computermoves();
						}
						break;
					case 2:
						{
						State = 121; playermoves();
						}
						break;
					case 3:
						{
						State = 122; stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 125;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 127; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndconditionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public EndconditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endcondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterEndcondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitEndcondition(this);
		}
	}

	[RuleVersion(0)]
	public EndconditionContext endcondition() {
		EndconditionContext _localctx = new EndconditionContext(Context, State);
		EnterRule(_localctx, 2, RULE_endcondition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; Match(OPEN);
			State = 130; Match(T__4);
			State = 134;
			switch (TokenStream.La(1)) {
			case OPEN:
				{
				State = 131; boolean();
				}
				break;
			case T__1:
			case T__2:
			case T__3:
				{
				{
				State = 132;
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__3))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 133; @int();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 136; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComputermovesContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public MultigameactionContext multigameaction() {
			return GetRuleContext<MultigameactionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public ComputermovesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_computermoves; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterComputermoves(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitComputermoves(this);
		}
	}

	[RuleVersion(0)]
	public ComputermovesContext computermoves() {
		ComputermovesContext _localctx = new ComputermovesContext(Context, State);
		EnterRule(_localctx, 4, RULE_computermoves);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; Match(OPEN);
			State = 139; Match(T__5);
			State = 140; multigameaction();
			State = 141; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayermovesContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public MultigameactionContext multigameaction() {
			return GetRuleContext<MultigameactionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public PlayermovesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playermoves; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterPlayermoves(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitPlayermoves(this);
		}
	}

	[RuleVersion(0)]
	public PlayermovesContext playermoves() {
		PlayermovesContext _localctx = new PlayermovesContext(Context, State);
		EnterRule(_localctx, 6, RULE_playermoves);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; Match(OPEN);
			State = 144; Match(T__6);
			State = 145; multigameaction();
			State = 146; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultigameactionContext : ParserRuleContext {
		public GameactionContext[] gameaction() {
			return GetRuleContexts<GameactionContext>();
		}
		public GameactionContext gameaction(int i) {
			return GetRuleContext<GameactionContext>(i);
		}
		public MultigameactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multigameaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterMultigameaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitMultigameaction(this);
		}
	}

	[RuleVersion(0)]
	public MultigameactionContext multigameaction() {
		MultigameactionContext _localctx = new MultigameactionContext(Context, State);
		EnterRule(_localctx, 8, RULE_multigameaction);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 148; gameaction();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 151;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GameactionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public MultiactionContext multiaction() {
			return GetRuleContext<MultiactionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public GameactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gameaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterGameaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitGameaction(this);
		}
	}

	[RuleVersion(0)]
	public GameactionContext gameaction() {
		GameactionContext _localctx = new GameactionContext(Context, State);
		EnterRule(_localctx, 10, RULE_gameaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153; Match(OPEN);
			State = 154; boolean();
			State = 155; multiaction();
			State = 156; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiactionContext : ParserRuleContext {
		public ActionContext[] action() {
			return GetRuleContexts<ActionContext>();
		}
		public ActionContext action(int i) {
			return GetRuleContext<ActionContext>(i);
		}
		public MultiactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterMultiaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitMultiaction(this);
		}
	}

	[RuleVersion(0)]
	public MultiactionContext multiaction() {
		MultiactionContext _localctx = new MultiactionContext(Context, State);
		EnterRule(_localctx, 12, RULE_multiaction);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 158; action();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 161;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public InitContext init() {
			return GetRuleContext<InitContext>(0);
		}
		public LoccreateContext loccreate() {
			return GetRuleContext<LoccreateContext>(0);
		}
		public StoragecreateContext storagecreate() {
			return GetRuleContext<StoragecreateContext>(0);
		}
		public SetactionContext setaction() {
			return GetRuleContext<SetactionContext>(0);
		}
		public MoveactionContext moveaction() {
			return GetRuleContext<MoveactionContext>(0);
		}
		public CopyactionContext copyaction() {
			return GetRuleContext<CopyactionContext>(0);
		}
		public IncactionContext incaction() {
			return GetRuleContext<IncactionContext>(0);
		}
		public DecactionContext decaction() {
			return GetRuleContext<DecactionContext>(0);
		}
		public RemoveactionContext removeaction() {
			return GetRuleContext<RemoveactionContext>(0);
		}
		public TurnactionContext turnaction() {
			return GetRuleContext<TurnactionContext>(0);
		}
		public ShuffleactionContext shuffleaction() {
			return GetRuleContext<ShuffleactionContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 14, RULE_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163; Match(OPEN);
			State = 175;
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 164; init();
				}
				break;
			case 2:
				{
				State = 165; loccreate();
				}
				break;
			case 3:
				{
				State = 166; storagecreate();
				}
				break;
			case 4:
				{
				State = 167; setaction();
				}
				break;
			case 5:
				{
				State = 168; moveaction();
				}
				break;
			case 6:
				{
				State = 169; copyaction();
				}
				break;
			case 7:
				{
				State = 170; incaction();
				}
				break;
			case 8:
				{
				State = 171; decaction();
				}
				break;
			case 9:
				{
				State = 172; removeaction();
				}
				break;
			case 10:
				{
				State = 173; turnaction();
				}
				break;
			case 11:
				{
				State = 174; shuffleaction();
				}
				break;
			}
			State = 177; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoccreateContext : ParserRuleContext {
		public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		public LocationdefContext[] locationdef() {
			return GetRuleContexts<LocationdefContext>();
		}
		public LocationdefContext locationdef(int i) {
			return GetRuleContext<LocationdefContext>(i);
		}
		public LoccreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loccreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterLoccreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitLoccreate(this);
		}
	}

	[RuleVersion(0)]
	public LoccreateContext loccreate() {
		LoccreateContext _localctx = new LoccreateContext(Context, State);
		EnterRule(_localctx, 16, RULE_loccreate);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 179; Match(T__7);
			State = 180; Match(T__8);
			State = 181; obj();
			State = 183;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 182; locationdef();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 185;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocationdefContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public LocationdefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locationdef; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterLocationdef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitLocationdef(this);
		}
	}

	[RuleVersion(0)]
	public LocationdefContext locationdef() {
		LocationdefContext _localctx = new LocationdefContext(Context, State);
		EnterRule(_localctx, 18, RULE_locationdef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187; Match(OPEN);
			State = 188; name();
			State = 189;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__10) | (1L << T__11))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 191;
			_la = TokenStream.La(1);
			if (_la==T__12) {
				{
				State = 190; Match(T__12);
				}
			}

			State = 193; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoragecreateContext : ParserRuleContext {
		public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public StoragecreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storagecreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterStoragecreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitStoragecreate(this);
		}
	}

	[RuleVersion(0)]
	public StoragecreateContext storagecreate() {
		StoragecreateContext _localctx = new StoragecreateContext(Context, State);
		EnterRule(_localctx, 20, RULE_storagecreate);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; Match(T__7);
			State = 196; Match(T__13);
			State = 197; obj();
			State = 198; Match(OPEN);
			State = 200;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 199; name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 202;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 204; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjContext : ParserRuleContext {
		public ObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterObj(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitObj(this);
		}
	}

	[RuleVersion(0)]
	public ObjContext obj() {
		ObjContext _localctx = new ObjContext(Context, State);
		EnterRule(_localctx, 22, RULE_obj);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__3))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitContext : ParserRuleContext {
		public PlayerinitContext playerinit() {
			return GetRuleContext<PlayerinitContext>(0);
		}
		public DeckinitContext deckinit() {
			return GetRuleContext<DeckinitContext>(0);
		}
		public PointsinitContext pointsinit() {
			return GetRuleContext<PointsinitContext>(0);
		}
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_init; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitInit(this);
		}
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(Context, State);
		EnterRule(_localctx, 24, RULE_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208; Match(T__14);
			State = 212;
			switch (TokenStream.La(1)) {
			case T__15:
				{
				State = 209; playerinit();
				}
				break;
			case OPEN:
				{
				State = 210; deckinit();
				}
				break;
			case T__19:
				{
				State = 211; pointsinit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayerinitContext : ParserRuleContext {
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public PlayerinitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playerinit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterPlayerinit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitPlayerinit(this);
		}
	}

	[RuleVersion(0)]
	public PlayerinitContext playerinit() {
		PlayerinitContext _localctx = new PlayerinitContext(Context, State);
		EnterRule(_localctx, 26, RULE_playerinit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; Match(T__15);
			State = 215; @int();
			State = 216; @int();
			State = 217;
			_la = TokenStream.La(1);
			if ( !(_la==T__16 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckinitContext : ParserRuleContext {
		public LocstorageContext locstorage() {
			return GetRuleContext<LocstorageContext>(0);
		}
		public DeckContext deck() {
			return GetRuleContext<DeckContext>(0);
		}
		public DeckinitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deckinit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterDeckinit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitDeckinit(this);
		}
	}

	[RuleVersion(0)]
	public DeckinitContext deckinit() {
		DeckinitContext _localctx = new DeckinitContext(Context, State);
		EnterRule(_localctx, 28, RULE_deckinit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219; locstorage();
			State = 220; deck();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public DeckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deck; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterDeck(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitDeck(this);
		}
	}

	[RuleVersion(0)]
	public DeckContext deck() {
		DeckContext _localctx = new DeckContext(Context, State);
		EnterRule(_localctx, 30, RULE_deck);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; Match(OPEN);
			State = 223; Match(T__18);
			State = 225;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 224; attribute();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 227;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 229; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public TrueanyContext[] trueany() {
			return GetRuleContexts<TrueanyContext>();
		}
		public TrueanyContext trueany(int i) {
			return GetRuleContext<TrueanyContext>(i);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 32, RULE_attribute);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 231; Match(OPEN);
			State = 233;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 232; trueany();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 235;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 240;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 237; attribute();
					}
					} 
				}
				State = 242;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			State = 243; Match(CLOSE);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointsinitContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public AwardsContext[] awards() {
			return GetRuleContexts<AwardsContext>();
		}
		public AwardsContext awards(int i) {
			return GetRuleContext<AwardsContext>(i);
		}
		public PointsinitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointsinit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterPointsinit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitPointsinit(this);
		}
	}

	[RuleVersion(0)]
	public PointsinitContext pointsinit() {
		PointsinitContext _localctx = new PointsinitContext(Context, State);
		EnterRule(_localctx, 34, RULE_pointsinit);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 245; Match(T__19);
			State = 246; name();
			State = 247; Match(OPEN);
			State = 249;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 248; awards();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 251;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 253; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwardsContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(CardLanguageParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(CardLanguageParser.OPEN, i);
		}
		public PosqContext posq() {
			return GetRuleContext<PosqContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(CardLanguageParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(CardLanguageParser.CLOSE, i);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public TrueanyContext trueany() {
			return GetRuleContext<TrueanyContext>(0);
		}
		public CardattContext cardatt() {
			return GetRuleContext<CardattContext>(0);
		}
		public AwardsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awards; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterAwards(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitAwards(this);
		}
	}

	[RuleVersion(0)]
	public AwardsContext awards() {
		AwardsContext _localctx = new AwardsContext(Context, State);
		EnterRule(_localctx, 36, RULE_awards);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255; Match(OPEN);
			State = 256; posq();
			State = 257; Match(OPEN);
			State = 258; name();
			State = 264;
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				{
				State = 259; Match(OPEN);
				State = 260; trueany();
				State = 261; Match(CLOSE);
				}
				}
				break;
			case 2:
				{
				{
				State = 263; cardatt();
				}
				}
				break;
			}
			State = 266; Match(CLOSE);
			State = 267; @int();
			State = 268; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetactionContext : ParserRuleContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public SetactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterSetaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitSetaction(this);
		}
	}

	[RuleVersion(0)]
	public SetactionContext setaction() {
		SetactionContext _localctx = new SetactionContext(Context, State);
		EnterRule(_localctx, 38, RULE_setaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270; Match(T__20);
			State = 274;
			switch (TokenStream.La(1)) {
			case T__21:
				{
				State = 271; Match(T__21);
				}
				break;
			case T__22:
				{
				State = 272; Match(T__22);
				}
				break;
			case OPEN:
				{
				State = 273; rawstorage();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 276; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public IncactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterIncaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitIncaction(this);
		}
	}

	[RuleVersion(0)]
	public IncactionContext incaction() {
		IncactionContext _localctx = new IncactionContext(Context, State);
		EnterRule(_localctx, 40, RULE_incaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278; Match(T__23);
			State = 279; rawstorage();
			State = 280; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public DecactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterDecaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitDecaction(this);
		}
	}

	[RuleVersion(0)]
	public DecactionContext decaction() {
		DecactionContext _localctx = new DecactionContext(Context, State);
		EnterRule(_localctx, 42, RULE_decaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282; Match(T__24);
			State = 283; rawstorage();
			State = 284; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveactionContext : ParserRuleContext {
		public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public MoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterMoveaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitMoveaction(this);
		}
	}

	[RuleVersion(0)]
	public MoveactionContext moveaction() {
		MoveactionContext _localctx = new MoveactionContext(Context, State);
		EnterRule(_localctx, 44, RULE_moveaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286; Match(T__25);
			State = 287; card();
			State = 288; card();
			State = 291;
			switch (TokenStream.La(1)) {
			case INTNUM:
			case OPEN:
				{
				State = 289; @int();
				}
				break;
			case T__26:
				{
				State = 290; Match(T__26);
				}
				break;
			case CLOSE:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyactionContext : ParserRuleContext {
		public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CopyactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterCopyaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitCopyaction(this);
		}
	}

	[RuleVersion(0)]
	public CopyactionContext copyaction() {
		CopyactionContext _localctx = new CopyactionContext(Context, State);
		EnterRule(_localctx, 46, RULE_copyaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293; Match(T__27);
			State = 294; card();
			State = 295; card();
			State = 298;
			switch (TokenStream.La(1)) {
			case INTNUM:
			case OPEN:
				{
				State = 296; @int();
				}
				break;
			case T__26:
				{
				State = 297; Match(T__26);
				}
				break;
			case CLOSE:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TurnactionContext : ParserRuleContext {
		public TurnactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_turnaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterTurnaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitTurnaction(this);
		}
	}

	[RuleVersion(0)]
	public TurnactionContext turnaction() {
		TurnactionContext _localctx = new TurnactionContext(Context, State);
		EnterRule(_localctx, 48, RULE_turnaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300; Match(T__28);
			State = 301;
			_la = TokenStream.La(1);
			if ( !(_la==T__29 || _la==T__30) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveactionContext : ParserRuleContext {
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public RemoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterRemoveaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitRemoveaction(this);
		}
	}

	[RuleVersion(0)]
	public RemoveactionContext removeaction() {
		RemoveactionContext _localctx = new RemoveactionContext(Context, State);
		EnterRule(_localctx, 50, RULE_removeaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303; Match(T__31);
			State = 304; card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShuffleactionContext : ParserRuleContext {
		public LocstorageContext locstorage() {
			return GetRuleContext<LocstorageContext>(0);
		}
		public ShuffleactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shuffleaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterShuffleaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitShuffleaction(this);
		}
	}

	[RuleVersion(0)]
	public ShuffleactionContext shuffleaction() {
		ShuffleactionContext _localctx = new ShuffleactionContext(Context, State);
		EnterRule(_localctx, 52, RULE_shuffleaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306; Match(T__32);
			State = 307; locstorage();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateactionContext : ParserRuleContext {
		public CreatestoContext createsto() {
			return GetRuleContext<CreatestoContext>(0);
		}
		public CreateactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterCreateaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitCreateaction(this);
		}
	}

	[RuleVersion(0)]
	public CreateactionContext createaction() {
		CreateactionContext _localctx = new CreateactionContext(Context, State);
		EnterRule(_localctx, 54, RULE_createaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309; createsto();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatestoContext : ParserRuleContext {
		public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public Who2Context who2() {
			return GetRuleContext<Who2Context>(0);
		}
		public CreatestoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createsto; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterCreatesto(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitCreatesto(this);
		}
	}

	[RuleVersion(0)]
	public CreatestoContext createsto() {
		CreatestoContext _localctx = new CreatestoContext(Context, State);
		EnterRule(_localctx, 56, RULE_createsto);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311; Match(T__7);
			State = 312; Match(T__13);
			State = 315;
			switch (TokenStream.La(1)) {
			case T__1:
				{
				State = 313; who();
				}
				break;
			case OPEN:
				{
				State = 314; who2();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 317; namelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamelistContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public NamelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namelist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterNamelist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitNamelist(this);
		}
	}

	[RuleVersion(0)]
	public NamelistContext namelist() {
		NamelistContext _localctx = new NamelistContext(Context, State);
		EnterRule(_localctx, 58, RULE_namelist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 319; Match(OPEN);
			State = 321;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 320; name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 323;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 325; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoclistContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public LocContext[] loc() {
			return GetRuleContexts<LocContext>();
		}
		public LocContext loc(int i) {
			return GetRuleContext<LocContext>(i);
		}
		public LoclistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loclist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterLoclist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitLoclist(this);
		}
	}

	[RuleVersion(0)]
	public LoclistContext loclist() {
		LoclistContext _localctx = new LoclistContext(Context, State);
		EnterRule(_localctx, 60, RULE_loclist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 327; Match(OPEN);
			State = 329;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 328; loc();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 331;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 333; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public ImagContext imag() {
			return GetRuleContext<ImagContext>(0);
		}
		public LocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loc; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterLoc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitLoc(this);
		}
	}

	[RuleVersion(0)]
	public LocContext loc() {
		LocContext _localctx = new LocContext(Context, State);
		EnterRule(_localctx, 62, RULE_loc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335; Match(OPEN);
			State = 336; name();
			State = 337;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__10) | (1L << T__11))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 339;
			_la = TokenStream.La(1);
			if (_la==T__12) {
				{
				State = 338; imag();
				}
			}

			State = 341; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImagContext : ParserRuleContext {
		public ImagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imag; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterImag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitImag(this);
		}
	}

	[RuleVersion(0)]
	public ImagContext imag() {
		ImagContext _localctx = new ImagContext(Context, State);
		EnterRule(_localctx, 64, RULE_imag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343; Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardContext : ParserRuleContext {
		public MaxofContext maxof() {
			return GetRuleContext<MaxofContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public LocstorageContext locstorage() {
			return GetRuleContext<LocstorageContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_card; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterCard(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitCard(this);
		}
	}

	[RuleVersion(0)]
	public CardContext card() {
		CardContext _localctx = new CardContext(Context, State);
		EnterRule(_localctx, 66, RULE_card);
		try {
			State = 356;
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 345; maxof();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 346; Match(OPEN);
				State = 351;
				switch (TokenStream.La(1)) {
				case T__33:
					{
					State = 347; Match(T__33);
					}
					break;
				case T__34:
					{
					State = 348; Match(T__34);
					}
					break;
				case INTNUM:
				case OPEN:
					{
					State = 349; @int();
					}
					break;
				case T__35:
					{
					State = 350; Match(T__35);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 353; locstorage();
				State = 354; Match(CLOSE);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OwnerContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public OwnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_owner; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterOwner(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitOwner(this);
		}
	}

	[RuleVersion(0)]
	public OwnerContext owner() {
		OwnerContext _localctx = new OwnerContext(Context, State);
		EnterRule(_localctx, 68, RULE_owner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358; Match(OPEN);
			State = 359; Match(T__36);
			State = 360; card();
			State = 361; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RawstorageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public Who2Context who2() {
			return GetRuleContext<Who2Context>(0);
		}
		public RawstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rawstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterRawstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitRawstorage(this);
		}
	}

	[RuleVersion(0)]
	public RawstorageContext rawstorage() {
		RawstorageContext _localctx = new RawstorageContext(Context, State);
		EnterRule(_localctx, 70, RULE_rawstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363; Match(OPEN);
			State = 366;
			switch (TokenStream.La(1)) {
			case T__1:
				{
				State = 364; who();
				}
				break;
			case OPEN:
				{
				State = 365; who2();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 368; Match(T__13);
			State = 369; namegr();
			State = 370; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocstorageContext : ParserRuleContext {
		public UnionofContext unionof() {
			return GetRuleContext<UnionofContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public Who2Context who2() {
			return GetRuleContext<Who2Context>(0);
		}
		public WhereclauseContext whereclause() {
			return GetRuleContext<WhereclauseContext>(0);
		}
		public LocstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterLocstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitLocstorage(this);
		}
	}

	[RuleVersion(0)]
	public LocstorageContext locstorage() {
		LocstorageContext _localctx = new LocstorageContext(Context, State);
		EnterRule(_localctx, 72, RULE_locstorage);
		int _la;
		try {
			State = 385;
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 372; unionof();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 373; Match(OPEN);
				State = 376;
				switch (TokenStream.La(1)) {
				case T__1:
					{
					State = 374; who();
					}
					break;
				case OPEN:
					{
					State = 375; who2();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 378; Match(T__8);
				State = 379; name();
				State = 381;
				_la = TokenStream.La(1);
				if (_la==T__37) {
					{
					State = 380; whereclause();
					}
				}

				State = 383; Match(CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhoContext : ParserRuleContext {
		public WhoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_who; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterWho(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitWho(this);
		}
	}

	[RuleVersion(0)]
	public WhoContext who() {
		WhoContext _localctx = new WhoContext(Context, State);
		EnterRule(_localctx, 74, RULE_who);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Who2Context : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public PosqContext posq() {
			return GetRuleContext<PosqContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public Who2Context who2() {
			return GetRuleContext<Who2Context>(0);
		}
		public Who2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_who2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterWho2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitWho2(this);
		}
	}

	[RuleVersion(0)]
	public Who2Context who2() {
		Who2Context _localctx = new Who2Context(Context, State);
		EnterRule(_localctx, 76, RULE_who2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389; Match(OPEN);
			State = 395;
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 390; posq();
				}
				break;
			case 2:
				{
				State = 391; @int();
				}
				break;
			case 3:
				{
				State = 392; Match(T__21);
				}
				break;
			case 4:
				{
				State = 393; Match(T__22);
				}
				break;
			case 5:
				{
				State = 394; who2();
				}
				break;
			}
			State = 397;
			_la = TokenStream.La(1);
			if ( !(_la==T__2 || _la==T__3) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 398; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrueanyContext : ParserRuleContext {
		public ITerminalNode[] ANY() { return GetTokens(CardLanguageParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(CardLanguageParser.ANY, i);
		}
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode[] BOOLOP() { return GetTokens(CardLanguageParser.BOOLOP); }
		public ITerminalNode BOOLOP(int i) {
			return GetToken(CardLanguageParser.BOOLOP, i);
		}
		public TrueanyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trueany; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterTrueany(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitTrueany(this);
		}
	}

	[RuleVersion(0)]
	public TrueanyContext trueany() {
		TrueanyContext _localctx = new TrueanyContext(Context, State);
		EnterRule(_localctx, 78, RULE_trueany);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 403;
					switch (TokenStream.La(1)) {
					case ANY:
						{
						State = 400; Match(ANY);
						}
						break;
					case INTNUM:
					case OPEN:
						{
						State = 401; @int();
						}
						break;
					case BOOLOP:
						{
						State = 402; Match(BOOLOP);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 405;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereclauseContext : ParserRuleContext {
		public BoolattContext boolatt() {
			return GetRuleContext<BoolattContext>(0);
		}
		public WhereclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereclause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterWhereclause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitWhereclause(this);
		}
	}

	[RuleVersion(0)]
	public WhereclauseContext whereclause() {
		WhereclauseContext _localctx = new WhereclauseContext(Context, State);
		EnterRule(_localctx, 80, RULE_whereclause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407; Match(T__37);
			State = 408; boolatt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolattContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public AttrcompContext attrcomp() {
			return GetRuleContext<AttrcompContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public BoolattContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolatt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterBoolatt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitBoolatt(this);
		}
	}

	[RuleVersion(0)]
	public BoolattContext boolatt() {
		BoolattContext _localctx = new BoolattContext(Context, State);
		EnterRule(_localctx, 82, RULE_boolatt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410; Match(OPEN);
			State = 411; attrcomp();
			State = 412; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrcompContext : ParserRuleContext {
		public ITerminalNode EQOP() { return GetToken(CardLanguageParser.EQOP, 0); }
		public CardattContext[] cardatt() {
			return GetRuleContexts<CardattContext>();
		}
		public CardattContext cardatt(int i) {
			return GetRuleContext<CardattContext>(i);
		}
		public AttrcompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrcomp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterAttrcomp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitAttrcomp(this);
		}
	}

	[RuleVersion(0)]
	public AttrcompContext attrcomp() {
		AttrcompContext _localctx = new AttrcompContext(Context, State);
		EnterRule(_localctx, 84, RULE_attrcomp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414; Match(EQOP);
			State = 415; cardatt();
			State = 416; cardatt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardattContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public CardattContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cardatt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterCardatt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitCardatt(this);
		}
	}

	[RuleVersion(0)]
	public CardattContext cardatt() {
		CardattContext _localctx = new CardattContext(Context, State);
		EnterRule(_localctx, 86, RULE_cardatt);
		try {
			State = 428;
			switch (TokenStream.La(1)) {
			case ANY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 418; name();
				}
				break;
			case OPEN:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 419; Match(OPEN);
				State = 420; Match(T__38);
				State = 421; name();
				State = 424;
				switch (TokenStream.La(1)) {
				case T__39:
					{
					State = 422; Match(T__39);
					}
					break;
				case OPEN:
					{
					State = 423; card();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 426; Match(CLOSE);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PosqContext : ParserRuleContext {
		public PosqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_posq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterPosq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitPosq(this);
		}
	}

	[RuleVersion(0)]
	public PosqContext posq() {
		PosqContext _localctx = new PosqContext(Context, State);
		EnterRule(_localctx, 88, RULE_posq);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430;
			_la = TokenStream.La(1);
			if ( !(_la==T__26 || _la==T__35) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public AttrcompContext attrcomp() {
			return GetRuleContext<AttrcompContext>(0);
		}
		public ITerminalNode BOOLOP() { return GetToken(CardLanguageParser.BOOLOP, 0); }
		public BooleanContext[] boolean() {
			return GetRuleContexts<BooleanContext>();
		}
		public BooleanContext boolean(int i) {
			return GetRuleContext<BooleanContext>(i);
		}
		public IntopContext intop() {
			return GetRuleContext<IntopContext>(0);
		}
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode UNOP() { return GetToken(CardLanguageParser.UNOP, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 90, RULE_boolean);
		try {
			int _alt;
			State = 453;
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 432; Match(OPEN);
				State = 447;
				switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
				case 1:
					{
					{
					State = 433; Match(BOOLOP);
					State = 434; boolean();
					State = 436;
					ErrorHandler.Sync(this);
					_alt = 1+1;
					do {
						switch (_alt) {
						case 1+1:
							{
							{
							State = 435; boolean();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 438;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
					} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					}
					break;
				case 2:
					{
					State = 440; attrcomp();
					}
					break;
				case 3:
					{
					{
					State = 441; intop();
					State = 442; @int();
					State = 443; @int();
					}
					}
					break;
				case 4:
					{
					{
					State = 445; Match(UNOP);
					State = 446; boolean();
					}
					}
					break;
				}
				State = 449; Match(CLOSE);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 451; Match(OPEN);
				State = 452; Match(CLOSE);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntopContext : ParserRuleContext {
		public ITerminalNode COMPOP() { return GetToken(CardLanguageParser.COMPOP, 0); }
		public ITerminalNode EQOP() { return GetToken(CardLanguageParser.EQOP, 0); }
		public IntopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterIntop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitIntop(this);
		}
	}

	[RuleVersion(0)]
	public IntopContext intop() {
		IntopContext _localctx = new IntopContext(Context, State);
		EnterRule(_localctx, 92, RULE_intop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455;
			_la = TokenStream.La(1);
			if ( !(_la==COMPOP || _la==EQOP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public MultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitMult(this);
		}
	}

	[RuleVersion(0)]
	public MultContext mult() {
		MultContext _localctx = new MultContext(Context, State);
		EnterRule(_localctx, 94, RULE_mult);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457; Match(OPEN);
			State = 458; Match(T__40);
			State = 459; @int();
			State = 460; @int();
			State = 461; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtractContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public SubtractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtract; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterSubtract(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitSubtract(this);
		}
	}

	[RuleVersion(0)]
	public SubtractContext subtract() {
		SubtractContext _localctx = new SubtractContext(Context, State);
		EnterRule(_localctx, 96, RULE_subtract);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463; Match(OPEN);
			State = 464; Match(T__41);
			State = 465; @int();
			State = 466; @int();
			State = 467; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public ModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mod; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitMod(this);
		}
	}

	[RuleVersion(0)]
	public ModContext mod() {
		ModContext _localctx = new ModContext(Context, State);
		EnterRule(_localctx, 98, RULE_mod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469; Match(OPEN);
			State = 470; Match(T__42);
			State = 471; @int();
			State = 472; @int();
			State = 473; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivideContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public DivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divide; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitDivide(this);
		}
	}

	[RuleVersion(0)]
	public DivideContext divide() {
		DivideContext _localctx = new DivideContext(Context, State);
		EnterRule(_localctx, 100, RULE_divide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475; Match(OPEN);
			State = 476; Match(T__43);
			State = 477; @int();
			State = 478; @int();
			State = 479; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public LocstorageContext locstorage() {
			return GetRuleContext<LocstorageContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public SizeofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeof; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterSizeof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitSizeof(this);
		}
	}

	[RuleVersion(0)]
	public SizeofContext @sizeof() {
		SizeofContext _localctx = new SizeofContext(Context, State);
		EnterRule(_localctx, 102, RULE_sizeof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481; Match(OPEN);
			State = 482; Match(T__44);
			State = 483; locstorage();
			State = 484; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaxofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public LocstorageContext locstorage() {
			return GetRuleContext<LocstorageContext>(0);
		}
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public MaxofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxof; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterMaxof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitMaxof(this);
		}
	}

	[RuleVersion(0)]
	public MaxofContext maxof() {
		MaxofContext _localctx = new MaxofContext(Context, State);
		EnterRule(_localctx, 104, RULE_maxof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486; Match(OPEN);
			State = 487; Match(T__45);
			State = 488; locstorage();
			State = 489; Match(T__46);
			State = 490; namegr();
			State = 491; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public LocstorageContext[] locstorage() {
			return GetRuleContexts<LocstorageContext>();
		}
		public LocstorageContext locstorage(int i) {
			return GetRuleContext<LocstorageContext>(i);
		}
		public UnionofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionof; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterUnionof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitUnionof(this);
		}
	}

	[RuleVersion(0)]
	public UnionofContext unionof() {
		UnionofContext _localctx = new UnionofContext(Context, State);
		EnterRule(_localctx, 106, RULE_unionof);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 493; Match(OPEN);
			State = 494; Match(T__47);
			State = 496;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 495; locstorage();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 498;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 500; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(CardLanguageParser.OPEN, 0); }
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(CardLanguageParser.CLOSE, 0); }
		public SumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterSum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitSum(this);
		}
	}

	[RuleVersion(0)]
	public SumContext sum() {
		SumContext _localctx = new SumContext(Context, State);
		EnterRule(_localctx, 108, RULE_sum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502; Match(OPEN);
			State = 503; Match(T__48);
			State = 504; rawstorage();
			State = 505; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		public OwnerContext owner() {
			return GetRuleContext<OwnerContext>(0);
		}
		public SizeofContext @sizeof() {
			return GetRuleContext<SizeofContext>(0);
		}
		public MultContext mult() {
			return GetRuleContext<MultContext>(0);
		}
		public SubtractContext subtract() {
			return GetRuleContext<SubtractContext>(0);
		}
		public ModContext mod() {
			return GetRuleContext<ModContext>(0);
		}
		public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public ITerminalNode[] INTNUM() { return GetTokens(CardLanguageParser.INTNUM); }
		public ITerminalNode INTNUM(int i) {
			return GetToken(CardLanguageParser.INTNUM, i);
		}
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 110, RULE_int);
		try {
			int _alt;
			State = 520;
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 507; owner();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 508; @sizeof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 509; mult();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 510; subtract();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 511; mod();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 512; divide();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 513; sum();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 514; rawstorage();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 516;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 515; Match(INTNUM);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 518;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamegrContext : ParserRuleContext {
		public ITerminalNode[] ANY() { return GetTokens(CardLanguageParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(CardLanguageParser.ANY, i);
		}
		public NamegrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namegr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterNamegr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitNamegr(this);
		}
	}

	[RuleVersion(0)]
	public NamegrContext namegr() {
		NamegrContext _localctx = new NamegrContext(Context, State);
		EnterRule(_localctx, 112, RULE_namegr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 523;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 522; Match(ANY);
				}
				}
				State = 525;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==ANY );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode[] ANY() { return GetTokens(CardLanguageParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(CardLanguageParser.ANY, i);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICardLanguageListener typedListener = listener as ICardLanguageListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 114, RULE_name);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 528;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 527; Match(ANY);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 530;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3<\x217\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2"+
		"\x3\x2\x3\x2\x6\x2~\n\x2\r\x2\xE\x2\x7F\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x5\x3\x89\n\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x6\x6\x98\n\x6\r\x6\xE\x6\x99\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\b\x6\b\xA2\n\b\r\b\xE\b\xA3\x3\t\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\xB2\n\t\x3\t\x3\t\x3\n"+
		"\x3\n\x3\n\x3\n\x6\n\xBA\n\n\r\n\xE\n\xBB\x3\v\x3\v\x3\v\x3\v\x5\v\xC2"+
		"\n\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x6\f\xCB\n\f\r\f\xE\f\xCC\x3\f"+
		"\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\xD7\n\xE\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x6\x11\xE4\n"+
		"\x11\r\x11\xE\x11\xE5\x3\x11\x3\x11\x3\x12\x3\x12\x6\x12\xEC\n\x12\r\x12"+
		"\xE\x12\xED\x3\x12\a\x12\xF1\n\x12\f\x12\xE\x12\xF4\v\x12\x3\x12\x3\x12"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x6\x13\xFC\n\x13\r\x13\xE\x13\xFD\x3\x13"+
		"\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x5\x14\x10B\n\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x5\x15\x115\n\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x17"+
		"\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x126\n"+
		"\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x12D\n\x19\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x13E\n\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x6"+
		"\x1F\x144\n\x1F\r\x1F\xE\x1F\x145\x3\x1F\x3\x1F\x3 \x3 \x6 \x14C\n \r"+
		" \xE \x14D\x3 \x3 \x3!\x3!\x3!\x3!\x5!\x156\n!\x3!\x3!\x3\"\x3\"\x3#\x3"+
		"#\x3#\x3#\x3#\x3#\x5#\x162\n#\x3#\x3#\x3#\x5#\x167\n#\x3$\x3$\x3$\x3$"+
		"\x3$\x3%\x3%\x3%\x5%\x171\n%\x3%\x3%\x3%\x3%\x3&\x3&\x3&\x3&\x5&\x17B"+
		"\n&\x3&\x3&\x3&\x5&\x180\n&\x3&\x3&\x5&\x184\n&\x3\'\x3\'\x3(\x3(\x3("+
		"\x3(\x3(\x3(\x5(\x18E\n(\x3(\x3(\x3(\x3)\x3)\x3)\x6)\x196\n)\r)\xE)\x197"+
		"\x3*\x3*\x3*\x3+\x3+\x3+\x3+\x3,\x3,\x3,\x3,\x3-\x3-\x3-\x3-\x3-\x3-\x5"+
		"-\x1AB\n-\x3-\x3-\x5-\x1AF\n-\x3.\x3.\x3/\x3/\x3/\x3/\x6/\x1B7\n/\r/\xE"+
		"/\x1B8\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x5/\x1C2\n/\x3/\x3/\x3/\x3/\x5/\x1C8"+
		"\n/\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x32\x3"+
		"\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3"+
		"\x33\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x35\x3\x35\x3\x35\x3"+
		"\x35\x3\x35\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x37\x3"+
		"\x37\x3\x37\x6\x37\x1F3\n\x37\r\x37\xE\x37\x1F4\x3\x37\x3\x37\x3\x38\x3"+
		"\x38\x3\x38\x3\x38\x3\x38\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3"+
		"\x39\x3\x39\x3\x39\x6\x39\x207\n\x39\r\x39\xE\x39\x208\x5\x39\x20B\n\x39"+
		"\x3:\x6:\x20E\n:\r:\xE:\x20F\x3;\x6;\x213\n;\r;\xE;\x214\x3;\x11\x7F\x99"+
		"\xA3\xBB\xCC\xE5\xED\xF2\xFD\x145\x14D\x197\x1B8\x1F4\x214\x2<\x2\x4\x6"+
		"\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38"+
		":<>@\x42\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66hjlnprt\x2\t\x3\x2\x4\x6\x3"+
		"\x2\f\xE\x3\x2\x13\x14\x3\x2 !\x3\x2\x5\x6\x4\x2\x1D\x1D&&\x3\x2\x35\x36"+
		"\x222\x2v\x3\x2\x2\x2\x4\x83\x3\x2\x2\x2\x6\x8C\x3\x2\x2\x2\b\x91\x3\x2"+
		"\x2\x2\n\x97\x3\x2\x2\x2\f\x9B\x3\x2\x2\x2\xE\xA1\x3\x2\x2\x2\x10\xA5"+
		"\x3\x2\x2\x2\x12\xB5\x3\x2\x2\x2\x14\xBD\x3\x2\x2\x2\x16\xC5\x3\x2\x2"+
		"\x2\x18\xD0\x3\x2\x2\x2\x1A\xD2\x3\x2\x2\x2\x1C\xD8\x3\x2\x2\x2\x1E\xDD"+
		"\x3\x2\x2\x2 \xE0\x3\x2\x2\x2\"\xE9\x3\x2\x2\x2$\xF7\x3\x2\x2\x2&\x101"+
		"\x3\x2\x2\x2(\x110\x3\x2\x2\x2*\x118\x3\x2\x2\x2,\x11C\x3\x2\x2\x2.\x120"+
		"\x3\x2\x2\x2\x30\x127\x3\x2\x2\x2\x32\x12E\x3\x2\x2\x2\x34\x131\x3\x2"+
		"\x2\x2\x36\x134\x3\x2\x2\x2\x38\x137\x3\x2\x2\x2:\x139\x3\x2\x2\x2<\x141"+
		"\x3\x2\x2\x2>\x149\x3\x2\x2\x2@\x151\x3\x2\x2\x2\x42\x159\x3\x2\x2\x2"+
		"\x44\x166\x3\x2\x2\x2\x46\x168\x3\x2\x2\x2H\x16D\x3\x2\x2\x2J\x183\x3"+
		"\x2\x2\x2L\x185\x3\x2\x2\x2N\x187\x3\x2\x2\x2P\x195\x3\x2\x2\x2R\x199"+
		"\x3\x2\x2\x2T\x19C\x3\x2\x2\x2V\x1A0\x3\x2\x2\x2X\x1AE\x3\x2\x2\x2Z\x1B0"+
		"\x3\x2\x2\x2\\\x1C7\x3\x2\x2\x2^\x1C9\x3\x2\x2\x2`\x1CB\x3\x2\x2\x2\x62"+
		"\x1D1\x3\x2\x2\x2\x64\x1D7\x3\x2\x2\x2\x66\x1DD\x3\x2\x2\x2h\x1E3\x3\x2"+
		"\x2\x2j\x1E8\x3\x2\x2\x2l\x1EF\x3\x2\x2\x2n\x1F8\x3\x2\x2\x2p\x20A\x3"+
		"\x2\x2\x2r\x20D\x3\x2\x2\x2t\x212\x3\x2\x2\x2vw\a\x39\x2\x2wx\a\x3\x2"+
		"\x2xy\t\x2\x2\x2y}\x5\x4\x3\x2z~\x5\x6\x4\x2{~\x5\b\x5\x2|~\x5\x2\x2\x2"+
		"}z\x3\x2\x2\x2}{\x3\x2\x2\x2}|\x3\x2\x2\x2~\x7F\x3\x2\x2\x2\x7F\x80\x3"+
		"\x2\x2\x2\x7F}\x3\x2\x2\x2\x80\x81\x3\x2\x2\x2\x81\x82\a:\x2\x2\x82\x3"+
		"\x3\x2\x2\x2\x83\x84\a\x39\x2\x2\x84\x88\a\a\x2\x2\x85\x89\x5\\/\x2\x86"+
		"\x87\t\x2\x2\x2\x87\x89\x5p\x39\x2\x88\x85\x3\x2\x2\x2\x88\x86\x3\x2\x2"+
		"\x2\x89\x8A\x3\x2\x2\x2\x8A\x8B\a:\x2\x2\x8B\x5\x3\x2\x2\x2\x8C\x8D\a"+
		"\x39\x2\x2\x8D\x8E\a\b\x2\x2\x8E\x8F\x5\n\x6\x2\x8F\x90\a:\x2\x2\x90\a"+
		"\x3\x2\x2\x2\x91\x92\a\x39\x2\x2\x92\x93\a\t\x2\x2\x93\x94\x5\n\x6\x2"+
		"\x94\x95\a:\x2\x2\x95\t\x3\x2\x2\x2\x96\x98\x5\f\a\x2\x97\x96\x3\x2\x2"+
		"\x2\x98\x99\x3\x2\x2\x2\x99\x9A\x3\x2\x2\x2\x99\x97\x3\x2\x2\x2\x9A\v"+
		"\x3\x2\x2\x2\x9B\x9C\a\x39\x2\x2\x9C\x9D\x5\\/\x2\x9D\x9E\x5\xE\b\x2\x9E"+
		"\x9F\a:\x2\x2\x9F\r\x3\x2\x2\x2\xA0\xA2\x5\x10\t\x2\xA1\xA0\x3\x2\x2\x2"+
		"\xA2\xA3\x3\x2\x2\x2\xA3\xA4\x3\x2\x2\x2\xA3\xA1\x3\x2\x2\x2\xA4\xF\x3"+
		"\x2\x2\x2\xA5\xB1\a\x39\x2\x2\xA6\xB2\x5\x1A\xE\x2\xA7\xB2\x5\x12\n\x2"+
		"\xA8\xB2\x5\x16\f\x2\xA9\xB2\x5(\x15\x2\xAA\xB2\x5.\x18\x2\xAB\xB2\x5"+
		"\x30\x19\x2\xAC\xB2\x5*\x16\x2\xAD\xB2\x5,\x17\x2\xAE\xB2\x5\x34\x1B\x2"+
		"\xAF\xB2\x5\x32\x1A\x2\xB0\xB2\x5\x36\x1C\x2\xB1\xA6\x3\x2\x2\x2\xB1\xA7"+
		"\x3\x2\x2\x2\xB1\xA8\x3\x2\x2\x2\xB1\xA9\x3\x2\x2\x2\xB1\xAA\x3\x2\x2"+
		"\x2\xB1\xAB\x3\x2\x2\x2\xB1\xAC\x3\x2\x2\x2\xB1\xAD\x3\x2\x2\x2\xB1\xAE"+
		"\x3\x2\x2\x2\xB1\xAF\x3\x2\x2\x2\xB1\xB0\x3\x2\x2\x2\xB2\xB3\x3\x2\x2"+
		"\x2\xB3\xB4\a:\x2\x2\xB4\x11\x3\x2\x2\x2\xB5\xB6\a\n\x2\x2\xB6\xB7\a\v"+
		"\x2\x2\xB7\xB9\x5\x18\r\x2\xB8\xBA\x5\x14\v\x2\xB9\xB8\x3\x2\x2\x2\xBA"+
		"\xBB\x3\x2\x2\x2\xBB\xBC\x3\x2\x2\x2\xBB\xB9\x3\x2\x2\x2\xBC\x13\x3\x2"+
		"\x2\x2\xBD\xBE\a\x39\x2\x2\xBE\xBF\x5t;\x2\xBF\xC1\t\x3\x2\x2\xC0\xC2"+
		"\a\xF\x2\x2\xC1\xC0\x3\x2\x2\x2\xC1\xC2\x3\x2\x2\x2\xC2\xC3\x3\x2\x2\x2"+
		"\xC3\xC4\a:\x2\x2\xC4\x15\x3\x2\x2\x2\xC5\xC6\a\n\x2\x2\xC6\xC7\a\x10"+
		"\x2\x2\xC7\xC8\x5\x18\r\x2\xC8\xCA\a\x39\x2\x2\xC9\xCB\x5t;\x2\xCA\xC9"+
		"\x3\x2\x2\x2\xCB\xCC\x3\x2\x2\x2\xCC\xCD\x3\x2\x2\x2\xCC\xCA\x3\x2\x2"+
		"\x2\xCD\xCE\x3\x2\x2\x2\xCE\xCF\a:\x2\x2\xCF\x17\x3\x2\x2\x2\xD0\xD1\t"+
		"\x2\x2\x2\xD1\x19\x3\x2\x2\x2\xD2\xD6\a\x11\x2\x2\xD3\xD7\x5\x1C\xF\x2"+
		"\xD4\xD7\x5\x1E\x10\x2\xD5\xD7\x5$\x13\x2\xD6\xD3\x3\x2\x2\x2\xD6\xD4"+
		"\x3\x2\x2\x2\xD6\xD5\x3\x2\x2\x2\xD7\x1B\x3\x2\x2\x2\xD8\xD9\a\x12\x2"+
		"\x2\xD9\xDA\x5p\x39\x2\xDA\xDB\x5p\x39\x2\xDB\xDC\t\x4\x2\x2\xDC\x1D\x3"+
		"\x2\x2\x2\xDD\xDE\x5J&\x2\xDE\xDF\x5 \x11\x2\xDF\x1F\x3\x2\x2\x2\xE0\xE1"+
		"\a\x39\x2\x2\xE1\xE3\a\x15\x2\x2\xE2\xE4\x5\"\x12\x2\xE3\xE2\x3\x2\x2"+
		"\x2\xE4\xE5\x3\x2\x2\x2\xE5\xE6\x3\x2\x2\x2\xE5\xE3\x3\x2\x2\x2\xE6\xE7"+
		"\x3\x2\x2\x2\xE7\xE8\a:\x2\x2\xE8!\x3\x2\x2\x2\xE9\xEB\a\x39\x2\x2\xEA"+
		"\xEC\x5P)\x2\xEB\xEA\x3\x2\x2\x2\xEC\xED\x3\x2\x2\x2\xED\xEE\x3\x2\x2"+
		"\x2\xED\xEB\x3\x2\x2\x2\xEE\xF2\x3\x2\x2\x2\xEF\xF1\x5\"\x12\x2\xF0\xEF"+
		"\x3\x2\x2\x2\xF1\xF4\x3\x2\x2\x2\xF2\xF3\x3\x2\x2\x2\xF2\xF0\x3\x2\x2"+
		"\x2\xF3\xF5\x3\x2\x2\x2\xF4\xF2\x3\x2\x2\x2\xF5\xF6\a:\x2\x2\xF6#\x3\x2"+
		"\x2\x2\xF7\xF8\a\x16\x2\x2\xF8\xF9\x5t;\x2\xF9\xFB\a\x39\x2\x2\xFA\xFC"+
		"\x5&\x14\x2\xFB\xFA\x3\x2\x2\x2\xFC\xFD\x3\x2\x2\x2\xFD\xFE\x3\x2\x2\x2"+
		"\xFD\xFB\x3\x2\x2\x2\xFE\xFF\x3\x2\x2\x2\xFF\x100\a:\x2\x2\x100%\x3\x2"+
		"\x2\x2\x101\x102\a\x39\x2\x2\x102\x103\x5Z.\x2\x103\x104\a\x39\x2\x2\x104"+
		"\x10A\x5t;\x2\x105\x106\a\x39\x2\x2\x106\x107\x5P)\x2\x107\x108\a:\x2"+
		"\x2\x108\x10B\x3\x2\x2\x2\x109\x10B\x5X-\x2\x10A\x105\x3\x2\x2\x2\x10A"+
		"\x109\x3\x2\x2\x2\x10B\x10C\x3\x2\x2\x2\x10C\x10D\a:\x2\x2\x10D\x10E\x5"+
		"p\x39\x2\x10E\x10F\a:\x2\x2\x10F\'\x3\x2\x2\x2\x110\x114\a\x17\x2\x2\x111"+
		"\x115\a\x18\x2\x2\x112\x115\a\x19\x2\x2\x113\x115\x5H%\x2\x114\x111\x3"+
		"\x2\x2\x2\x114\x112\x3\x2\x2\x2\x114\x113\x3\x2\x2\x2\x115\x116\x3\x2"+
		"\x2\x2\x116\x117\x5p\x39\x2\x117)\x3\x2\x2\x2\x118\x119\a\x1A\x2\x2\x119"+
		"\x11A\x5H%\x2\x11A\x11B\x5p\x39\x2\x11B+\x3\x2\x2\x2\x11C\x11D\a\x1B\x2"+
		"\x2\x11D\x11E\x5H%\x2\x11E\x11F\x5p\x39\x2\x11F-\x3\x2\x2\x2\x120\x121"+
		"\a\x1C\x2\x2\x121\x122\x5\x44#\x2\x122\x125\x5\x44#\x2\x123\x126\x5p\x39"+
		"\x2\x124\x126\a\x1D\x2\x2\x125\x123\x3\x2\x2\x2\x125\x124\x3\x2\x2\x2"+
		"\x125\x126\x3\x2\x2\x2\x126/\x3\x2\x2\x2\x127\x128\a\x1E\x2\x2\x128\x129"+
		"\x5\x44#\x2\x129\x12C\x5\x44#\x2\x12A\x12D\x5p\x39\x2\x12B\x12D\a\x1D"+
		"\x2\x2\x12C\x12A\x3\x2\x2\x2\x12C\x12B\x3\x2\x2\x2\x12C\x12D\x3\x2\x2"+
		"\x2\x12D\x31\x3\x2\x2\x2\x12E\x12F\a\x1F\x2\x2\x12F\x130\t\x5\x2\x2\x130"+
		"\x33\x3\x2\x2\x2\x131\x132\a\"\x2\x2\x132\x133\x5\x44#\x2\x133\x35\x3"+
		"\x2\x2\x2\x134\x135\a#\x2\x2\x135\x136\x5J&\x2\x136\x37\x3\x2\x2\x2\x137"+
		"\x138\x5:\x1E\x2\x138\x39\x3\x2\x2\x2\x139\x13A\a\n\x2\x2\x13A\x13D\a"+
		"\x10\x2\x2\x13B\x13E\x5L\'\x2\x13C\x13E\x5N(\x2\x13D\x13B\x3\x2\x2\x2"+
		"\x13D\x13C\x3\x2\x2\x2\x13E\x13F\x3\x2\x2\x2\x13F\x140\x5<\x1F\x2\x140"+
		";\x3\x2\x2\x2\x141\x143\a\x39\x2\x2\x142\x144\x5t;\x2\x143\x142\x3\x2"+
		"\x2\x2\x144\x145\x3\x2\x2\x2\x145\x146\x3\x2\x2\x2\x145\x143\x3\x2\x2"+
		"\x2\x146\x147\x3\x2\x2\x2\x147\x148\a:\x2\x2\x148=\x3\x2\x2\x2\x149\x14B"+
		"\a\x39\x2\x2\x14A\x14C\x5@!\x2\x14B\x14A\x3\x2\x2\x2\x14C\x14D\x3\x2\x2"+
		"\x2\x14D\x14E\x3\x2\x2\x2\x14D\x14B\x3\x2\x2\x2\x14E\x14F\x3\x2\x2\x2"+
		"\x14F\x150\a:\x2\x2\x150?\x3\x2\x2\x2\x151\x152\a\x39\x2\x2\x152\x153"+
		"\x5t;\x2\x153\x155\t\x3\x2\x2\x154\x156\x5\x42\"\x2\x155\x154\x3\x2\x2"+
		"\x2\x155\x156\x3\x2\x2\x2\x156\x157\x3\x2\x2\x2\x157\x158\a:\x2\x2\x158"+
		"\x41\x3\x2\x2\x2\x159\x15A\a\xF\x2\x2\x15A\x43\x3\x2\x2\x2\x15B\x167\x5"+
		"j\x36\x2\x15C\x161\a\x39\x2\x2\x15D\x162\a$\x2\x2\x15E\x162\a%\x2\x2\x15F"+
		"\x162\x5p\x39\x2\x160\x162\a&\x2\x2\x161\x15D\x3\x2\x2\x2\x161\x15E\x3"+
		"\x2\x2\x2\x161\x15F\x3\x2\x2\x2\x161\x160\x3\x2\x2\x2\x162\x163\x3\x2"+
		"\x2\x2\x163\x164\x5J&\x2\x164\x165\a:\x2\x2\x165\x167\x3\x2\x2\x2\x166"+
		"\x15B\x3\x2\x2\x2\x166\x15C\x3\x2\x2\x2\x167\x45\x3\x2\x2\x2\x168\x169"+
		"\a\x39\x2\x2\x169\x16A\a\'\x2\x2\x16A\x16B\x5\x44#\x2\x16B\x16C\a:\x2"+
		"\x2\x16CG\x3\x2\x2\x2\x16D\x170\a\x39\x2\x2\x16E\x171\x5L\'\x2\x16F\x171"+
		"\x5N(\x2\x170\x16E\x3\x2\x2\x2\x170\x16F\x3\x2\x2\x2\x171\x172\x3\x2\x2"+
		"\x2\x172\x173\a\x10\x2\x2\x173\x174\x5r:\x2\x174\x175\a:\x2\x2\x175I\x3"+
		"\x2\x2\x2\x176\x184\x5l\x37\x2\x177\x17A\a\x39\x2\x2\x178\x17B\x5L\'\x2"+
		"\x179\x17B\x5N(\x2\x17A\x178\x3\x2\x2\x2\x17A\x179\x3\x2\x2\x2\x17B\x17C"+
		"\x3\x2\x2\x2\x17C\x17D\a\v\x2\x2\x17D\x17F\x5t;\x2\x17E\x180\x5R*\x2\x17F"+
		"\x17E\x3\x2\x2\x2\x17F\x180\x3\x2\x2\x2\x180\x181\x3\x2\x2\x2\x181\x182"+
		"\a:\x2\x2\x182\x184\x3\x2\x2\x2\x183\x176\x3\x2\x2\x2\x183\x177\x3\x2"+
		"\x2\x2\x184K\x3\x2\x2\x2\x185\x186\a\x4\x2\x2\x186M\x3\x2\x2\x2\x187\x18D"+
		"\a\x39\x2\x2\x188\x18E\x5Z.\x2\x189\x18E\x5p\x39\x2\x18A\x18E\a\x18\x2"+
		"\x2\x18B\x18E\a\x19\x2\x2\x18C\x18E\x5N(\x2\x18D\x188\x3\x2\x2\x2\x18D"+
		"\x189\x3\x2\x2\x2\x18D\x18A\x3\x2\x2\x2\x18D\x18B\x3\x2\x2\x2\x18D\x18C"+
		"\x3\x2\x2\x2\x18E\x18F\x3\x2\x2\x2\x18F\x190\t\x6\x2\x2\x190\x191\a:\x2"+
		"\x2\x191O\x3\x2\x2\x2\x192\x196\a<\x2\x2\x193\x196\x5p\x39\x2\x194\x196"+
		"\a\x34\x2\x2\x195\x192\x3\x2\x2\x2\x195\x193\x3\x2\x2\x2\x195\x194\x3"+
		"\x2\x2\x2\x196\x197\x3\x2\x2\x2\x197\x198\x3\x2\x2\x2\x197\x195\x3\x2"+
		"\x2\x2\x198Q\x3\x2\x2\x2\x199\x19A\a(\x2\x2\x19A\x19B\x5T+\x2\x19BS\x3"+
		"\x2\x2\x2\x19C\x19D\a\x39\x2\x2\x19D\x19E\x5V,\x2\x19E\x19F\a:\x2\x2\x19F"+
		"U\x3\x2\x2\x2\x1A0\x1A1\a\x36\x2\x2\x1A1\x1A2\x5X-\x2\x1A2\x1A3\x5X-\x2"+
		"\x1A3W\x3\x2\x2\x2\x1A4\x1AF\x5t;\x2\x1A5\x1A6\a\x39\x2\x2\x1A6\x1A7\a"+
		")\x2\x2\x1A7\x1AA\x5t;\x2\x1A8\x1AB\a*\x2\x2\x1A9\x1AB\x5\x44#\x2\x1AA"+
		"\x1A8\x3\x2\x2\x2\x1AA\x1A9\x3\x2\x2\x2\x1AB\x1AC\x3\x2\x2\x2\x1AC\x1AD"+
		"\a:\x2\x2\x1AD\x1AF\x3\x2\x2\x2\x1AE\x1A4\x3\x2\x2\x2\x1AE\x1A5\x3\x2"+
		"\x2\x2\x1AFY\x3\x2\x2\x2\x1B0\x1B1\t\a\x2\x2\x1B1[\x3\x2\x2\x2\x1B2\x1C1"+
		"\a\x39\x2\x2\x1B3\x1B4\a\x34\x2\x2\x1B4\x1B6\x5\\/\x2\x1B5\x1B7\x5\\/"+
		"\x2\x1B6\x1B5\x3\x2\x2\x2\x1B7\x1B8\x3\x2\x2\x2\x1B8\x1B9\x3\x2\x2\x2"+
		"\x1B8\x1B6\x3\x2\x2\x2\x1B9\x1C2\x3\x2\x2\x2\x1BA\x1C2\x5V,\x2\x1BB\x1BC"+
		"\x5^\x30\x2\x1BC\x1BD\x5p\x39\x2\x1BD\x1BE\x5p\x39\x2\x1BE\x1C2\x3\x2"+
		"\x2\x2\x1BF\x1C0\a\x37\x2\x2\x1C0\x1C2\x5\\/\x2\x1C1\x1B3\x3\x2\x2\x2"+
		"\x1C1\x1BA\x3\x2\x2\x2\x1C1\x1BB\x3\x2\x2\x2\x1C1\x1BF\x3\x2\x2\x2\x1C2"+
		"\x1C3\x3\x2\x2\x2\x1C3\x1C4\a:\x2\x2\x1C4\x1C8\x3\x2\x2\x2\x1C5\x1C6\a"+
		"\x39\x2\x2\x1C6\x1C8\a:\x2\x2\x1C7\x1B2\x3\x2\x2\x2\x1C7\x1C5\x3\x2\x2"+
		"\x2\x1C8]\x3\x2\x2\x2\x1C9\x1CA\t\b\x2\x2\x1CA_\x3\x2\x2\x2\x1CB\x1CC"+
		"\a\x39\x2\x2\x1CC\x1CD\a+\x2\x2\x1CD\x1CE\x5p\x39\x2\x1CE\x1CF\x5p\x39"+
		"\x2\x1CF\x1D0\a:\x2\x2\x1D0\x61\x3\x2\x2\x2\x1D1\x1D2\a\x39\x2\x2\x1D2"+
		"\x1D3\a,\x2\x2\x1D3\x1D4\x5p\x39\x2\x1D4\x1D5\x5p\x39\x2\x1D5\x1D6\a:"+
		"\x2\x2\x1D6\x63\x3\x2\x2\x2\x1D7\x1D8\a\x39\x2\x2\x1D8\x1D9\a-\x2\x2\x1D9"+
		"\x1DA\x5p\x39\x2\x1DA\x1DB\x5p\x39\x2\x1DB\x1DC\a:\x2\x2\x1DC\x65\x3\x2"+
		"\x2\x2\x1DD\x1DE\a\x39\x2\x2\x1DE\x1DF\a.\x2\x2\x1DF\x1E0\x5p\x39\x2\x1E0"+
		"\x1E1\x5p\x39\x2\x1E1\x1E2\a:\x2\x2\x1E2g\x3\x2\x2\x2\x1E3\x1E4\a\x39"+
		"\x2\x2\x1E4\x1E5\a/\x2\x2\x1E5\x1E6\x5J&\x2\x1E6\x1E7\a:\x2\x2\x1E7i\x3"+
		"\x2\x2\x2\x1E8\x1E9\a\x39\x2\x2\x1E9\x1EA\a\x30\x2\x2\x1EA\x1EB\x5J&\x2"+
		"\x1EB\x1EC\a\x31\x2\x2\x1EC\x1ED\x5r:\x2\x1ED\x1EE\a:\x2\x2\x1EEk\x3\x2"+
		"\x2\x2\x1EF\x1F0\a\x39\x2\x2\x1F0\x1F2\a\x32\x2\x2\x1F1\x1F3\x5J&\x2\x1F2"+
		"\x1F1\x3\x2\x2\x2\x1F3\x1F4\x3\x2\x2\x2\x1F4\x1F5\x3\x2\x2\x2\x1F4\x1F2"+
		"\x3\x2\x2\x2\x1F5\x1F6\x3\x2\x2\x2\x1F6\x1F7\a:\x2\x2\x1F7m\x3\x2\x2\x2"+
		"\x1F8\x1F9\a\x39\x2\x2\x1F9\x1FA\a\x33\x2\x2\x1FA\x1FB\x5H%\x2\x1FB\x1FC"+
		"\a:\x2\x2\x1FCo\x3\x2\x2\x2\x1FD\x20B\x5\x46$\x2\x1FE\x20B\x5h\x35\x2"+
		"\x1FF\x20B\x5`\x31\x2\x200\x20B\x5\x62\x32\x2\x201\x20B\x5\x64\x33\x2"+
		"\x202\x20B\x5\x66\x34\x2\x203\x20B\x5n\x38\x2\x204\x20B\x5H%\x2\x205\x207"+
		"\a\x38\x2\x2\x206\x205\x3\x2\x2\x2\x207\x208\x3\x2\x2\x2\x208\x206\x3"+
		"\x2\x2\x2\x208\x209\x3\x2\x2\x2\x209\x20B\x3\x2\x2\x2\x20A\x1FD\x3\x2"+
		"\x2\x2\x20A\x1FE\x3\x2\x2\x2\x20A\x1FF\x3\x2\x2\x2\x20A\x200\x3\x2\x2"+
		"\x2\x20A\x201\x3\x2\x2\x2\x20A\x202\x3\x2\x2\x2\x20A\x203\x3\x2\x2\x2"+
		"\x20A\x204\x3\x2\x2\x2\x20A\x206\x3\x2\x2\x2\x20Bq\x3\x2\x2\x2\x20C\x20E"+
		"\a<\x2\x2\x20D\x20C\x3\x2\x2\x2\x20E\x20F\x3\x2\x2\x2\x20F\x20D\x3\x2"+
		"\x2\x2\x20F\x210\x3\x2\x2\x2\x210s\x3\x2\x2\x2\x211\x213\a<\x2\x2\x212"+
		"\x211\x3\x2\x2\x2\x213\x214\x3\x2\x2\x2\x214\x215\x3\x2\x2\x2\x214\x212"+
		"\x3\x2\x2\x2\x215u\x3\x2\x2\x2+}\x7F\x88\x99\xA3\xB1\xBB\xC1\xCC\xD6\xE5"+
		"\xED\xF2\xFD\x10A\x114\x125\x12C\x13D\x145\x14D\x155\x161\x166\x170\x17A"+
		"\x17F\x183\x18D\x195\x197\x1AA\x1AE\x1B8\x1C1\x1C7\x1F4\x208\x20A\x20F"+
		"\x214";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
